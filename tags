!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCESSPERMS	compat.h	81;"	d
ALERT_ANY	tmux.h	105;"	d
ALERT_CURRENT	tmux.h	106;"	d
ALERT_NONE	tmux.h	104;"	d
ALERT_OTHER	tmux.h	107;"	d
ALL_MODES	tmux.h	599;"	d
ALL_MOUSE_MODES	tmux.h	600;"	d
BADARG	compat/getopt.c	45;"	d	file:
BADCH	compat/getopt.c	44;"	d	file:
BREAK_PANE_TEMPLATE	cmd-break-pane.c	29;"	d	file:
BSDgetopt	compat/getopt.c	/^BSDgetopt(int nargc, char *const *nargv, const char *ostr)$/;"	f
BSDoptarg	compat/getopt.c	/^char	*BSDoptarg;		\/* argument associated with option *\/$/;"	v
BSDopterr	compat/getopt.c	/^int	BSDopterr = 1,		\/* if error message should be printed *\/$/;"	v
BSDoptind	compat/getopt.c	/^	BSDoptind = 1,		\/* index into parent argv vector *\/$/;"	v
BSDoptopt	compat/getopt.c	/^	BSDoptopt,		\/* character checked for validity *\/$/;"	v
BSDoptreset	compat/getopt.c	/^	BSDoptreset;		\/* reset getopt *\/$/;"	v
Base64	compat/base64.c	/^static const char Base64[] =$/;"	v	file:
CELL_BORDERS	screen-redraw.c	48;"	d	file:
CELL_BOTTOMJOIN	screen-redraw.c	42;"	d	file:
CELL_BOTTOMLEFT	screen-redraw.c	39;"	d	file:
CELL_BOTTOMRIGHT	screen-redraw.c	40;"	d	file:
CELL_INSIDE	screen-redraw.c	34;"	d	file:
CELL_JOIN	screen-redraw.c	45;"	d	file:
CELL_LEFTJOIN	screen-redraw.c	43;"	d	file:
CELL_LEFTRIGHT	screen-redraw.c	35;"	d	file:
CELL_OUTSIDE	screen-redraw.c	46;"	d	file:
CELL_RIGHTJOIN	screen-redraw.c	44;"	d	file:
CELL_TOPBOTTOM	screen-redraw.c	36;"	d	file:
CELL_TOPJOIN	screen-redraw.c	41;"	d	file:
CELL_TOPLEFT	screen-redraw.c	37;"	d	file:
CELL_TOPRIGHT	screen-redraw.c	38;"	d	file:
CLEAR_END	screen-write.c	/^	enum { TEXT, CLEAR_END, CLEAR_START } type;$/;"	e	enum:screen_write_collect_item::__anon9	file:
CLEAR_START	screen-write.c	/^	enum { TEXT, CLEAR_END, CLEAR_START } type;$/;"	e	enum:screen_write_collect_item::__anon9	file:
CLIENT_ACTIVEPANE	tmux.h	1653;"	d
CLIENT_ALLREDRAWFLAGS	tmux.h	1656;"	d
CLIENT_ATTACHED	tmux.h	1629;"	d
CLIENT_CONTROL	tmux.h	1635;"	d
CLIENT_CONTROLCONTROL	tmux.h	1636;"	d
CLIENT_CONTROL_NOOUTPUT	tmux.h	1648;"	d
CLIENT_CONTROL_PAUSEAFTER	tmux.h	1654;"	d
CLIENT_CONTROL_WAITEXIT	tmux.h	1655;"	d
CLIENT_DEAD	tmux.h	1631;"	d
CLIENT_DEFAULTSOCKET	tmux.h	1649;"	d
CLIENT_DOUBLECLICK	tmux.h	1642;"	d
CLIENT_EXIT	tmux.h	1624;"	d
CLIENT_EXITED	tmux.h	1630;"	d
CLIENT_EXIT_DETACH	tmux.h	/^		CLIENT_EXIT_DETACH$/;"	e	enum:client::__anon14
CLIENT_EXIT_DETACHED	client.c	/^	CLIENT_EXIT_DETACHED,$/;"	e	enum:__anon1	file:
CLIENT_EXIT_DETACHED_HUP	client.c	/^	CLIENT_EXIT_DETACHED_HUP,$/;"	e	enum:__anon1	file:
CLIENT_EXIT_EXITED	client.c	/^	CLIENT_EXIT_EXITED,$/;"	e	enum:__anon1	file:
CLIENT_EXIT_LOST_SERVER	client.c	/^	CLIENT_EXIT_LOST_SERVER,$/;"	e	enum:__anon1	file:
CLIENT_EXIT_LOST_TTY	client.c	/^	CLIENT_EXIT_LOST_TTY,$/;"	e	enum:__anon1	file:
CLIENT_EXIT_MESSAGE_PROVIDED	client.c	/^	CLIENT_EXIT_MESSAGE_PROVIDED$/;"	e	enum:__anon1	file:
CLIENT_EXIT_NONE	client.c	/^	CLIENT_EXIT_NONE,$/;"	e	enum:__anon1	file:
CLIENT_EXIT_RETURN	tmux.h	/^		CLIENT_EXIT_RETURN,$/;"	e	enum:client::__anon14
CLIENT_EXIT_SERVER_EXITED	client.c	/^	CLIENT_EXIT_SERVER_EXITED,$/;"	e	enum:__anon1	file:
CLIENT_EXIT_SHUTDOWN	tmux.h	/^		CLIENT_EXIT_SHUTDOWN,$/;"	e	enum:client::__anon14
CLIENT_EXIT_TERMINATED	client.c	/^	CLIENT_EXIT_TERMINATED,$/;"	e	enum:__anon1	file:
CLIENT_FOCUSED	tmux.h	1637;"	d
CLIENT_IDENTIFIED	tmux.h	1640;"	d
CLIENT_IGNORESIZE	tmux.h	1639;"	d
CLIENT_LOGIN	tmux.h	1623;"	d
CLIENT_NOFORK	tmux.h	1652;"	d
CLIENT_NOSIZEFLAGS	tmux.h	1667;"	d
CLIENT_READONLY	tmux.h	1633;"	d
CLIENT_REDRAWBORDERS	tmux.h	1632;"	d
CLIENT_REDRAWOVERLAY	tmux.h	1647;"	d
CLIENT_REDRAWPANES	tmux.h	1651;"	d
CLIENT_REDRAWSTATUS	tmux.h	1626;"	d
CLIENT_REDRAWSTATUSALWAYS	tmux.h	1646;"	d
CLIENT_REDRAWWINDOW	tmux.h	1625;"	d
CLIENT_REPEAT	tmux.h	1627;"	d
CLIENT_SIZECHANGED	tmux.h	1644;"	d
CLIENT_STARTSERVER	tmux.h	1650;"	d
CLIENT_STATUSFORCE	tmux.h	1641;"	d
CLIENT_STATUSOFF	tmux.h	1645;"	d
CLIENT_SUSPENDED	tmux.h	1628;"	d
CLIENT_TERMINAL	tmux.h	1622;"	d
CLIENT_TRIPLECLICK	tmux.h	1643;"	d
CLIENT_UNATTACHEDFLAGS	tmux.h	1663;"	d
CLIENT_UTF8	tmux.h	1638;"	d
CMDQ_CALLBACK	cmd-queue.c	/^	CMDQ_CALLBACK,$/;"	e	enum:cmdq_type	file:
CMDQ_COMMAND	cmd-queue.c	/^	CMDQ_COMMAND,$/;"	e	enum:cmdq_type	file:
CMDQ_FIRED	cmd-queue.c	29;"	d	file:
CMDQ_STATE_CONTROL	tmux.h	1483;"	d
CMDQ_STATE_NOHOOKS	tmux.h	1484;"	d
CMDQ_STATE_REPEAT	tmux.h	1482;"	d
CMDQ_WAITING	cmd-queue.c	30;"	d	file:
CMD_AFTERHOOK	tmux.h	1513;"	d
CMD_BUFFER_USAGE	tmux.h	1832;"	d
CMD_CLIENT_CANFAIL	tmux.h	1516;"	d
CMD_CLIENT_CFLAG	tmux.h	1514;"	d
CMD_CLIENT_TFLAG	tmux.h	1515;"	d
CMD_FIND_CANFAIL	tmux.h	1437;"	d
CMD_FIND_DEFAULT_MARKED	tmux.h	1434;"	d
CMD_FIND_EXACT_SESSION	tmux.h	1435;"	d
CMD_FIND_EXACT_WINDOW	tmux.h	1436;"	d
CMD_FIND_PANE	tmux.h	/^	CMD_FIND_PANE,$/;"	e	enum:cmd_find_type
CMD_FIND_PREFER_UNATTACHED	tmux.h	1431;"	d
CMD_FIND_QUIET	tmux.h	1432;"	d
CMD_FIND_SESSION	tmux.h	/^	CMD_FIND_SESSION,$/;"	e	enum:cmd_find_type
CMD_FIND_WINDOW	tmux.h	/^	CMD_FIND_WINDOW,$/;"	e	enum:cmd_find_type
CMD_FIND_WINDOW_INDEX	tmux.h	1433;"	d
CMD_PARSE_EMPTY	tmux.h	/^	CMD_PARSE_EMPTY,$/;"	e	enum:cmd_parse_status
CMD_PARSE_ERROR	tmux.h	/^	CMD_PARSE_ERROR,$/;"	e	enum:cmd_parse_status
CMD_PARSE_NOALIAS	tmux.h	1469;"	d
CMD_PARSE_ONEGROUP	tmux.h	1471;"	d
CMD_PARSE_PARSEONLY	tmux.h	1468;"	d
CMD_PARSE_QUIET	tmux.h	1467;"	d
CMD_PARSE_SUCCESS	tmux.h	/^	CMD_PARSE_SUCCESS$/;"	e	enum:cmd_parse_status
CMD_PARSE_VERBOSE	tmux.h	1470;"	d
CMD_READONLY	tmux.h	1512;"	d
CMD_RETURN_ERROR	tmux.h	/^	CMD_RETURN_ERROR = -1,$/;"	e	enum:cmd_retval
CMD_RETURN_NORMAL	tmux.h	/^	CMD_RETURN_NORMAL = 0,$/;"	e	enum:cmd_retval
CMD_RETURN_STOP	tmux.h	/^	CMD_RETURN_STOP$/;"	e	enum:cmd_retval
CMD_RETURN_WAIT	tmux.h	/^	CMD_RETURN_WAIT,$/;"	e	enum:cmd_retval
CMD_SRCDST_CLIENT_USAGE	tmux.h	1831;"	d
CMD_SRCDST_PANE_USAGE	tmux.h	1828;"	d
CMD_SRCDST_SESSION_USAGE	tmux.h	1830;"	d
CMD_SRCDST_WINDOW_USAGE	tmux.h	1829;"	d
CMD_STARTSERVER	tmux.h	1511;"	d
CMD_TARGET_CLIENT_USAGE	tmux.h	1827;"	d
CMD_TARGET_PANE_USAGE	tmux.h	1824;"	d
CMD_TARGET_SESSION_USAGE	tmux.h	1826;"	d
CMD_TARGET_WINDOW_USAGE	tmux.h	1825;"	d
CMSG_ALIGN	compat.h	195;"	d
CMSG_ALIGN	compat.h	197;"	d
CMSG_FIRSTHDR	compat.h	186;"	d
CMSG_FIRSTHDR	compat.h	187;"	d
CMSG_LEN	compat.h	206;"	d
CMSG_SPACE	compat.h	202;"	d
COLOUR_DEFAULT	tmux.h	631;"	d
COLOUR_FLAG_256	tmux.h	627;"	d
COLOUR_FLAG_RGB	tmux.h	628;"	d
COMPAT_H	compat.h	18;"	d
CONTROL_BUFFER_HIGH	control.c	133;"	d	file:
CONTROL_BUFFER_LOW	control.c	132;"	d	file:
CONTROL_IGNORE_FLAGS	control.c	142;"	d	file:
CONTROL_MAXIMUM_AGE	control.c	139;"	d	file:
CONTROL_PANE_OFF	control.c	67;"	d	file:
CONTROL_PANE_PAUSED	control.c	68;"	d	file:
CONTROL_SHOULD_NOTIFY_CLIENT	control-notify.c	26;"	d	file:
CONTROL_SUB_ALL_PANES	tmux.h	/^	CONTROL_SUB_ALL_PANES,$/;"	e	enum:control_sub_type
CONTROL_SUB_ALL_WINDOWS	tmux.h	/^	CONTROL_SUB_ALL_WINDOWS$/;"	e	enum:control_sub_type
CONTROL_SUB_PANE	tmux.h	/^	CONTROL_SUB_PANE,$/;"	e	enum:control_sub_type
CONTROL_SUB_SESSION	tmux.h	/^	CONTROL_SUB_SESSION,$/;"	e	enum:control_sub_type
CONTROL_SUB_WINDOW	tmux.h	/^	CONTROL_SUB_WINDOW,$/;"	e	enum:control_sub_type
CONTROL_WRITE_MINIMUM	control.c	136;"	d	file:
CURSORDRAG_ENDSEL	window-copy.c	/^		CURSORDRAG_ENDSEL,	\/* end is synchronized with cursor *\/$/;"	e	enum:window_copy_mode_data::__anon19	file:
CURSORDRAG_NONE	window-copy.c	/^		CURSORDRAG_NONE,	\/* selection is independent of cursor *\/$/;"	e	enum:window_copy_mode_data::__anon19	file:
CURSORDRAG_SEL	window-copy.c	/^		CURSORDRAG_SEL,		\/* start is synchronized with cursor *\/$/;"	e	enum:window_copy_mode_data::__anon19	file:
DEFAULT_PANE_MENU	key-bindings.c	48;"	d	file:
DEFAULT_SESSION_MENU	key-bindings.c	27;"	d	file:
DEFAULT_WINDOW_MENU	key-bindings.c	36;"	d	file:
DEFAULT_XPIXEL	tmux.h	92;"	d
DEFAULT_YPIXEL	tmux.h	93;"	d
DISPLAY_MESSAGE_TEMPLATE	cmd-display-message.c	30;"	d	file:
ECHOPRT	compat.h	77;"	d
EMSG	compat/getopt.c	46;"	d	file:
ENVIRON_HIDDEN	tmux.h	1137;"	d
EXTERN_C	extern-c.h	11;"	d
EXTERN_C	extern-c.h	6;"	d
EXTERN_CPP	extern-c.h	12;"	d
EXTERN_CPP	extern-c.h	7;"	d
EXTERN_C_BEGIN	extern-c.h	4;"	d
EXTERN_C_BEGIN	extern-c.h	9;"	d
EXTERN_C_END	extern-c.h	10;"	d
EXTERN_C_END	extern-c.h	5;"	d
FNM_CASEFOLD	compat.h	215;"	d
FNM_CASEFOLD	compat.h	217;"	d
FORMAT_BASENAME	format.c	90;"	d	file:
FORMAT_DIRNAME	format.c	91;"	d	file:
FORMAT_ESCAPE	format.c	102;"	d	file:
FORMAT_EXPAND	format.c	94;"	d	file:
FORMAT_EXPANDTIME	format.c	95;"	d	file:
FORMAT_EXPAND_NOJOBS	format.c	109;"	d	file:
FORMAT_EXPAND_TIME	format.c	108;"	d	file:
FORMAT_FORCE	tmux.h	1934;"	d
FORMAT_LENGTH	format.c	100;"	d	file:
FORMAT_LITERAL	format.c	93;"	d	file:
FORMAT_LOOP_LIMIT	format.c	105;"	d	file:
FORMAT_NOJOBS	tmux.h	1935;"	d
FORMAT_NONE	tmux.h	1937;"	d
FORMAT_PANE	tmux.h	1938;"	d
FORMAT_PANES	format.c	98;"	d	file:
FORMAT_PRETTY	format.c	99;"	d	file:
FORMAT_QUOTE	format.c	92;"	d	file:
FORMAT_SESSIONS	format.c	96;"	d	file:
FORMAT_STATUS	tmux.h	1933;"	d
FORMAT_TIMESTRING	format.c	89;"	d	file:
FORMAT_VERBOSE	tmux.h	1936;"	d
FORMAT_WIDTH	format.c	101;"	d	file:
FORMAT_WINDOW	tmux.h	1939;"	d
FORMAT_WINDOWS	format.c	97;"	d	file:
FUZZER_MAXLEN	fuzz/input-fuzzer.c	22;"	d	file:
GRID_ATTR_ALL_UNDERSCORE	tmux.h	650;"	d
GRID_ATTR_BLINK	tmux.h	637;"	d
GRID_ATTR_BRIGHT	tmux.h	634;"	d
GRID_ATTR_CHARSET	tmux.h	641;"	d
GRID_ATTR_DIM	tmux.h	635;"	d
GRID_ATTR_HIDDEN	tmux.h	639;"	d
GRID_ATTR_ITALICS	tmux.h	640;"	d
GRID_ATTR_OVERLINE	tmux.h	647;"	d
GRID_ATTR_REVERSE	tmux.h	638;"	d
GRID_ATTR_STRIKETHROUGH	tmux.h	642;"	d
GRID_ATTR_UNDERSCORE	tmux.h	636;"	d
GRID_ATTR_UNDERSCORE_2	tmux.h	643;"	d
GRID_ATTR_UNDERSCORE_3	tmux.h	644;"	d
GRID_ATTR_UNDERSCORE_4	tmux.h	645;"	d
GRID_ATTR_UNDERSCORE_5	tmux.h	646;"	d
GRID_FLAG_BG256	tmux.h	659;"	d
GRID_FLAG_CLEARED	tmux.h	664;"	d
GRID_FLAG_EXTENDED	tmux.h	661;"	d
GRID_FLAG_FG256	tmux.h	658;"	d
GRID_FLAG_NOPALETTE	tmux.h	663;"	d
GRID_FLAG_PADDING	tmux.h	660;"	d
GRID_FLAG_SELECTED	tmux.h	662;"	d
GRID_HISTORY	tmux.h	720;"	d
GRID_LINE_DEAD	tmux.h	669;"	d
GRID_LINE_EXTENDED	tmux.h	668;"	d
GRID_LINE_WRAPPED	tmux.h	667;"	d
HOST_NAME_MAX	compat.h	269;"	d
IBUF_READ_SIZE	compat/imsg.h	26;"	d
IMAXBEL	compat.h	134;"	d
IMSGF_HASFD	compat/imsg.h	65;"	d
IMSG_HEADER_SIZE	compat/imsg.h	27;"	d
INFTIM	compat.h	222;"	d
INPUT_BUF_LIMIT	input.c	95;"	d	file:
INPUT_BUF_START	input.c	94;"	d	file:
INPUT_CSI_CBT	input.c	/^	INPUT_CSI_CBT,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_CNL	input.c	/^	INPUT_CSI_CNL,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_CPL	input.c	/^	INPUT_CSI_CPL,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_CUB	input.c	/^	INPUT_CSI_CUB,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_CUD	input.c	/^	INPUT_CSI_CUD,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_CUF	input.c	/^	INPUT_CSI_CUF,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_CUP	input.c	/^	INPUT_CSI_CUP,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_CUU	input.c	/^	INPUT_CSI_CUU,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_DA	input.c	/^	INPUT_CSI_DA,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_DA_TWO	input.c	/^	INPUT_CSI_DA_TWO,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_DCH	input.c	/^	INPUT_CSI_DCH,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_DECSCUSR	input.c	/^	INPUT_CSI_DECSCUSR,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_DECSTBM	input.c	/^	INPUT_CSI_DECSTBM,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_DL	input.c	/^	INPUT_CSI_DL,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_DSR	input.c	/^	INPUT_CSI_DSR,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_ECH	input.c	/^	INPUT_CSI_ECH,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_ED	input.c	/^	INPUT_CSI_ED,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_EL	input.c	/^	INPUT_CSI_EL,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_HPA	input.c	/^	INPUT_CSI_HPA,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_ICH	input.c	/^	INPUT_CSI_ICH,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_IL	input.c	/^	INPUT_CSI_IL,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_MODOFF	input.c	/^	INPUT_CSI_MODOFF,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_MODSET	input.c	/^	INPUT_CSI_MODSET,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_RCP	input.c	/^	INPUT_CSI_RCP,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_REP	input.c	/^	INPUT_CSI_REP,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_RM	input.c	/^	INPUT_CSI_RM,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_RM_PRIVATE	input.c	/^	INPUT_CSI_RM_PRIVATE,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_SCP	input.c	/^	INPUT_CSI_SCP,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_SD	input.c	/^	INPUT_CSI_SD,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_SGR	input.c	/^	INPUT_CSI_SGR,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_SM	input.c	/^	INPUT_CSI_SM,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_SM_PRIVATE	input.c	/^	INPUT_CSI_SM_PRIVATE,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_SU	input.c	/^	INPUT_CSI_SU,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_TBC	input.c	/^	INPUT_CSI_TBC,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_VPA	input.c	/^	INPUT_CSI_VPA,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_WINOPS	input.c	/^	INPUT_CSI_WINOPS,$/;"	e	enum:input_csi_type	file:
INPUT_CSI_XDA	input.c	/^	INPUT_CSI_XDA,$/;"	e	enum:input_csi_type	file:
INPUT_DISCARD	input.c	114;"	d	file:
INPUT_END_BEL	input.c	/^		INPUT_END_BEL$/;"	e	enum:input_ctx::__anon4	file:
INPUT_END_ST	input.c	/^		INPUT_END_ST,$/;"	e	enum:input_ctx::__anon4	file:
INPUT_ESC_DECALN	input.c	/^	INPUT_ESC_DECALN,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_DECKPAM	input.c	/^	INPUT_ESC_DECKPAM,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_DECKPNM	input.c	/^	INPUT_ESC_DECKPNM,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_DECRC	input.c	/^	INPUT_ESC_DECRC,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_DECSC	input.c	/^	INPUT_ESC_DECSC,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_HTS	input.c	/^	INPUT_ESC_HTS,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_IND	input.c	/^	INPUT_ESC_IND,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_NEL	input.c	/^	INPUT_ESC_NEL,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_RI	input.c	/^	INPUT_ESC_RI,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_RIS	input.c	/^	INPUT_ESC_RIS,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_SCSG0_OFF	input.c	/^	INPUT_ESC_SCSG0_OFF,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_SCSG0_ON	input.c	/^	INPUT_ESC_SCSG0_ON,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_SCSG1_OFF	input.c	/^	INPUT_ESC_SCSG1_OFF,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_SCSG1_ON	input.c	/^	INPUT_ESC_SCSG1_ON,$/;"	e	enum:input_esc_type	file:
INPUT_ESC_ST	input.c	/^	INPUT_ESC_ST,$/;"	e	enum:input_esc_type	file:
INPUT_MISSING	input.c	/^		INPUT_MISSING,$/;"	e	enum:input_param::__anon2	file:
INPUT_NUMBER	input.c	/^		INPUT_NUMBER,$/;"	e	enum:input_param::__anon2	file:
INPUT_STATE_ANYWHERE	input.c	323;"	d	file:
INPUT_STRING	input.c	/^		INPUT_STRING$/;"	e	enum:input_param::__anon2	file:
INVALID	compat/strtonum.c	26;"	d	file:
IOV_MAX	compat/imsg-buffer.c	30;"	d	file:
JOB_CLOSED	job.c	/^		JOB_CLOSED$/;"	e	enum:job::__anon5	file:
JOB_DEAD	job.c	/^		JOB_DEAD,$/;"	e	enum:job::__anon5	file:
JOB_KEEPWRITE	tmux.h	2063;"	d
JOB_NOWAIT	tmux.h	2062;"	d
JOB_PTY	tmux.h	2064;"	d
JOB_RUNNING	job.c	/^		JOB_RUNNING,$/;"	e	enum:job::__anon5	file:
KEYC_ANY	tmux.h	/^	KEYC_ANY,$/;"	e	enum:__anon10
KEYC_BASE	tmux.h	117;"	d
KEYC_BSPACE	tmux.h	/^	KEYC_BSPACE,$/;"	e	enum:__anon10
KEYC_BTAB	tmux.h	/^	KEYC_BTAB,$/;"	e	enum:__anon10
KEYC_BUILD_MODIFIERS	tmux.h	130;"	d
KEYC_CLICK_TIMEOUT	tmux.h	145;"	d
KEYC_CTRL	tmux.h	122;"	d
KEYC_CURSOR	tmux.h	128;"	d
KEYC_DC	tmux.h	/^	KEYC_DC,$/;"	e	enum:__anon10
KEYC_DOUBLECLICK	tmux.h	/^	KEYC_DOUBLECLICK, \/* double click complete *\/$/;"	e	enum:__anon10
KEYC_DOWN	tmux.h	/^	KEYC_DOWN,$/;"	e	enum:__anon10
KEYC_DRAGGING	tmux.h	/^	KEYC_DRAGGING, \/* dragging in progress *\/$/;"	e	enum:__anon10
KEYC_END	tmux.h	/^	KEYC_END,$/;"	e	enum:__anon10
KEYC_F1	tmux.h	/^	KEYC_F1,$/;"	e	enum:__anon10
KEYC_F10	tmux.h	/^	KEYC_F10,$/;"	e	enum:__anon10
KEYC_F11	tmux.h	/^	KEYC_F11,$/;"	e	enum:__anon10
KEYC_F12	tmux.h	/^	KEYC_F12,$/;"	e	enum:__anon10
KEYC_F2	tmux.h	/^	KEYC_F2,$/;"	e	enum:__anon10
KEYC_F3	tmux.h	/^	KEYC_F3,$/;"	e	enum:__anon10
KEYC_F4	tmux.h	/^	KEYC_F4,$/;"	e	enum:__anon10
KEYC_F5	tmux.h	/^	KEYC_F5,$/;"	e	enum:__anon10
KEYC_F6	tmux.h	/^	KEYC_F6,$/;"	e	enum:__anon10
KEYC_F7	tmux.h	/^	KEYC_F7,$/;"	e	enum:__anon10
KEYC_F8	tmux.h	/^	KEYC_F8,$/;"	e	enum:__anon10
KEYC_F9	tmux.h	/^	KEYC_F9,$/;"	e	enum:__anon10
KEYC_FOCUS_IN	tmux.h	/^	KEYC_FOCUS_IN = KEYC_BASE,$/;"	e	enum:__anon10
KEYC_FOCUS_OUT	tmux.h	/^	KEYC_FOCUS_OUT,$/;"	e	enum:__anon10
KEYC_HOME	tmux.h	/^	KEYC_HOME,$/;"	e	enum:__anon10
KEYC_IC	tmux.h	/^	KEYC_IC,$/;"	e	enum:__anon10
KEYC_IMPLIED_META	tmux.h	129;"	d
KEYC_IS_MOUSE	tmux.h	141;"	d
KEYC_KEYPAD	tmux.h	127;"	d
KEYC_KP_EIGHT	tmux.h	/^	KEYC_KP_EIGHT,$/;"	e	enum:__anon10
KEYC_KP_ENTER	tmux.h	/^	KEYC_KP_ENTER,$/;"	e	enum:__anon10
KEYC_KP_FIVE	tmux.h	/^	KEYC_KP_FIVE,$/;"	e	enum:__anon10
KEYC_KP_FOUR	tmux.h	/^	KEYC_KP_FOUR,$/;"	e	enum:__anon10
KEYC_KP_MINUS	tmux.h	/^	KEYC_KP_MINUS,$/;"	e	enum:__anon10
KEYC_KP_NINE	tmux.h	/^	KEYC_KP_NINE,$/;"	e	enum:__anon10
KEYC_KP_ONE	tmux.h	/^	KEYC_KP_ONE,$/;"	e	enum:__anon10
KEYC_KP_PERIOD	tmux.h	/^	KEYC_KP_PERIOD,$/;"	e	enum:__anon10
KEYC_KP_PLUS	tmux.h	/^	KEYC_KP_PLUS,$/;"	e	enum:__anon10
KEYC_KP_SEVEN	tmux.h	/^	KEYC_KP_SEVEN,$/;"	e	enum:__anon10
KEYC_KP_SIX	tmux.h	/^	KEYC_KP_SIX,$/;"	e	enum:__anon10
KEYC_KP_SLASH	tmux.h	/^	KEYC_KP_SLASH,$/;"	e	enum:__anon10
KEYC_KP_STAR	tmux.h	/^	KEYC_KP_STAR,$/;"	e	enum:__anon10
KEYC_KP_THREE	tmux.h	/^	KEYC_KP_THREE,$/;"	e	enum:__anon10
KEYC_KP_TWO	tmux.h	/^	KEYC_KP_TWO,$/;"	e	enum:__anon10
KEYC_KP_ZERO	tmux.h	/^	KEYC_KP_ZERO,$/;"	e	enum:__anon10
KEYC_LEFT	tmux.h	/^	KEYC_LEFT,$/;"	e	enum:__anon10
KEYC_LITERAL	tmux.h	126;"	d
KEYC_MASK_FLAGS	tmux.h	134;"	d
KEYC_MASK_KEY	tmux.h	135;"	d
KEYC_MASK_MODIFIERS	tmux.h	133;"	d
KEYC_META	tmux.h	121;"	d
KEYC_MOUSE	tmux.h	/^	KEYC_MOUSE, \/* unclassified mouse event *\/$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(DOUBLECLICK1),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(DOUBLECLICK2),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(DOUBLECLICK3),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEDOWN1),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEDOWN2),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEDOWN3),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEDRAG1),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEDRAG2),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEDRAG3),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEDRAGEND1),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEDRAGEND2),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEDRAGEND3),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEMOVE),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEUP1),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEUP2),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(MOUSEUP3),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(SECONDCLICK1),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(SECONDCLICK2),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(SECONDCLICK3),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(TRIPLECLICK1),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(TRIPLECLICK2),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(TRIPLECLICK3),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(WHEELDOWN),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	/^	KEYC_MOUSE_KEY(WHEELUP),$/;"	e	enum:__anon10
KEYC_MOUSE_KEY	tmux.h	148;"	d
KEYC_MOUSE_STRING	tmux.h	155;"	d
KEYC_NONE	tmux.h	115;"	d
KEYC_NPAGE	tmux.h	/^	KEYC_NPAGE,$/;"	e	enum:__anon10
KEYC_NUSER	tmux.h	138;"	d
KEYC_PASTE_END	tmux.h	/^	KEYC_PASTE_END,$/;"	e	enum:__anon10
KEYC_PASTE_START	tmux.h	/^	KEYC_PASTE_START,$/;"	e	enum:__anon10
KEYC_PPAGE	tmux.h	/^	KEYC_PPAGE,$/;"	e	enum:__anon10
KEYC_RIGHT	tmux.h	/^	KEYC_RIGHT,$/;"	e	enum:__anon10
KEYC_SHIFT	tmux.h	123;"	d
KEYC_UNKNOWN	tmux.h	116;"	d
KEYC_UP	tmux.h	/^	KEYC_UP,$/;"	e	enum:__anon10
KEYC_USER	tmux.h	118;"	d
KEY_BINDING_REPEAT	tmux.h	1748;"	d
LAYOUT_LEFTRIGHT	tmux.h	/^	LAYOUT_LEFTRIGHT,$/;"	e	enum:layout_type
LAYOUT_TOPBOTTOM	tmux.h	/^	LAYOUT_TOPBOTTOM,$/;"	e	enum:layout_type
LAYOUT_WINDOWPANE	tmux.h	/^	LAYOUT_WINDOWPANE$/;"	e	enum:layout_type
LINE_SEL_LEFT_RIGHT	window-copy.c	/^		LINE_SEL_LEFT_RIGHT,$/;"	e	enum:window_copy_mode_data::__anon20	file:
LINE_SEL_NONE	window-copy.c	/^		LINE_SEL_NONE,$/;"	e	enum:window_copy_mode_data::__anon20	file:
LINE_SEL_RIGHT_LEFT	window-copy.c	/^		LINE_SEL_RIGHT_LEFT,$/;"	e	enum:window_copy_mode_data::__anon20	file:
LIST_BUFFERS_TEMPLATE	cmd-list-buffers.c	30;"	d	file:
LIST_CLIENTS_TEMPLATE	cmd-list-clients.c	31;"	d	file:
LIST_EMPTY	compat/queue.h	183;"	d
LIST_END	compat/queue.h	182;"	d
LIST_ENTRY	compat/queue.h	172;"	d
LIST_FIRST	compat/queue.h	181;"	d
LIST_FOREACH	compat/queue.h	186;"	d
LIST_FOREACH_SAFE	compat/queue.h	191;"	d
LIST_HEAD	compat/queue.h	164;"	d
LIST_HEAD_INITIALIZER	compat/queue.h	169;"	d
LIST_INIT	compat/queue.h	199;"	d
LIST_INSERT_AFTER	compat/queue.h	203;"	d
LIST_INSERT_BEFORE	compat/queue.h	211;"	d
LIST_INSERT_HEAD	compat/queue.h	218;"	d
LIST_NEXT	compat/queue.h	184;"	d
LIST_REMOVE	compat/queue.h	225;"	d
LIST_REPLACE	compat/queue.h	234;"	d
LIST_SESSIONS_TEMPLATE	cmd-list-sessions.c	31;"	d	file:
LIST_WINDOWS_TEMPLATE	cmd-list-windows.c	30;"	d	file:
LIST_WINDOWS_WITH_SESSION_TEMPLATE	cmd-list-windows.c	36;"	d	file:
LLVMFuzzerInitialize	fuzz/input-fuzzer.c	/^LLVMFuzzerInitialize(__unused int *argc, __unused char ***argv)$/;"	f
LLVMFuzzerTestOneInput	fuzz/input-fuzzer.c	/^LLVMFuzzerTestOneInput(const unsigned char *data, size_t size)$/;"	f
MAX_IMSGSIZE	compat/imsg.h	28;"	d
MENU_NOMOUSE	tmux.h	2979;"	d
MENU_STAYOPEN	tmux.h	2981;"	d
MENU_TAB	tmux.h	2980;"	d
MODEKEY_EMACS	tmux.h	578;"	d
MODEKEY_VI	tmux.h	579;"	d
MODE_BLINKING	tmux.h	589;"	d
MODE_BRACKETPASTE	tmux.h	592;"	d
MODE_CRLF	tmux.h	596;"	d
MODE_CURSOR	tmux.h	582;"	d
MODE_FOCUSON	tmux.h	593;"	d
MODE_INSERT	tmux.h	583;"	d
MODE_KCURSOR	tmux.h	584;"	d
MODE_KEXTENDED	tmux.h	597;"	d
MODE_KKEYPAD	tmux.h	585;"	d
MODE_MOUSE_ALL	tmux.h	594;"	d
MODE_MOUSE_BUTTON	tmux.h	588;"	d
MODE_MOUSE_SGR	tmux.h	591;"	d
MODE_MOUSE_STANDARD	tmux.h	587;"	d
MODE_MOUSE_UTF8	tmux.h	590;"	d
MODE_ORIGIN	tmux.h	595;"	d
MODE_WRAP	tmux.h	586;"	d
MOTION_MOUSE_MODES	tmux.h	601;"	d
MOUSE_BUTTONS	tmux.h	1203;"	d
MOUSE_DRAG	tmux.h	1205;"	d
MOUSE_MASK_BUTTONS	tmux.h	1191;"	d
MOUSE_MASK_CTRL	tmux.h	1194;"	d
MOUSE_MASK_DRAG	tmux.h	1195;"	d
MOUSE_MASK_META	tmux.h	1193;"	d
MOUSE_MASK_SHIFT	tmux.h	1192;"	d
MOUSE_MASK_WHEEL	tmux.h	1196;"	d
MOUSE_RELEASE	tmux.h	1206;"	d
MOUSE_WHEEL	tmux.h	1204;"	d
MOUSE_WHEEL_DOWN	tmux.h	1200;"	d
MOUSE_WHEEL_UP	tmux.h	1199;"	d
MOVE	popup.c	/^	enum { OFF, MOVE, SIZE }  dragging;$/;"	e	enum:popup_data::__anon8	file:
MSG_COMMAND	tmux.h	/^	MSG_COMMAND = 200,$/;"	e	enum:msgtype
MSG_DETACH	tmux.h	/^	MSG_DETACH,$/;"	e	enum:msgtype
MSG_DETACHKILL	tmux.h	/^	MSG_DETACHKILL,$/;"	e	enum:msgtype
MSG_EXEC	tmux.h	/^	MSG_EXEC,$/;"	e	enum:msgtype
MSG_EXIT	tmux.h	/^	MSG_EXIT,$/;"	e	enum:msgtype
MSG_EXITED	tmux.h	/^	MSG_EXITED,$/;"	e	enum:msgtype
MSG_EXITING	tmux.h	/^	MSG_EXITING,$/;"	e	enum:msgtype
MSG_FLAGS	tmux.h	/^	MSG_FLAGS,$/;"	e	enum:msgtype
MSG_IDENTIFY_CLIENTPID	tmux.h	/^	MSG_IDENTIFY_CLIENTPID,$/;"	e	enum:msgtype
MSG_IDENTIFY_CWD	tmux.h	/^	MSG_IDENTIFY_CWD,$/;"	e	enum:msgtype
MSG_IDENTIFY_DONE	tmux.h	/^	MSG_IDENTIFY_DONE,$/;"	e	enum:msgtype
MSG_IDENTIFY_ENVIRON	tmux.h	/^	MSG_IDENTIFY_ENVIRON,$/;"	e	enum:msgtype
MSG_IDENTIFY_FEATURES	tmux.h	/^	MSG_IDENTIFY_FEATURES,$/;"	e	enum:msgtype
MSG_IDENTIFY_FLAGS	tmux.h	/^	MSG_IDENTIFY_FLAGS = 100,$/;"	e	enum:msgtype
MSG_IDENTIFY_LONGFLAGS	tmux.h	/^	MSG_IDENTIFY_LONGFLAGS,$/;"	e	enum:msgtype
MSG_IDENTIFY_OLDCWD	tmux.h	/^	MSG_IDENTIFY_OLDCWD, \/* unused *\/$/;"	e	enum:msgtype
MSG_IDENTIFY_STDIN	tmux.h	/^	MSG_IDENTIFY_STDIN,$/;"	e	enum:msgtype
MSG_IDENTIFY_STDOUT	tmux.h	/^	MSG_IDENTIFY_STDOUT,$/;"	e	enum:msgtype
MSG_IDENTIFY_TERM	tmux.h	/^	MSG_IDENTIFY_TERM,$/;"	e	enum:msgtype
MSG_IDENTIFY_TTYNAME	tmux.h	/^	MSG_IDENTIFY_TTYNAME,$/;"	e	enum:msgtype
MSG_LOCK	tmux.h	/^	MSG_LOCK,$/;"	e	enum:msgtype
MSG_OLDSTDERR	tmux.h	/^	MSG_OLDSTDERR, \/* unused *\/$/;"	e	enum:msgtype
MSG_OLDSTDIN	tmux.h	/^	MSG_OLDSTDIN, \/* unused *\/$/;"	e	enum:msgtype
MSG_OLDSTDOUT	tmux.h	/^	MSG_OLDSTDOUT, \/* unused *\/$/;"	e	enum:msgtype
MSG_READ	tmux.h	/^	MSG_READ,$/;"	e	enum:msgtype
MSG_READY	tmux.h	/^	MSG_READY,$/;"	e	enum:msgtype
MSG_READ_DONE	tmux.h	/^	MSG_READ_DONE,$/;"	e	enum:msgtype
MSG_READ_OPEN	tmux.h	/^	MSG_READ_OPEN = 300,$/;"	e	enum:msgtype
MSG_RESIZE	tmux.h	/^	MSG_RESIZE,$/;"	e	enum:msgtype
MSG_SHELL	tmux.h	/^	MSG_SHELL,$/;"	e	enum:msgtype
MSG_SHUTDOWN	tmux.h	/^	MSG_SHUTDOWN,$/;"	e	enum:msgtype
MSG_SUSPEND	tmux.h	/^	MSG_SUSPEND,$/;"	e	enum:msgtype
MSG_UNLOCK	tmux.h	/^	MSG_UNLOCK,$/;"	e	enum:msgtype
MSG_VERSION	tmux.h	/^	MSG_VERSION = 12,$/;"	e	enum:msgtype
MSG_WAKEUP	tmux.h	/^	MSG_WAKEUP,$/;"	e	enum:msgtype
MSG_WRITE	tmux.h	/^	MSG_WRITE,$/;"	e	enum:msgtype
MSG_WRITE_CLOSE	tmux.h	/^	MSG_WRITE_CLOSE$/;"	e	enum:msgtype
MSG_WRITE_OPEN	tmux.h	/^	MSG_WRITE_OPEN,$/;"	e	enum:msgtype
MSG_WRITE_READY	tmux.h	/^	MSG_WRITE_READY,$/;"	e	enum:msgtype
MUL_NO_OVERFLOW	compat/reallocarray.c	29;"	d	file:
MUL_NO_OVERFLOW	compat/recallocarray.c	29;"	d	file:
NAME_INTERVAL	tmux.h	89;"	d
NAMLEN	compat/closefrom.c	30;"	d	file:
NAMLEN	compat/closefrom.c	33;"	d	file:
NEW_SESSION_TEMPLATE	cmd-new-session.c	34;"	d	file:
NEW_WINDOW_TEMPLATE	cmd-new-window.c	33;"	d	file:
OFF	popup.c	/^	enum { OFF, MOVE, SIZE }  dragging;$/;"	e	enum:popup_data::__anon8	file:
OPEN_MAX	compat/closefrom.c	51;"	d	file:
OPTIONS_IS_ARRAY	options.c	85;"	d	file:
OPTIONS_IS_COMMAND	options.c	81;"	d	file:
OPTIONS_IS_NUMBER	options.c	74;"	d	file:
OPTIONS_IS_STRING	options.c	71;"	d	file:
OPTIONS_TABLE_CHOICE	tmux.h	/^	OPTIONS_TABLE_CHOICE,$/;"	e	enum:options_table_type
OPTIONS_TABLE_COLOUR	tmux.h	/^	OPTIONS_TABLE_COLOUR,$/;"	e	enum:options_table_type
OPTIONS_TABLE_COMMAND	tmux.h	/^	OPTIONS_TABLE_COMMAND$/;"	e	enum:options_table_type
OPTIONS_TABLE_FLAG	tmux.h	/^	OPTIONS_TABLE_FLAG,$/;"	e	enum:options_table_type
OPTIONS_TABLE_HOOK	options-table.c	146;"	d	file:
OPTIONS_TABLE_IS_ARRAY	tmux.h	1792;"	d
OPTIONS_TABLE_IS_HOOK	tmux.h	1793;"	d
OPTIONS_TABLE_IS_STYLE	tmux.h	1794;"	d
OPTIONS_TABLE_KEY	tmux.h	/^	OPTIONS_TABLE_KEY,$/;"	e	enum:options_table_type
OPTIONS_TABLE_NONE	tmux.h	1786;"	d
OPTIONS_TABLE_NUMBER	tmux.h	/^	OPTIONS_TABLE_NUMBER,$/;"	e	enum:options_table_type
OPTIONS_TABLE_PANE	tmux.h	1790;"	d
OPTIONS_TABLE_PANE_HOOK	options-table.c	155;"	d	file:
OPTIONS_TABLE_SERVER	tmux.h	1787;"	d
OPTIONS_TABLE_SESSION	tmux.h	1788;"	d
OPTIONS_TABLE_STATUS_FORMAT1	options-table.c	73;"	d	file:
OPTIONS_TABLE_STATUS_FORMAT2	options-table.c	138;"	d	file:
OPTIONS_TABLE_STRING	tmux.h	/^	OPTIONS_TABLE_STRING,$/;"	e	enum:options_table_type
OPTIONS_TABLE_WINDOW	tmux.h	1789;"	d
OPTIONS_TABLE_WINDOW_HOOK	options-table.c	164;"	d	file:
O_DIRECTORY	compat.h	210;"	d
PANE_CHANGED	tmux.h	953;"	d
PANE_DROP	tmux.h	947;"	d
PANE_EMPTY	tmux.h	957;"	d
PANE_EXITED	tmux.h	954;"	d
PANE_FOCUSED	tmux.h	948;"	d
PANE_FOCUSPUSH	tmux.h	951;"	d
PANE_HEIGHT	fuzz/input-fuzzer.c	24;"	d	file:
PANE_INPUTOFF	tmux.h	952;"	d
PANE_LINES_DOUBLE	tmux.h	1098;"	d
PANE_LINES_HEAVY	tmux.h	1099;"	d
PANE_LINES_NUMBER	tmux.h	1101;"	d
PANE_LINES_SIMPLE	tmux.h	1100;"	d
PANE_LINES_SINGLE	tmux.h	1097;"	d
PANE_MINIMUM	tmux.h	82;"	d
PANE_REDRAW	tmux.h	946;"	d
PANE_RESIZE	tmux.h	949;"	d
PANE_RESIZEFORCE	tmux.h	950;"	d
PANE_RESIZENOW	tmux.h	959;"	d
PANE_STATUSDRAWN	tmux.h	956;"	d
PANE_STATUSREADY	tmux.h	955;"	d
PANE_STATUS_BOTTOM	tmux.h	1094;"	d
PANE_STATUS_OFF	tmux.h	1092;"	d
PANE_STATUS_TOP	tmux.h	1093;"	d
PANE_STYLECHANGED	tmux.h	958;"	d
PANE_WIDTH	fuzz/input-fuzzer.c	23;"	d	file:
PEER_BAD	proc.c	59;"	d	file:
POPUP_CLOSEEXIT	tmux.h	2996;"	d
POPUP_CLOSEEXITZERO	tmux.h	2997;"	d
POPUP_WRITEKEYS	tmux.h	2995;"	d
PROMPT_COMMAND	tmux.h	/^	enum { PROMPT_ENTRY, PROMPT_COMMAND } prompt_mode;$/;"	e	enum:client::__anon15
PROMPT_ENTRY	tmux.h	/^	enum { PROMPT_ENTRY, PROMPT_COMMAND } prompt_mode;$/;"	e	enum:client::__anon15
PROMPT_HISTORY	status.c	53;"	d	file:
PROMPT_INCREMENTAL	tmux.h	1702;"	d
PROMPT_KEY	tmux.h	1704;"	d
PROMPT_NOFORMAT	tmux.h	1703;"	d
PROMPT_NUMERIC	tmux.h	1701;"	d
PROMPT_SINGLE	tmux.h	1700;"	d
PROMPT_TARGET	tmux.h	1706;"	d
PROMPT_WINDOW	tmux.h	1705;"	d
PROTOCOL_VERSION	tmux.h	71;"	d
Pad64	compat/base64.c	/^static const char Pad64 = '=';$/;"	v	file:
RB_AUGMENT	compat/tree.h	332;"	d
RB_BLACK	compat/tree.h	303;"	d
RB_COLOR	compat/tree.h	316;"	d
RB_EMPTY	compat/tree.h	318;"	d
RB_ENTRY	compat/tree.h	305;"	d
RB_FIND	compat/tree.h	721;"	d
RB_FOREACH	compat/tree.h	728;"	d
RB_FOREACH_REVERSE	compat/tree.h	738;"	d
RB_FOREACH_REVERSE_SAFE	compat/tree.h	743;"	d
RB_FOREACH_SAFE	compat/tree.h	733;"	d
RB_GENERATE	compat/tree.h	395;"	d
RB_GENERATE_INTERNAL	compat/tree.h	399;"	d
RB_GENERATE_STATIC	compat/tree.h	397;"	d
RB_HEAD	compat/tree.h	291;"	d
RB_INF	compat/tree.h	717;"	d
RB_INIT	compat/tree.h	299;"	d
RB_INITIALIZER	compat/tree.h	296;"	d
RB_INSERT	compat/tree.h	719;"	d
RB_LEFT	compat/tree.h	313;"	d
RB_MAX	compat/tree.h	726;"	d
RB_MIN	compat/tree.h	725;"	d
RB_NEGINF	compat/tree.h	716;"	d
RB_NEXT	compat/tree.h	723;"	d
RB_NFIND	compat/tree.h	722;"	d
RB_PARENT	compat/tree.h	315;"	d
RB_PREV	compat/tree.h	724;"	d
RB_PROTOTYPE	compat/tree.h	376;"	d
RB_PROTOTYPE_INTERNAL	compat/tree.h	380;"	d
RB_PROTOTYPE_STATIC	compat/tree.h	378;"	d
RB_RED	compat/tree.h	304;"	d
RB_REMOVE	compat/tree.h	720;"	d
RB_RIGHT	compat/tree.h	314;"	d
RB_ROOT	compat/tree.h	317;"	d
RB_ROTATE_LEFT	compat/tree.h	335;"	d
RB_ROTATE_RIGHT	compat/tree.h	355;"	d
RB_SET	compat/tree.h	320;"	d
RB_SET_BLACKRED	compat/tree.h	326;"	d
SCREEN_REDRAW_BORDER	screen-redraw.c	/^	SCREEN_REDRAW_BORDER$/;"	e	enum:screen_redraw_border_type	file:
SCREEN_REDRAW_INSIDE	screen-redraw.c	/^	SCREEN_REDRAW_INSIDE,$/;"	e	enum:screen_redraw_border_type	file:
SCREEN_REDRAW_OUTSIDE	screen-redraw.c	/^	SCREEN_REDRAW_OUTSIDE,$/;"	e	enum:screen_redraw_border_type	file:
SCREEN_WRITE_SYNC	tmux.h	830;"	d
SEL_CHAR	window-copy.c	/^		SEL_CHAR,		\/* select one char at a time *\/$/;"	e	enum:window_copy_mode_data::__anon21	file:
SEL_LINE	window-copy.c	/^		SEL_LINE,		\/* select one line at a time *\/$/;"	e	enum:window_copy_mode_data::__anon21	file:
SEL_WORD	window-copy.c	/^		SEL_WORD,		\/* select one word at a time *\/$/;"	e	enum:window_copy_mode_data::__anon21	file:
SESSION_ALERTED	tmux.h	1174;"	d
SESSION_PASTING	tmux.h	1173;"	d
SHOW_MESSAGES_TEMPLATE	cmd-show-messages.c	31;"	d	file:
SIMPLEQ_CONCAT	compat/queue.h	316;"	d
SIMPLEQ_EMPTY	compat/queue.h	266;"	d
SIMPLEQ_END	compat/queue.h	265;"	d
SIMPLEQ_ENTRY	compat/queue.h	256;"	d
SIMPLEQ_FIRST	compat/queue.h	264;"	d
SIMPLEQ_FOREACH	compat/queue.h	269;"	d
SIMPLEQ_FOREACH_SAFE	compat/queue.h	274;"	d
SIMPLEQ_HEAD	compat/queue.h	247;"	d
SIMPLEQ_HEAD_INITIALIZER	compat/queue.h	253;"	d
SIMPLEQ_INIT	compat/queue.h	282;"	d
SIMPLEQ_INSERT_AFTER	compat/queue.h	299;"	d
SIMPLEQ_INSERT_HEAD	compat/queue.h	287;"	d
SIMPLEQ_INSERT_TAIL	compat/queue.h	293;"	d
SIMPLEQ_NEXT	compat/queue.h	267;"	d
SIMPLEQ_REMOVE_AFTER	compat/queue.h	310;"	d
SIMPLEQ_REMOVE_HEAD	compat/queue.h	305;"	d
SIZE	popup.c	/^	enum { OFF, MOVE, SIZE }  dragging;$/;"	e	enum:popup_data::__anon8	file:
SLIST_EMPTY	compat/queue.h	109;"	d
SLIST_END	compat/queue.h	108;"	d
SLIST_ENTRY	compat/queue.h	99;"	d
SLIST_FIRST	compat/queue.h	107;"	d
SLIST_FOREACH	compat/queue.h	112;"	d
SLIST_FOREACH_SAFE	compat/queue.h	117;"	d
SLIST_HEAD	compat/queue.h	91;"	d
SLIST_HEAD_INITIALIZER	compat/queue.h	96;"	d
SLIST_INIT	compat/queue.h	125;"	d
SLIST_INSERT_AFTER	compat/queue.h	129;"	d
SLIST_INSERT_HEAD	compat/queue.h	134;"	d
SLIST_NEXT	compat/queue.h	110;"	d
SLIST_REMOVE	compat/queue.h	147;"	d
SLIST_REMOVE_AFTER	compat/queue.h	139;"	d
SLIST_REMOVE_HEAD	compat/queue.h	143;"	d
SPAWN_BEFORE	tmux.h	1857;"	d
SPAWN_DETACHED	tmux.h	1855;"	d
SPAWN_EMPTY	tmux.h	1860;"	d
SPAWN_FULLSIZE	tmux.h	1859;"	d
SPAWN_KILL	tmux.h	1854;"	d
SPAWN_NONOTIFY	tmux.h	1858;"	d
SPAWN_RESPAWN	tmux.h	1856;"	d
SPLAY_ASSEMBLE	compat/tree.h	105;"	d
SPLAY_EMPTY	compat/tree.h	78;"	d
SPLAY_ENTRY	compat/tree.h	69;"	d
SPLAY_FIND	compat/tree.h	278;"	d
SPLAY_FOREACH	compat/tree.h	285;"	d
SPLAY_GENERATE	compat/tree.h	156;"	d
SPLAY_HEAD	compat/tree.h	57;"	d
SPLAY_INF	compat/tree.h	274;"	d
SPLAY_INIT	compat/tree.h	65;"	d
SPLAY_INITIALIZER	compat/tree.h	62;"	d
SPLAY_INSERT	compat/tree.h	276;"	d
SPLAY_LEFT	compat/tree.h	75;"	d
SPLAY_LINKLEFT	compat/tree.h	93;"	d
SPLAY_LINKRIGHT	compat/tree.h	99;"	d
SPLAY_MAX	compat/tree.h	282;"	d
SPLAY_MIN	compat/tree.h	280;"	d
SPLAY_NEGINF	compat/tree.h	273;"	d
SPLAY_NEXT	compat/tree.h	279;"	d
SPLAY_PROTOTYPE	compat/tree.h	114;"	d
SPLAY_REMOVE	compat/tree.h	277;"	d
SPLAY_RIGHT	compat/tree.h	76;"	d
SPLAY_ROOT	compat/tree.h	77;"	d
SPLAY_ROTATE_LEFT	compat/tree.h	87;"	d
SPLAY_ROTATE_RIGHT	compat/tree.h	81;"	d
SPLIT_WINDOW_TEMPLATE	cmd-split-window.c	33;"	d	file:
STATUS_LINES_LIMIT	tmux.h	1523;"	d
STYLE_ALIGN_CENTRE	tmux.h	/^	STYLE_ALIGN_CENTRE,$/;"	e	enum:style_align
STYLE_ALIGN_DEFAULT	tmux.h	/^	STYLE_ALIGN_DEFAULT,$/;"	e	enum:style_align
STYLE_ALIGN_LEFT	tmux.h	/^	STYLE_ALIGN_LEFT,$/;"	e	enum:style_align
STYLE_ALIGN_RIGHT	tmux.h	/^	STYLE_ALIGN_RIGHT$/;"	e	enum:style_align
STYLE_ATTR_MASK	style.c	29;"	d	file:
STYLE_DEFAULT_BASE	tmux.h	/^	STYLE_DEFAULT_BASE,$/;"	e	enum:style_default_type
STYLE_DEFAULT_POP	tmux.h	/^	STYLE_DEFAULT_POP$/;"	e	enum:style_default_type
STYLE_DEFAULT_PUSH	tmux.h	/^	STYLE_DEFAULT_PUSH,$/;"	e	enum:style_default_type
STYLE_LIST_FOCUS	tmux.h	/^	STYLE_LIST_FOCUS,$/;"	e	enum:style_list
STYLE_LIST_LEFT_MARKER	tmux.h	/^	STYLE_LIST_LEFT_MARKER,$/;"	e	enum:style_list
STYLE_LIST_OFF	tmux.h	/^	STYLE_LIST_OFF,$/;"	e	enum:style_list
STYLE_LIST_ON	tmux.h	/^	STYLE_LIST_ON,$/;"	e	enum:style_list
STYLE_LIST_RIGHT_MARKER	tmux.h	/^	STYLE_LIST_RIGHT_MARKER,$/;"	e	enum:style_list
STYLE_RANGE_LEFT	tmux.h	/^	STYLE_RANGE_LEFT,$/;"	e	enum:style_range_type
STYLE_RANGE_NONE	tmux.h	/^	STYLE_RANGE_NONE,$/;"	e	enum:style_range_type
STYLE_RANGE_RIGHT	tmux.h	/^	STYLE_RANGE_RIGHT,$/;"	e	enum:style_range_type
STYLE_RANGE_WINDOW	tmux.h	/^	STYLE_RANGE_WINDOW$/;"	e	enum:style_range_type
SUN_LEN	compat.h	230;"	d
S_CTRL	compat/unvis.c	43;"	d	file:
S_GROUND	compat/unvis.c	39;"	d	file:
S_META	compat/unvis.c	41;"	d	file:
S_META1	compat/unvis.c	42;"	d	file:
S_OCTAL2	compat/unvis.c	44;"	d	file:
S_OCTAL3	compat/unvis.c	45;"	d	file:
S_START	compat/unvis.c	40;"	d	file:
TAILQ_CONCAT	compat/queue.h	524;"	d
TAILQ_EMPTY	compat/queue.h	433;"	d
TAILQ_END	compat/queue.h	426;"	d
TAILQ_ENTRY	compat/queue.h	416;"	d
TAILQ_FIRST	compat/queue.h	425;"	d
TAILQ_FOREACH	compat/queue.h	436;"	d
TAILQ_FOREACH_REVERSE	compat/queue.h	448;"	d
TAILQ_FOREACH_REVERSE_SAFE	compat/queue.h	453;"	d
TAILQ_FOREACH_SAFE	compat/queue.h	441;"	d
TAILQ_HEAD	compat/queue.h	407;"	d
TAILQ_HEAD_INITIALIZER	compat/queue.h	413;"	d
TAILQ_INIT	compat/queue.h	462;"	d
TAILQ_INSERT_AFTER	compat/queue.h	484;"	d
TAILQ_INSERT_BEFORE	compat/queue.h	494;"	d
TAILQ_INSERT_HEAD	compat/queue.h	467;"	d
TAILQ_INSERT_TAIL	compat/queue.h	477;"	d
TAILQ_LAST	compat/queue.h	428;"	d
TAILQ_NEXT	compat/queue.h	427;"	d
TAILQ_PREV	compat/queue.h	431;"	d
TAILQ_REMOVE	compat/queue.h	501;"	d
TAILQ_REPLACE	compat/queue.h	512;"	d
TERM_256COLOURS	tmux.h	1264;"	d
TERM_DECFRA	tmux.h	1267;"	d
TERM_DECSLRM	tmux.h	1266;"	d
TERM_NOAM	tmux.h	1265;"	d
TERM_RGBCOLOURS	tmux.h	1268;"	d
TERM_VT100LIKE	tmux.h	1269;"	d
TEXT	screen-write.c	/^	enum { TEXT, CLEAR_END, CLEAR_START } type;$/;"	e	enum:screen_write_collect_item::__anon9	file:
TMUX_CONF	tmux.h	75;"	d
TMUX_H	tmux.h	20;"	d
TMUX_SOCK	tmux.h	78;"	d
TMUX_SOCKET	compat.h	/^typedef SOCKET TMUX_SOCKET;$/;"	t
TMUX_SOCKET	compat.h	/^typedef int TMUX_SOCKET;$/;"	t
TOOLARGE	compat/strtonum.c	28;"	d	file:
TOOSMALL	compat/strtonum.c	27;"	d	file:
TTYCODE_FLAG	tty-term.c	/^	TTYCODE_FLAG,$/;"	e	enum:tty_code_type	file:
TTYCODE_NONE	tty-term.c	/^	TTYCODE_NONE = 0,$/;"	e	enum:tty_code_type	file:
TTYCODE_NUMBER	tty-term.c	/^	TTYCODE_NUMBER,$/;"	e	enum:tty_code_type	file:
TTYCODE_STRING	tty-term.c	/^	TTYCODE_STRING,$/;"	e	enum:tty_code_type	file:
TTYC_ACSC	tmux.h	/^	TTYC_ACSC,$/;"	e	enum:tty_code_code
TTYC_AM	tmux.h	/^	TTYC_AM,$/;"	e	enum:tty_code_code
TTYC_AX	tmux.h	/^	TTYC_AX,$/;"	e	enum:tty_code_code
TTYC_BCE	tmux.h	/^	TTYC_BCE,$/;"	e	enum:tty_code_code
TTYC_BEL	tmux.h	/^	TTYC_BEL,$/;"	e	enum:tty_code_code
TTYC_BLINK	tmux.h	/^	TTYC_BLINK,$/;"	e	enum:tty_code_code
TTYC_BOLD	tmux.h	/^	TTYC_BOLD,$/;"	e	enum:tty_code_code
TTYC_CIVIS	tmux.h	/^	TTYC_CIVIS,$/;"	e	enum:tty_code_code
TTYC_CLEAR	tmux.h	/^	TTYC_CLEAR,$/;"	e	enum:tty_code_code
TTYC_CLMG	tmux.h	/^	TTYC_CLMG,$/;"	e	enum:tty_code_code
TTYC_CMG	tmux.h	/^	TTYC_CMG,$/;"	e	enum:tty_code_code
TTYC_CNORM	tmux.h	/^	TTYC_CNORM,$/;"	e	enum:tty_code_code
TTYC_COLORS	tmux.h	/^	TTYC_COLORS,$/;"	e	enum:tty_code_code
TTYC_CR	tmux.h	/^	TTYC_CR,$/;"	e	enum:tty_code_code
TTYC_CS	tmux.h	/^	TTYC_CS,$/;"	e	enum:tty_code_code
TTYC_CSR	tmux.h	/^	TTYC_CSR,$/;"	e	enum:tty_code_code
TTYC_CUB	tmux.h	/^	TTYC_CUB,$/;"	e	enum:tty_code_code
TTYC_CUB1	tmux.h	/^	TTYC_CUB1,$/;"	e	enum:tty_code_code
TTYC_CUD	tmux.h	/^	TTYC_CUD,$/;"	e	enum:tty_code_code
TTYC_CUD1	tmux.h	/^	TTYC_CUD1,$/;"	e	enum:tty_code_code
TTYC_CUF	tmux.h	/^	TTYC_CUF,$/;"	e	enum:tty_code_code
TTYC_CUF1	tmux.h	/^	TTYC_CUF1,$/;"	e	enum:tty_code_code
TTYC_CUP	tmux.h	/^	TTYC_CUP,$/;"	e	enum:tty_code_code
TTYC_CUU	tmux.h	/^	TTYC_CUU,$/;"	e	enum:tty_code_code
TTYC_CUU1	tmux.h	/^	TTYC_CUU1,$/;"	e	enum:tty_code_code
TTYC_CVVIS	tmux.h	/^	TTYC_CVVIS,$/;"	e	enum:tty_code_code
TTYC_DCH	tmux.h	/^	TTYC_DCH,$/;"	e	enum:tty_code_code
TTYC_DCH1	tmux.h	/^	TTYC_DCH1,$/;"	e	enum:tty_code_code
TTYC_DIM	tmux.h	/^	TTYC_DIM,$/;"	e	enum:tty_code_code
TTYC_DL	tmux.h	/^	TTYC_DL,$/;"	e	enum:tty_code_code
TTYC_DL1	tmux.h	/^	TTYC_DL1,$/;"	e	enum:tty_code_code
TTYC_DSBP	tmux.h	/^	TTYC_DSBP,$/;"	e	enum:tty_code_code
TTYC_DSEKS	tmux.h	/^	TTYC_DSEKS,$/;"	e	enum:tty_code_code
TTYC_DSFCS	tmux.h	/^	TTYC_DSFCS,$/;"	e	enum:tty_code_code
TTYC_DSMG	tmux.h	/^	TTYC_DSMG,$/;"	e	enum:tty_code_code
TTYC_E3	tmux.h	/^	TTYC_E3,$/;"	e	enum:tty_code_code
TTYC_ECH	tmux.h	/^	TTYC_ECH,$/;"	e	enum:tty_code_code
TTYC_ED	tmux.h	/^	TTYC_ED,$/;"	e	enum:tty_code_code
TTYC_EL	tmux.h	/^	TTYC_EL,$/;"	e	enum:tty_code_code
TTYC_EL1	tmux.h	/^	TTYC_EL1,$/;"	e	enum:tty_code_code
TTYC_ENACS	tmux.h	/^	TTYC_ENACS,$/;"	e	enum:tty_code_code
TTYC_ENBP	tmux.h	/^	TTYC_ENBP,$/;"	e	enum:tty_code_code
TTYC_ENEKS	tmux.h	/^	TTYC_ENEKS,$/;"	e	enum:tty_code_code
TTYC_ENFCS	tmux.h	/^	TTYC_ENFCS,$/;"	e	enum:tty_code_code
TTYC_ENMG	tmux.h	/^	TTYC_ENMG,$/;"	e	enum:tty_code_code
TTYC_FSL	tmux.h	/^	TTYC_FSL,$/;"	e	enum:tty_code_code
TTYC_HOME	tmux.h	/^	TTYC_HOME,$/;"	e	enum:tty_code_code
TTYC_HPA	tmux.h	/^	TTYC_HPA,$/;"	e	enum:tty_code_code
TTYC_ICH	tmux.h	/^	TTYC_ICH,$/;"	e	enum:tty_code_code
TTYC_ICH1	tmux.h	/^	TTYC_ICH1,$/;"	e	enum:tty_code_code
TTYC_IL	tmux.h	/^	TTYC_IL,$/;"	e	enum:tty_code_code
TTYC_IL1	tmux.h	/^	TTYC_IL1,$/;"	e	enum:tty_code_code
TTYC_INDN	tmux.h	/^	TTYC_INDN,$/;"	e	enum:tty_code_code
TTYC_INVIS	tmux.h	/^	TTYC_INVIS,$/;"	e	enum:tty_code_code
TTYC_KCBT	tmux.h	/^	TTYC_KCBT,$/;"	e	enum:tty_code_code
TTYC_KCUB1	tmux.h	/^	TTYC_KCUB1,$/;"	e	enum:tty_code_code
TTYC_KCUD1	tmux.h	/^	TTYC_KCUD1,$/;"	e	enum:tty_code_code
TTYC_KCUF1	tmux.h	/^	TTYC_KCUF1,$/;"	e	enum:tty_code_code
TTYC_KCUU1	tmux.h	/^	TTYC_KCUU1,$/;"	e	enum:tty_code_code
TTYC_KDC2	tmux.h	/^	TTYC_KDC2,$/;"	e	enum:tty_code_code
TTYC_KDC3	tmux.h	/^	TTYC_KDC3,$/;"	e	enum:tty_code_code
TTYC_KDC4	tmux.h	/^	TTYC_KDC4,$/;"	e	enum:tty_code_code
TTYC_KDC5	tmux.h	/^	TTYC_KDC5,$/;"	e	enum:tty_code_code
TTYC_KDC6	tmux.h	/^	TTYC_KDC6,$/;"	e	enum:tty_code_code
TTYC_KDC7	tmux.h	/^	TTYC_KDC7,$/;"	e	enum:tty_code_code
TTYC_KDCH1	tmux.h	/^	TTYC_KDCH1,$/;"	e	enum:tty_code_code
TTYC_KDN2	tmux.h	/^	TTYC_KDN2,$/;"	e	enum:tty_code_code
TTYC_KDN3	tmux.h	/^	TTYC_KDN3,$/;"	e	enum:tty_code_code
TTYC_KDN4	tmux.h	/^	TTYC_KDN4,$/;"	e	enum:tty_code_code
TTYC_KDN5	tmux.h	/^	TTYC_KDN5,$/;"	e	enum:tty_code_code
TTYC_KDN6	tmux.h	/^	TTYC_KDN6,$/;"	e	enum:tty_code_code
TTYC_KDN7	tmux.h	/^	TTYC_KDN7,$/;"	e	enum:tty_code_code
TTYC_KEND	tmux.h	/^	TTYC_KEND,$/;"	e	enum:tty_code_code
TTYC_KEND2	tmux.h	/^	TTYC_KEND2,$/;"	e	enum:tty_code_code
TTYC_KEND3	tmux.h	/^	TTYC_KEND3,$/;"	e	enum:tty_code_code
TTYC_KEND4	tmux.h	/^	TTYC_KEND4,$/;"	e	enum:tty_code_code
TTYC_KEND5	tmux.h	/^	TTYC_KEND5,$/;"	e	enum:tty_code_code
TTYC_KEND6	tmux.h	/^	TTYC_KEND6,$/;"	e	enum:tty_code_code
TTYC_KEND7	tmux.h	/^	TTYC_KEND7,$/;"	e	enum:tty_code_code
TTYC_KF1	tmux.h	/^	TTYC_KF1,$/;"	e	enum:tty_code_code
TTYC_KF10	tmux.h	/^	TTYC_KF10,$/;"	e	enum:tty_code_code
TTYC_KF11	tmux.h	/^	TTYC_KF11,$/;"	e	enum:tty_code_code
TTYC_KF12	tmux.h	/^	TTYC_KF12,$/;"	e	enum:tty_code_code
TTYC_KF13	tmux.h	/^	TTYC_KF13,$/;"	e	enum:tty_code_code
TTYC_KF14	tmux.h	/^	TTYC_KF14,$/;"	e	enum:tty_code_code
TTYC_KF15	tmux.h	/^	TTYC_KF15,$/;"	e	enum:tty_code_code
TTYC_KF16	tmux.h	/^	TTYC_KF16,$/;"	e	enum:tty_code_code
TTYC_KF17	tmux.h	/^	TTYC_KF17,$/;"	e	enum:tty_code_code
TTYC_KF18	tmux.h	/^	TTYC_KF18,$/;"	e	enum:tty_code_code
TTYC_KF19	tmux.h	/^	TTYC_KF19,$/;"	e	enum:tty_code_code
TTYC_KF2	tmux.h	/^	TTYC_KF2,$/;"	e	enum:tty_code_code
TTYC_KF20	tmux.h	/^	TTYC_KF20,$/;"	e	enum:tty_code_code
TTYC_KF21	tmux.h	/^	TTYC_KF21,$/;"	e	enum:tty_code_code
TTYC_KF22	tmux.h	/^	TTYC_KF22,$/;"	e	enum:tty_code_code
TTYC_KF23	tmux.h	/^	TTYC_KF23,$/;"	e	enum:tty_code_code
TTYC_KF24	tmux.h	/^	TTYC_KF24,$/;"	e	enum:tty_code_code
TTYC_KF25	tmux.h	/^	TTYC_KF25,$/;"	e	enum:tty_code_code
TTYC_KF26	tmux.h	/^	TTYC_KF26,$/;"	e	enum:tty_code_code
TTYC_KF27	tmux.h	/^	TTYC_KF27,$/;"	e	enum:tty_code_code
TTYC_KF28	tmux.h	/^	TTYC_KF28,$/;"	e	enum:tty_code_code
TTYC_KF29	tmux.h	/^	TTYC_KF29,$/;"	e	enum:tty_code_code
TTYC_KF3	tmux.h	/^	TTYC_KF3,$/;"	e	enum:tty_code_code
TTYC_KF30	tmux.h	/^	TTYC_KF30,$/;"	e	enum:tty_code_code
TTYC_KF31	tmux.h	/^	TTYC_KF31,$/;"	e	enum:tty_code_code
TTYC_KF32	tmux.h	/^	TTYC_KF32,$/;"	e	enum:tty_code_code
TTYC_KF33	tmux.h	/^	TTYC_KF33,$/;"	e	enum:tty_code_code
TTYC_KF34	tmux.h	/^	TTYC_KF34,$/;"	e	enum:tty_code_code
TTYC_KF35	tmux.h	/^	TTYC_KF35,$/;"	e	enum:tty_code_code
TTYC_KF36	tmux.h	/^	TTYC_KF36,$/;"	e	enum:tty_code_code
TTYC_KF37	tmux.h	/^	TTYC_KF37,$/;"	e	enum:tty_code_code
TTYC_KF38	tmux.h	/^	TTYC_KF38,$/;"	e	enum:tty_code_code
TTYC_KF39	tmux.h	/^	TTYC_KF39,$/;"	e	enum:tty_code_code
TTYC_KF4	tmux.h	/^	TTYC_KF4,$/;"	e	enum:tty_code_code
TTYC_KF40	tmux.h	/^	TTYC_KF40,$/;"	e	enum:tty_code_code
TTYC_KF41	tmux.h	/^	TTYC_KF41,$/;"	e	enum:tty_code_code
TTYC_KF42	tmux.h	/^	TTYC_KF42,$/;"	e	enum:tty_code_code
TTYC_KF43	tmux.h	/^	TTYC_KF43,$/;"	e	enum:tty_code_code
TTYC_KF44	tmux.h	/^	TTYC_KF44,$/;"	e	enum:tty_code_code
TTYC_KF45	tmux.h	/^	TTYC_KF45,$/;"	e	enum:tty_code_code
TTYC_KF46	tmux.h	/^	TTYC_KF46,$/;"	e	enum:tty_code_code
TTYC_KF47	tmux.h	/^	TTYC_KF47,$/;"	e	enum:tty_code_code
TTYC_KF48	tmux.h	/^	TTYC_KF48,$/;"	e	enum:tty_code_code
TTYC_KF49	tmux.h	/^	TTYC_KF49,$/;"	e	enum:tty_code_code
TTYC_KF5	tmux.h	/^	TTYC_KF5,$/;"	e	enum:tty_code_code
TTYC_KF50	tmux.h	/^	TTYC_KF50,$/;"	e	enum:tty_code_code
TTYC_KF51	tmux.h	/^	TTYC_KF51,$/;"	e	enum:tty_code_code
TTYC_KF52	tmux.h	/^	TTYC_KF52,$/;"	e	enum:tty_code_code
TTYC_KF53	tmux.h	/^	TTYC_KF53,$/;"	e	enum:tty_code_code
TTYC_KF54	tmux.h	/^	TTYC_KF54,$/;"	e	enum:tty_code_code
TTYC_KF55	tmux.h	/^	TTYC_KF55,$/;"	e	enum:tty_code_code
TTYC_KF56	tmux.h	/^	TTYC_KF56,$/;"	e	enum:tty_code_code
TTYC_KF57	tmux.h	/^	TTYC_KF57,$/;"	e	enum:tty_code_code
TTYC_KF58	tmux.h	/^	TTYC_KF58,$/;"	e	enum:tty_code_code
TTYC_KF59	tmux.h	/^	TTYC_KF59,$/;"	e	enum:tty_code_code
TTYC_KF6	tmux.h	/^	TTYC_KF6,$/;"	e	enum:tty_code_code
TTYC_KF60	tmux.h	/^	TTYC_KF60,$/;"	e	enum:tty_code_code
TTYC_KF61	tmux.h	/^	TTYC_KF61,$/;"	e	enum:tty_code_code
TTYC_KF62	tmux.h	/^	TTYC_KF62,$/;"	e	enum:tty_code_code
TTYC_KF63	tmux.h	/^	TTYC_KF63,$/;"	e	enum:tty_code_code
TTYC_KF7	tmux.h	/^	TTYC_KF7,$/;"	e	enum:tty_code_code
TTYC_KF8	tmux.h	/^	TTYC_KF8,$/;"	e	enum:tty_code_code
TTYC_KF9	tmux.h	/^	TTYC_KF9,$/;"	e	enum:tty_code_code
TTYC_KHOM2	tmux.h	/^	TTYC_KHOM2,$/;"	e	enum:tty_code_code
TTYC_KHOM3	tmux.h	/^	TTYC_KHOM3,$/;"	e	enum:tty_code_code
TTYC_KHOM4	tmux.h	/^	TTYC_KHOM4,$/;"	e	enum:tty_code_code
TTYC_KHOM5	tmux.h	/^	TTYC_KHOM5,$/;"	e	enum:tty_code_code
TTYC_KHOM6	tmux.h	/^	TTYC_KHOM6,$/;"	e	enum:tty_code_code
TTYC_KHOM7	tmux.h	/^	TTYC_KHOM7,$/;"	e	enum:tty_code_code
TTYC_KHOME	tmux.h	/^	TTYC_KHOME,$/;"	e	enum:tty_code_code
TTYC_KIC2	tmux.h	/^	TTYC_KIC2,$/;"	e	enum:tty_code_code
TTYC_KIC3	tmux.h	/^	TTYC_KIC3,$/;"	e	enum:tty_code_code
TTYC_KIC4	tmux.h	/^	TTYC_KIC4,$/;"	e	enum:tty_code_code
TTYC_KIC5	tmux.h	/^	TTYC_KIC5,$/;"	e	enum:tty_code_code
TTYC_KIC6	tmux.h	/^	TTYC_KIC6,$/;"	e	enum:tty_code_code
TTYC_KIC7	tmux.h	/^	TTYC_KIC7,$/;"	e	enum:tty_code_code
TTYC_KICH1	tmux.h	/^	TTYC_KICH1,$/;"	e	enum:tty_code_code
TTYC_KIND	tmux.h	/^	TTYC_KIND,$/;"	e	enum:tty_code_code
TTYC_KLFT2	tmux.h	/^	TTYC_KLFT2,$/;"	e	enum:tty_code_code
TTYC_KLFT3	tmux.h	/^	TTYC_KLFT3,$/;"	e	enum:tty_code_code
TTYC_KLFT4	tmux.h	/^	TTYC_KLFT4,$/;"	e	enum:tty_code_code
TTYC_KLFT5	tmux.h	/^	TTYC_KLFT5,$/;"	e	enum:tty_code_code
TTYC_KLFT6	tmux.h	/^	TTYC_KLFT6,$/;"	e	enum:tty_code_code
TTYC_KLFT7	tmux.h	/^	TTYC_KLFT7,$/;"	e	enum:tty_code_code
TTYC_KMOUS	tmux.h	/^	TTYC_KMOUS,$/;"	e	enum:tty_code_code
TTYC_KNP	tmux.h	/^	TTYC_KNP,$/;"	e	enum:tty_code_code
TTYC_KNXT2	tmux.h	/^	TTYC_KNXT2,$/;"	e	enum:tty_code_code
TTYC_KNXT3	tmux.h	/^	TTYC_KNXT3,$/;"	e	enum:tty_code_code
TTYC_KNXT4	tmux.h	/^	TTYC_KNXT4,$/;"	e	enum:tty_code_code
TTYC_KNXT5	tmux.h	/^	TTYC_KNXT5,$/;"	e	enum:tty_code_code
TTYC_KNXT6	tmux.h	/^	TTYC_KNXT6,$/;"	e	enum:tty_code_code
TTYC_KNXT7	tmux.h	/^	TTYC_KNXT7,$/;"	e	enum:tty_code_code
TTYC_KPP	tmux.h	/^	TTYC_KPP,$/;"	e	enum:tty_code_code
TTYC_KPRV2	tmux.h	/^	TTYC_KPRV2,$/;"	e	enum:tty_code_code
TTYC_KPRV3	tmux.h	/^	TTYC_KPRV3,$/;"	e	enum:tty_code_code
TTYC_KPRV4	tmux.h	/^	TTYC_KPRV4,$/;"	e	enum:tty_code_code
TTYC_KPRV5	tmux.h	/^	TTYC_KPRV5,$/;"	e	enum:tty_code_code
TTYC_KPRV6	tmux.h	/^	TTYC_KPRV6,$/;"	e	enum:tty_code_code
TTYC_KPRV7	tmux.h	/^	TTYC_KPRV7,$/;"	e	enum:tty_code_code
TTYC_KRI	tmux.h	/^	TTYC_KRI,$/;"	e	enum:tty_code_code
TTYC_KRIT2	tmux.h	/^	TTYC_KRIT2,$/;"	e	enum:tty_code_code
TTYC_KRIT3	tmux.h	/^	TTYC_KRIT3,$/;"	e	enum:tty_code_code
TTYC_KRIT4	tmux.h	/^	TTYC_KRIT4,$/;"	e	enum:tty_code_code
TTYC_KRIT5	tmux.h	/^	TTYC_KRIT5,$/;"	e	enum:tty_code_code
TTYC_KRIT6	tmux.h	/^	TTYC_KRIT6,$/;"	e	enum:tty_code_code
TTYC_KRIT7	tmux.h	/^	TTYC_KRIT7,$/;"	e	enum:tty_code_code
TTYC_KUP2	tmux.h	/^	TTYC_KUP2,$/;"	e	enum:tty_code_code
TTYC_KUP3	tmux.h	/^	TTYC_KUP3,$/;"	e	enum:tty_code_code
TTYC_KUP4	tmux.h	/^	TTYC_KUP4,$/;"	e	enum:tty_code_code
TTYC_KUP5	tmux.h	/^	TTYC_KUP5,$/;"	e	enum:tty_code_code
TTYC_KUP6	tmux.h	/^	TTYC_KUP6,$/;"	e	enum:tty_code_code
TTYC_KUP7	tmux.h	/^	TTYC_KUP7,$/;"	e	enum:tty_code_code
TTYC_MS	tmux.h	/^	TTYC_MS,$/;"	e	enum:tty_code_code
TTYC_OL	tmux.h	/^	TTYC_OL,$/;"	e	enum:tty_code_code
TTYC_OP	tmux.h	/^	TTYC_OP,$/;"	e	enum:tty_code_code
TTYC_REV	tmux.h	/^	TTYC_REV,$/;"	e	enum:tty_code_code
TTYC_RGB	tmux.h	/^	TTYC_RGB,$/;"	e	enum:tty_code_code
TTYC_RI	tmux.h	/^	TTYC_RI,$/;"	e	enum:tty_code_code
TTYC_RIN	tmux.h	/^	TTYC_RIN,$/;"	e	enum:tty_code_code
TTYC_RMACS	tmux.h	/^	TTYC_RMACS,$/;"	e	enum:tty_code_code
TTYC_RMCUP	tmux.h	/^	TTYC_RMCUP,$/;"	e	enum:tty_code_code
TTYC_RMKX	tmux.h	/^	TTYC_RMKX,$/;"	e	enum:tty_code_code
TTYC_SE	tmux.h	/^	TTYC_SE,$/;"	e	enum:tty_code_code
TTYC_SETAB	tmux.h	/^	TTYC_SETAB,$/;"	e	enum:tty_code_code
TTYC_SETAF	tmux.h	/^	TTYC_SETAF,$/;"	e	enum:tty_code_code
TTYC_SETAL	tmux.h	/^	TTYC_SETAL,$/;"	e	enum:tty_code_code
TTYC_SETRGBB	tmux.h	/^	TTYC_SETRGBB,$/;"	e	enum:tty_code_code
TTYC_SETRGBF	tmux.h	/^	TTYC_SETRGBF,$/;"	e	enum:tty_code_code
TTYC_SETULC	tmux.h	/^	TTYC_SETULC,$/;"	e	enum:tty_code_code
TTYC_SGR0	tmux.h	/^	TTYC_SGR0,$/;"	e	enum:tty_code_code
TTYC_SITM	tmux.h	/^	TTYC_SITM,$/;"	e	enum:tty_code_code
TTYC_SMACS	tmux.h	/^	TTYC_SMACS,$/;"	e	enum:tty_code_code
TTYC_SMCUP	tmux.h	/^	TTYC_SMCUP,$/;"	e	enum:tty_code_code
TTYC_SMKX	tmux.h	/^	TTYC_SMKX,$/;"	e	enum:tty_code_code
TTYC_SMOL	tmux.h	/^	TTYC_SMOL,$/;"	e	enum:tty_code_code
TTYC_SMSO	tmux.h	/^	TTYC_SMSO,$/;"	e	enum:tty_code_code
TTYC_SMUL	tmux.h	/^	TTYC_SMUL,$/;"	e	enum:tty_code_code
TTYC_SMULX	tmux.h	/^	TTYC_SMULX,$/;"	e	enum:tty_code_code
TTYC_SMXX	tmux.h	/^	TTYC_SMXX,$/;"	e	enum:tty_code_code
TTYC_SS	tmux.h	/^	TTYC_SS,$/;"	e	enum:tty_code_code
TTYC_SYNC	tmux.h	/^	TTYC_SYNC,$/;"	e	enum:tty_code_code
TTYC_TC	tmux.h	/^	TTYC_TC,$/;"	e	enum:tty_code_code
TTYC_TSL	tmux.h	/^	TTYC_TSL,$/;"	e	enum:tty_code_code
TTYC_U8	tmux.h	/^	TTYC_U8,$/;"	e	enum:tty_code_code
TTYC_VPA	tmux.h	/^	TTYC_VPA,$/;"	e	enum:tty_code_code
TTYC_XT	tmux.h	/^	TTYC_XT$/;"	e	enum:tty_code_code
TTY_BLOCK	tmux.h	1323;"	d
TTY_BLOCK_INTERVAL	tty.c	76;"	d	file:
TTY_BLOCK_START	tty.c	77;"	d	file:
TTY_BLOCK_STOP	tty.c	78;"	d	file:
TTY_FEATURES_BASE_MODERN_XTERM	tty-features.c	336;"	d	file:
TTY_FREEZE	tmux.h	1317;"	d
TTY_HAVEDA	tmux.h	1324;"	d
TTY_HAVEXDA	tmux.h	1325;"	d
TTY_NAME_MAX	compat.h	265;"	d
TTY_NOCURSOR	tmux.h	1316;"	d
TTY_OPENED	tmux.h	1321;"	d
TTY_STARTED	tmux.h	1320;"	d
TTY_SYNCING	tmux.h	1326;"	d
TTY_TIMER	tmux.h	1318;"	d
UNVIS_END	compat/vis.h	74;"	d
UNVIS_ERROR	compat/vis.h	69;"	d
UNVIS_NOCHAR	compat/vis.h	67;"	d
UNVIS_SYNBAD	compat/vis.h	68;"	d
UNVIS_VALID	compat/vis.h	65;"	d
UNVIS_VALIDPUSH	compat/vis.h	66;"	d
UTF8_DONE	tmux.h	/^	UTF8_DONE,$/;"	e	enum:utf8_state
UTF8_ERROR	tmux.h	/^	UTF8_ERROR$/;"	e	enum:utf8_state
UTF8_GET_SIZE	utf8.c	66;"	d	file:
UTF8_GET_WIDTH	utf8.c	67;"	d	file:
UTF8_MORE	tmux.h	/^	UTF8_MORE,$/;"	e	enum:utf8_state
UTF8_SET_SIZE	utf8.c	69;"	d	file:
UTF8_SET_WIDTH	utf8.c	70;"	d	file:
UTF8_SIZE	tmux.h	611;"	d
VISUAL_BOTH	tmux.h	112;"	d
VISUAL_OFF	tmux.h	110;"	d
VISUAL_ON	tmux.h	111;"	d
VIS_ALL	compat/vis.h	54;"	d
VIS_CSTYLE	compat/vis.h	42;"	d
VIS_DQ	compat/vis.h	53;"	d
VIS_GLOB	compat/vis.h	60;"	d
VIS_NL	compat/vis.h	50;"	d
VIS_NOSLASH	compat/vis.h	59;"	d
VIS_OCTAL	compat/vis.h	41;"	d
VIS_SAFE	compat/vis.h	52;"	d
VIS_SP	compat/vis.h	48;"	d
VIS_TAB	compat/vis.h	49;"	d
VIS_WHITE	compat/vis.h	51;"	d
WAIT_ANY	compat.h	226;"	d
WIN32_LEAN_AND_MEAN	win32_headers/win32_posix.h	4;"	d
WINDOW_ACTIVITY	tmux.h	1047;"	d
WINDOW_ALERTFLAGS	tmux.h	1052;"	d
WINDOW_BELL	tmux.h	1046;"	d
WINDOW_BUFFER_BY_NAME	window-buffer.c	/^	WINDOW_BUFFER_BY_NAME,$/;"	e	enum:window_buffer_sort_type	file:
WINDOW_BUFFER_BY_SIZE	window-buffer.c	/^	WINDOW_BUFFER_BY_SIZE,$/;"	e	enum:window_buffer_sort_type	file:
WINDOW_BUFFER_BY_TIME	window-buffer.c	/^	WINDOW_BUFFER_BY_TIME,$/;"	e	enum:window_buffer_sort_type	file:
WINDOW_BUFFER_DEFAULT_COMMAND	window-buffer.c	39;"	d	file:
WINDOW_BUFFER_DEFAULT_FORMAT	window-buffer.c	41;"	d	file:
WINDOW_CLIENT_BY_ACTIVITY_TIME	window-client.c	/^	WINDOW_CLIENT_BY_ACTIVITY_TIME,$/;"	e	enum:window_client_sort_type	file:
WINDOW_CLIENT_BY_CREATION_TIME	window-client.c	/^	WINDOW_CLIENT_BY_CREATION_TIME,$/;"	e	enum:window_client_sort_type	file:
WINDOW_CLIENT_BY_NAME	window-client.c	/^	WINDOW_CLIENT_BY_NAME,$/;"	e	enum:window_client_sort_type	file:
WINDOW_CLIENT_BY_SIZE	window-client.c	/^	WINDOW_CLIENT_BY_SIZE,$/;"	e	enum:window_client_sort_type	file:
WINDOW_CLIENT_DEFAULT_COMMAND	window-client.c	38;"	d	file:
WINDOW_CLIENT_DEFAULT_FORMAT	window-client.c	40;"	d	file:
WINDOW_COPY_CMD_CANCEL	window-copy.c	/^	WINDOW_COPY_CMD_CANCEL,$/;"	e	enum:window_copy_cmd_action	file:
WINDOW_COPY_CMD_CLEAR_ALWAYS	window-copy.c	/^	WINDOW_COPY_CMD_CLEAR_ALWAYS,$/;"	e	enum:window_copy_cmd_clear	file:
WINDOW_COPY_CMD_CLEAR_EMACS_ONLY	window-copy.c	/^	WINDOW_COPY_CMD_CLEAR_EMACS_ONLY,$/;"	e	enum:window_copy_cmd_clear	file:
WINDOW_COPY_CMD_CLEAR_NEVER	window-copy.c	/^	WINDOW_COPY_CMD_CLEAR_NEVER,$/;"	e	enum:window_copy_cmd_clear	file:
WINDOW_COPY_CMD_NOTHING	window-copy.c	/^	WINDOW_COPY_CMD_NOTHING,$/;"	e	enum:window_copy_cmd_action	file:
WINDOW_COPY_CMD_REDRAW	window-copy.c	/^	WINDOW_COPY_CMD_REDRAW,$/;"	e	enum:window_copy_cmd_action	file:
WINDOW_COPY_DRAG_REPEAT_TIME	window-copy.c	289;"	d	file:
WINDOW_COPY_JUMPBACKWARD	window-copy.c	/^	WINDOW_COPY_JUMPBACKWARD,$/;"	e	enum:__anon17	file:
WINDOW_COPY_JUMPFORWARD	window-copy.c	/^	WINDOW_COPY_JUMPFORWARD,$/;"	e	enum:__anon17	file:
WINDOW_COPY_JUMPTOBACKWARD	window-copy.c	/^	WINDOW_COPY_JUMPTOBACKWARD,$/;"	e	enum:__anon17	file:
WINDOW_COPY_JUMPTOFORWARD	window-copy.c	/^	WINDOW_COPY_JUMPTOFORWARD,$/;"	e	enum:__anon17	file:
WINDOW_COPY_OFF	window-copy.c	/^	WINDOW_COPY_OFF,$/;"	e	enum:__anon17	file:
WINDOW_COPY_REL_POS_ABOVE	window-copy.c	/^	WINDOW_COPY_REL_POS_ABOVE,$/;"	e	enum:__anon18	file:
WINDOW_COPY_REL_POS_BELOW	window-copy.c	/^	WINDOW_COPY_REL_POS_BELOW,$/;"	e	enum:__anon18	file:
WINDOW_COPY_REL_POS_ON_SCREEN	window-copy.c	/^	WINDOW_COPY_REL_POS_ON_SCREEN,$/;"	e	enum:__anon18	file:
WINDOW_COPY_SEARCHDOWN	window-copy.c	/^	WINDOW_COPY_SEARCHDOWN,$/;"	e	enum:__anon17	file:
WINDOW_COPY_SEARCHUP	window-copy.c	/^	WINDOW_COPY_SEARCHUP,$/;"	e	enum:__anon17	file:
WINDOW_COPY_SEARCH_ALL_TIMEOUT	window-copy.c	283;"	d	file:
WINDOW_COPY_SEARCH_TIMEOUT	window-copy.c	282;"	d	file:
WINDOW_CUSTOMIZE_DEFAULT_FORMAT	window-customize.c	36;"	d	file:
WINDOW_CUSTOMIZE_GLOBAL_SESSION	window-customize.c	/^	WINDOW_CUSTOMIZE_GLOBAL_SESSION,$/;"	e	enum:window_customize_scope	file:
WINDOW_CUSTOMIZE_GLOBAL_WINDOW	window-customize.c	/^	WINDOW_CUSTOMIZE_GLOBAL_WINDOW,$/;"	e	enum:window_customize_scope	file:
WINDOW_CUSTOMIZE_KEY	window-customize.c	/^	WINDOW_CUSTOMIZE_KEY,$/;"	e	enum:window_customize_scope	file:
WINDOW_CUSTOMIZE_NONE	window-customize.c	/^	WINDOW_CUSTOMIZE_NONE,$/;"	e	enum:window_customize_scope	file:
WINDOW_CUSTOMIZE_PANE	window-customize.c	/^	WINDOW_CUSTOMIZE_PANE$/;"	e	enum:window_customize_scope	file:
WINDOW_CUSTOMIZE_RESET	window-customize.c	/^	WINDOW_CUSTOMIZE_RESET,$/;"	e	enum:window_customize_change	file:
WINDOW_CUSTOMIZE_SERVER	window-customize.c	/^	WINDOW_CUSTOMIZE_SERVER,$/;"	e	enum:window_customize_scope	file:
WINDOW_CUSTOMIZE_SESSION	window-customize.c	/^	WINDOW_CUSTOMIZE_SESSION,$/;"	e	enum:window_customize_scope	file:
WINDOW_CUSTOMIZE_UNSET	window-customize.c	/^	WINDOW_CUSTOMIZE_UNSET,$/;"	e	enum:window_customize_change	file:
WINDOW_CUSTOMIZE_WINDOW	window-customize.c	/^	WINDOW_CUSTOMIZE_WINDOW,$/;"	e	enum:window_customize_scope	file:
WINDOW_MAXIMUM	tmux.h	86;"	d
WINDOW_MINIMUM	tmux.h	85;"	d
WINDOW_RESIZE	tmux.h	1051;"	d
WINDOW_SILENCE	tmux.h	1048;"	d
WINDOW_SIZE_LARGEST	tmux.h	1086;"	d
WINDOW_SIZE_LATEST	tmux.h	1089;"	d
WINDOW_SIZE_MANUAL	tmux.h	1088;"	d
WINDOW_SIZE_SMALLEST	tmux.h	1087;"	d
WINDOW_TREE_BY_INDEX	window-tree.c	/^	WINDOW_TREE_BY_INDEX,$/;"	e	enum:window_tree_sort_type	file:
WINDOW_TREE_BY_NAME	window-tree.c	/^	WINDOW_TREE_BY_NAME,$/;"	e	enum:window_tree_sort_type	file:
WINDOW_TREE_BY_TIME	window-tree.c	/^	WINDOW_TREE_BY_TIME,$/;"	e	enum:window_tree_sort_type	file:
WINDOW_TREE_DEFAULT_COMMAND	window-tree.c	37;"	d	file:
WINDOW_TREE_DEFAULT_FORMAT	window-tree.c	39;"	d	file:
WINDOW_TREE_NONE	window-tree.c	/^	WINDOW_TREE_NONE,$/;"	e	enum:window_tree_type	file:
WINDOW_TREE_PANE	window-tree.c	/^	WINDOW_TREE_PANE,$/;"	e	enum:window_tree_type	file:
WINDOW_TREE_SESSION	window-tree.c	/^	WINDOW_TREE_SESSION,$/;"	e	enum:window_tree_type	file:
WINDOW_TREE_WINDOW	window-tree.c	/^	WINDOW_TREE_WINDOW,$/;"	e	enum:window_tree_type	file:
WINDOW_WASZOOMED	tmux.h	1050;"	d
WINDOW_ZOOMED	tmux.h	1049;"	d
WINLINK_ACTIVITY	tmux.h	1074;"	d
WINLINK_ALERTFLAGS	tmux.h	1076;"	d
WINLINK_BELL	tmux.h	1073;"	d
WINLINK_SILENCE	tmux.h	1075;"	d
XMALLOC_H	xmalloc.h	20;"	d
XSIMPLEQ_EMPTY	compat/queue.h	346;"	d
XSIMPLEQ_END	compat/queue.h	345;"	d
XSIMPLEQ_ENTRY	compat/queue.h	334;"	d
XSIMPLEQ_FIRST	compat/queue.h	344;"	d
XSIMPLEQ_FOREACH	compat/queue.h	350;"	d
XSIMPLEQ_FOREACH_SAFE	compat/queue.h	355;"	d
XSIMPLEQ_HEAD	compat/queue.h	327;"	d
XSIMPLEQ_INIT	compat/queue.h	363;"	d
XSIMPLEQ_INSERT_AFTER	compat/queue.h	382;"	d
XSIMPLEQ_INSERT_HEAD	compat/queue.h	369;"	d
XSIMPLEQ_INSERT_TAIL	compat/queue.h	376;"	d
XSIMPLEQ_NEXT	compat/queue.h	347;"	d
XSIMPLEQ_REMOVE_AFTER	compat/queue.h	395;"	d
XSIMPLEQ_REMOVE_HEAD	compat/queue.h	389;"	d
XSIMPLEQ_XOR	compat/queue.h	342;"	d
_BITSTRING_H_	compat/bitstring.h	39;"	d
_IMSG_H_	compat/imsg.h	22;"	d
_PATH_BSHELL	compat.h	102;"	d
_PATH_DEFPATH	compat.h	122;"	d
_PATH_DEV	compat.h	118;"	d
_PATH_DEVNULL	compat.h	110;"	d
_PATH_TMP	compat.h	106;"	d
_PATH_TTY	compat.h	114;"	d
_PATH_VI	compat.h	126;"	d
_Q_INVALIDATE	compat/queue.h	83;"	d
_Q_INVALIDATE	compat/queue.h	85;"	d
_SYS_QUEUE_H_	compat/queue.h	36;"	d
_SYS_TREE_H_	compat/tree.h	28;"	d
_VIS_H_	compat/vis.h	36;"	d
__attribute__	compat.h	56;"	d
__bounded__	xmalloc.h	23;"	d
__dead	compat.h	60;"	d
__dead	compat.h	67;"	d
__packed	compat.h	70;"	d
__packed	tmux.h	/^} __packed;$/;"	v	typeref:struct:grid_cell_entry
__packed	tmux.h	/^} __packed;$/;"	v	typeref:struct:grid_extd_entry
__packed	tmux.h	/^} __packed;$/;"	v	typeref:struct:grid_line
__unused	compat.h	64;"	d
__unused	osdep-darwin.c	34;"	d	file:
__weak	compat.h	73;"	d
_bit_byte	compat/bitstring.h	52;"	d
_bit_mask	compat/bitstring.h	56;"	d
acs	tmux.h	/^	char		 acs[UCHAR_MAX + 1][2];$/;"	m	struct:tty_term
active	tmux.h	/^	struct screen		*active;$/;"	m	struct:status_line	typeref:struct:status_line::screen
active	tmux.h	/^	struct window_pane *active;$/;"	m	struct:window	typeref:struct:window::window_pane
active_point	tmux.h	/^	u_int		 active_point;$/;"	m	struct:window_pane
activity_time	tmux.h	/^	struct timeval	 activity_time;$/;"	m	struct:client	typeref:struct:client::timeval
activity_time	tmux.h	/^	struct timeval	 activity_time;$/;"	m	struct:session	typeref:struct:session::timeval
activity_time	tmux.h	/^	struct timeval	 activity_time;$/;"	m	struct:window	typeref:struct:window::timeval
add	mdoc2man.awk	/^function add(str) {$/;"	f
after	cmd-source-file.c	/^	struct cmdq_item	 *after;$/;"	m	struct:cmd_source_file_data	typeref:struct:cmd_source_file_data::cmdq_item	file:
alerts_action_applies	alerts.c	/^alerts_action_applies(struct winlink *wl, const char *name)$/;"	f	file:
alerts_callback	alerts.c	/^alerts_callback(__unused int fd, __unused short events, __unused void *arg)$/;"	f	file:
alerts_check_activity	alerts.c	/^alerts_check_activity(struct window *w)$/;"	f	file:
alerts_check_all	alerts.c	/^alerts_check_all(struct window *w)$/;"	f	file:
alerts_check_bell	alerts.c	/^alerts_check_bell(struct window *w)$/;"	f	file:
alerts_check_session	alerts.c	/^alerts_check_session(struct session *s)$/;"	f
alerts_check_silence	alerts.c	/^alerts_check_silence(struct window *w)$/;"	f	file:
alerts_enabled	alerts.c	/^alerts_enabled(struct window *w, int flags)$/;"	f	file:
alerts_entry	tmux.h	/^	TAILQ_ENTRY(window) alerts_entry;$/;"	m	struct:window
alerts_fired	alerts.c	/^static int	alerts_fired;$/;"	v	file:
alerts_queue	alerts.c	/^alerts_queue(struct window *w, int flags)$/;"	f
alerts_queued	tmux.h	/^	int		 alerts_queued;$/;"	m	struct:window
alerts_reset	alerts.c	/^alerts_reset(struct window *w)$/;"	f	file:
alerts_reset_all	alerts.c	/^alerts_reset_all(void)$/;"	f
alerts_set_message	alerts.c	/^alerts_set_message(struct winlink *wl, const char *type, const char *option)$/;"	f	file:
alerts_timer	alerts.c	/^alerts_timer(__unused int fd, __unused short events, void *arg)$/;"	f	file:
alerts_timer	tmux.h	/^	struct event	 alerts_timer;$/;"	m	struct:window	typeref:struct:window::event
alias	cmd.c	/^	char			 *alias;$/;"	m	struct:cmd	file:
alias	tmux.h	/^	const char		*alias;$/;"	m	struct:cmd_entry
align	tmux.h	/^	enum style_align	align;$/;"	m	struct:style	typeref:enum:style::style_align
all_window_modes	window.c	/^const struct window_mode *all_window_modes[] = {$/;"	v	typeref:struct:window_mode
all_window_panes	window.c	/^struct window_pane_tree all_window_panes;$/;"	v	typeref:struct:window_pane_tree
alternative_name	tmux.h	/^	const char		 *alternative_name;$/;"	m	struct:options_table_entry
areshell	tmux.c	/^areshell(const char *shell)$/;"	f	file:
arg	popup.c	/^	void			 *arg;$/;"	m	struct:popup_data	file:
arg	popup.c	/^	void			*arg;$/;"	m	struct:popup_editor	file:
arg	proc.c	/^	void		 *arg;$/;"	m	struct:tmuxpeer	file:
arg	tmux.h	/^	void			*arg;$/;"	m	struct:screen_write_ctx
arg	tmux.h	/^	void			*arg;$/;"	m	struct:tty_ctx
argc	cmd.c	/^	int			  argc;$/;"	m	struct:cmd	file:
argc	format.c	/^	int	  argc;$/;"	m	struct:format_modifier	file:
argc	tmux.h	/^	int			  argc;$/;"	m	struct:args
argc	tmux.h	/^	int			  argc;$/;"	m	struct:spawn_context
argc	tmux.h	/^	int		 argc;$/;"	m	struct:window_pane
argc	tmux.h	/^	int	argc;$/;"	m	struct:msg_command
args	cmd.c	/^	struct args		 *args;$/;"	m	struct:cmd	typeref:struct:cmd::args	file:
args	tmux.h	/^	} args;$/;"	m	struct:cmd_entry	typeref:struct:cmd_entry::__anon13
args	tmux.h	/^struct args {$/;"	s
args	window-copy.c	/^	struct args			*args;$/;"	m	struct:window_copy_cmd_state	typeref:struct:window_copy_cmd_state::args	file:
args_cmp	arguments.c	/^args_cmp(struct args_entry *a1, struct args_entry *a2)$/;"	f	file:
args_entry	arguments.c	/^struct args_entry {$/;"	s	file:
args_escape	arguments.c	/^args_escape(const char *s)$/;"	f
args_find	arguments.c	/^args_find(struct args *args, u_char flag)$/;"	f	file:
args_first	arguments.c	/^args_first(struct args *args, struct args_entry **entry)$/;"	f
args_first_value	arguments.c	/^args_first_value(struct args *args, u_char flag, struct args_value **value)$/;"	f
args_free	arguments.c	/^args_free(struct args *args)$/;"	f
args_get	arguments.c	/^args_get(struct args *args, u_char flag)$/;"	f
args_has	arguments.c	/^args_has(struct args *args, u_char flag)$/;"	f
args_next	arguments.c	/^args_next(struct args_entry **entry)$/;"	f
args_next_value	arguments.c	/^args_next_value(struct args_value **value)$/;"	f
args_parse	arguments.c	/^args_parse(const char *template_, int argc, char **argv)$/;"	f
args_percentage	arguments.c	/^args_percentage(struct args *args, u_char flag, long long minval,$/;"	f
args_print	arguments.c	/^args_print(struct args *args)$/;"	f
args_print_add	arguments.c	/^args_print_add(char **buf, size_t *len, const char *fmt, ...)$/;"	f
args_print_add_argument	arguments.c	/^args_print_add_argument(char **buf, size_t *len, const char *argument)$/;"	f	file:
args_print_add_value	arguments.c	/^args_print_add_value(char **buf, size_t *len, struct args_entry *entry,$/;"	f	file:
args_set	arguments.c	/^args_set(struct args *args, u_char flag, const char *s)$/;"	f
args_string_percentage	arguments.c	/^args_string_percentage(const char *value, long long minval, long long maxval,$/;"	f
args_strtonum	arguments.c	/^args_strtonum(struct args *args, u_char flag, long long minval,$/;"	f
args_value	arguments.c	/^struct args_value {$/;"	s	file:
argument	cmd-parse.y	/^argument	: TMUX_YACC_TOKEN$/;"	l
argument	format-draw.c	/^	u_int				 argument;$/;"	m	struct:format_range	file:
argument	tmux.h	/^	u_int			 argument;$/;"	m	struct:style_range
argument_statements	cmd-parse.y	/^argument_statements	: statement '}'$/;"	l
arguments	cmd-parse.y	/^arguments	: argument$/;"	l
argv	cmd.c	/^	char			**argv;$/;"	m	struct:cmd	file:
argv	format.c	/^	char	**argv;$/;"	m	struct:format_modifier	file:
argv	tmux.h	/^	char			**argv;$/;"	m	struct:args
argv	tmux.h	/^	char			**argv;$/;"	m	struct:spawn_context
argv	tmux.h	/^	char	       **argv;$/;"	m	struct:window_pane
arrange	layout-set.c	/^	void	      	(*arrange)(struct window *);$/;"	m	struct:__anon7	file:
array	tmux.h	/^	struct options_array		  array;$/;"	m	union:options_value	typeref:struct:options_value::options_array
asprintf	compat/asprintf.c	/^asprintf(char **ret, const char *fmt, ...)$/;"	f
assignment	cmd-parse.y	/^assignment	: TMUX_YACC_EQUALS$/;"	l
attached	tmux.h	/^	u_int		 attached;$/;"	m	struct:session
attr	tmux.h	/^			u_char	attr;$/;"	m	struct:grid_cell_entry::__anon11::__anon12
attr	tmux.h	/^	u_short			attr;$/;"	m	struct:grid_cell
attr	tmux.h	/^	u_short			attr;$/;"	m	struct:grid_extd_entry
attributes_fromstring	attributes.c	/^attributes_fromstring(const char *str)$/;"	f
attributes_tostring	attributes.c	/^attributes_tostring(int attr)$/;"	f
automatic	paste.c	/^	int		 automatic;$/;"	m	struct:paste_buffer	file:
b	tmux.h	/^	u_int		b;$/;"	m	struct:mouse_event
b64_ntop	base64.h	1;"	d
b64_ntop	compat/base64.c	/^b64_ntop$/;"	f
b64_pton	base64.h	2;"	d
b64_pton	compat/base64.c	/^b64_pton$/;"	f
backing	window-copy.c	/^	struct screen	*backing;$/;"	m	struct:window_copy_mode_data	typeref:struct:window_copy_mode_data::screen	file:
backing_written	window-copy.c	/^	int		 backing_written; \/* backing display started *\/$/;"	m	struct:window_copy_mode_data	file:
base	tmux.h	/^	struct screen	 base;$/;"	m	struct:window_pane	typeref:struct:window_pane::screen
base_offset	tmux.h	/^	size_t		 base_offset;$/;"	m	struct:window_pane
bg	screen-write.c	/^	u_int					 bg;$/;"	m	struct:screen_write_collect_line	file:
bg	screen-write.c	/^	u_int			 bg;$/;"	m	struct:screen_write_collect_item	file:
bg	tmux.h	/^			u_char	bg;$/;"	m	struct:grid_cell_entry::__anon11::__anon12
bg	tmux.h	/^	int			bg;$/;"	m	struct:grid_cell
bg	tmux.h	/^	int			bg;$/;"	m	struct:grid_extd_entry
bg	tmux.h	/^	int		 bg;$/;"	m	struct:window_pane
bg	tmux.h	/^	u_int			 bg;$/;"	m	struct:screen_write_ctx
bg	tmux.h	/^	u_int		 bg;$/;"	m	struct:tty_ctx
bigger	tmux.h	/^	int		 bigger;$/;"	m	struct:tty_ctx
bit_alloc	compat/bitstring.h	65;"	d
bit_clear	compat/bitstring.h	81;"	d
bit_decl	compat/bitstring.h	69;"	d
bit_ffc	compat/bitstring.h	105;"	d
bit_ffs	compat/bitstring.h	117;"	d
bit_nclear	compat/bitstring.h	85;"	d
bit_nset	compat/bitstring.h	95;"	d
bit_set	compat/bitstring.h	77;"	d
bit_test	compat/bitstring.h	73;"	d
bitstr_size	compat/bitstring.h	61;"	d
bitstr_t	compat/bitstring.h	/^typedef	unsigned char bitstr_t;$/;"	t
border_gc	tmux.h	/^	struct grid_cell border_gc;$/;"	m	struct:window_pane	typeref:struct:window_pane::grid_cell
border_gc_set	tmux.h	/^	int		 border_gc_set;$/;"	m	struct:window_pane
buf	compat/imsg.h	/^	unsigned char		 buf[IBUF_READ_SIZE];$/;"	m	struct:ibuf_read
buf	compat/imsg.h	/^	unsigned char		*buf;$/;"	m	struct:ibuf
buffer	tmux.h	/^	struct evbuffer			*buffer;$/;"	m	struct:client_file	typeref:struct:client_file::evbuffer
bufs	compat/imsg.h	/^	TAILQ_HEAD(, ibuf)	 bufs;$/;"	m	struct:msgbuf
buildcb	mode-tree.c	/^	mode_tree_build_cb        buildcb;$/;"	m	struct:mode_tree_data	file:
c	format.c	/^	struct client		*c;$/;"	m	struct:format_tree	typeref:struct:format_tree::client	file:
c	mode-tree.c	/^	struct client			*c;$/;"	m	struct:mode_tree_menu	typeref:struct:mode_tree_menu::client	file:
c	popup.c	/^	struct client		 *c;$/;"	m	struct:popup_data	typeref:struct:popup_data::client	file:
c	status.c	/^	struct client	 *c;$/;"	m	struct:status_prompt_menu	typeref:struct:status_prompt_menu::client	file:
c	tmux.h	/^	struct client			*c;$/;"	m	struct:client_file	typeref:struct:client_file::client
c	tmux.h	/^	struct client		*c;$/;"	m	struct:cmd_parse_input	typeref:struct:cmd_parse_input::client
c	tmux.h	/^	struct client	*c;$/;"	m	struct:screen_redraw_ctx	typeref:struct:screen_redraw_ctx::client
c	window-client.c	/^	struct client	*c;$/;"	m	struct:window_client_itemdata	typeref:struct:window_client_itemdata::client	file:
c	window-copy.c	/^	struct client			*c;$/;"	m	struct:window_copy_cmd_state	typeref:struct:window_copy_cmd_state::client	file:
cached	options.c	/^	int					 cached;$/;"	m	struct:options_entry	file:
cached_active_gc	tmux.h	/^	struct grid_cell cached_active_gc;$/;"	m	struct:window_pane	typeref:struct:window_pane::grid_cell
cached_gc	tmux.h	/^	struct grid_cell cached_gc;$/;"	m	struct:window_pane	typeref:struct:window_pane::grid_cell
capabilities	tty-features.c	/^	const char	**capabilities;$/;"	m	struct:tty_feature	file:
cb	cmd-queue.c	/^	cmdq_cb			 cb;$/;"	m	struct:cmdq_item	file:
cb	format.c	/^	format_cb		 cb;$/;"	m	struct:format_entry	file:
cb	menu.c	/^	menu_choice_cb		 cb;$/;"	m	struct:menu_data	file:
cb	popup.c	/^	popup_close_cb		  cb;$/;"	m	struct:popup_data	file:
cb	popup.c	/^	popup_finish_edit_cb	 cb;$/;"	m	struct:popup_editor	file:
cb	tmux.h	/^	client_file_cb			 cb;$/;"	m	struct:client_file
ccolour	tmux.h	/^	char			*ccolour;	\/* cursor colour string *\/$/;"	m	struct:screen
ccolour	tmux.h	/^	char		*ccolour;$/;"	m	struct:tty
cell	input.c	/^	struct grid_cell	cell;$/;"	m	struct:input_cell	typeref:struct:input_cell::grid_cell	file:
cell	input.c	/^	struct input_cell	cell;$/;"	m	struct:input_ctx	typeref:struct:input_ctx::input_cell	file:
cell	screen.c	/^	struct grid_cell cell;$/;"	m	struct:screen_sel	typeref:struct:screen_sel::grid_cell	file:
cell	tmux.h	/^	const struct grid_cell	*cell;$/;"	m	struct:tty_ctx	typeref:struct:tty_ctx::grid_cell
cell	tmux.h	/^	struct grid_cell cell;$/;"	m	struct:tty	typeref:struct:tty::grid_cell
celldata	tmux.h	/^	struct grid_cell_entry	*celldata;$/;"	m	struct:grid_line	typeref:struct:grid_line::grid_cell_entry
cells	tmux.h	/^	struct layout_cells cells;$/;"	m	struct:layout_cell	typeref:struct:layout_cell::layout_cells
cells	tmux.h	/^	u_int			 cells;$/;"	m	struct:screen_write_ctx
cellsize	tmux.h	/^	u_int			 cellsize;$/;"	m	struct:grid_line
cellused	tmux.h	/^	u_int			 cellused;$/;"	m	struct:grid_line
cfg_add_cause	cfg.c	/^cfg_add_cause(const char *fmt, ...)$/;"	f
cfg_causes	cfg.c	/^static char		**cfg_causes;$/;"	v	file:
cfg_client	cfg.c	/^struct client		 *cfg_client;$/;"	v	typeref:struct:client
cfg_client_done	cfg.c	/^cfg_client_done(__unused struct cmdq_item *item, __unused void *data)$/;"	f	file:
cfg_done	cfg.c	/^cfg_done(__unused struct cmdq_item *item, __unused void *data)$/;"	f	file:
cfg_file	cfg.c	/^static char		 *cfg_file;$/;"	v	file:
cfg_finished	cfg.c	/^int			  cfg_finished;$/;"	v
cfg_item	cfg.c	/^static struct cmdq_item	 *cfg_item;$/;"	v	typeref:struct:cmdq_item	file:
cfg_ncauses	cfg.c	/^static u_int		  cfg_ncauses;$/;"	v	file:
cfg_print_causes	cfg.c	/^cfg_print_causes(struct cmdq_item *item)$/;"	f
cfg_show_causes	cfg.c	/^cfg_show_causes(struct session *s)$/;"	f
cfmakeraw	compat/cfmakeraw.c	/^cfmakeraw(struct termios *tio)$/;"	f
ch	input.c	/^	int			ch;$/;"	m	struct:input_ctx	file:
ch	input.c	/^	int		ch;$/;"	m	struct:input_table_entry	file:
ch	tmux.h	/^	char		 ch;$/;"	m	struct:tty_key
change	window-customize.c	/^	enum window_customize_change		  change;$/;"	m	struct:window_customize_modedata	typeref:enum:window_customize_modedata::window_customize_change	file:
check	regress/style-trim.sh	/^check() {$/;"	f
check_window_name	names.c	/^check_window_name(struct window *w)$/;"	f
checkshell	tmux.c	/^checkshell(const char *shell)$/;"	f
children	mode-tree.c	/^	struct mode_tree_list		 children;$/;"	m	struct:mode_tree_item	typeref:struct:mode_tree_item::mode_tree_list	file:
children	mode-tree.c	/^	struct mode_tree_list	  children;$/;"	m	struct:mode_tree_data	typeref:struct:mode_tree_data::mode_tree_list	file:
choice	menu.c	/^	int			 choice;$/;"	m	struct:menu_data	file:
choices	tmux.h	/^	const char		**choices;$/;"	m	struct:options_table_entry
clear	window-copy.c	/^	enum window_copy_cmd_clear	  clear;$/;"	m	struct:__anon22	typeref:enum:__anon22::window_copy_cmd_clear	file:
click_button	tmux.h	/^	u_int		 click_button;$/;"	m	struct:client
click_event	tmux.h	/^	struct mouse_event click_event;$/;"	m	struct:client	typeref:struct:client::mouse_event
click_timer	tmux.h	/^	struct event	 click_timer;$/;"	m	struct:client	typeref:struct:client::event
client	cmd-if-shell.c	/^	struct client		*client;$/;"	m	struct:cmd_if_shell_data	typeref:struct:cmd_if_shell_data::client	file:
client	cmd-load-buffer.c	/^	struct client		*client;$/;"	m	struct:cmd_load_buffer_data	typeref:struct:cmd_load_buffer_data::client	file:
client	cmd-queue.c	/^	struct client		*client;$/;"	m	struct:cmdq_item	typeref:struct:cmdq_item::client	file:
client	format.c	/^	struct client		*client;$/;"	m	struct:format_job	typeref:struct:format_job::client	file:
client	format.c	/^	struct client		*client;$/;"	m	struct:format_tree	typeref:struct:format_tree::client	file:
client	notify.c	/^	struct client		*client;$/;"	m	struct:notify_entry	typeref:struct:notify_entry::client	file:
client	tmux.h	/^	struct client	*client;$/;"	m	struct:tty	typeref:struct:tty::client
client	tmux.h	/^struct client {$/;"	s
client_attached	client.c	/^static int		 client_attached;$/;"	v	file:
client_connect	client.c	/^client_connect(struct event_base *base, const char *path, uint64_t flags)$/;"	f	file:
client_dispatch	client.c	/^client_dispatch(struct imsg *imsg, __unused void *arg)$/;"	f	file:
client_dispatch_attached	client.c	/^client_dispatch_attached(struct imsg *imsg)$/;"	f	file:
client_dispatch_exit_message	client.c	/^client_dispatch_exit_message(char *data, size_t datalen)$/;"	f	file:
client_dispatch_wait	client.c	/^client_dispatch_wait(struct imsg *imsg)$/;"	f	file:
client_exec	client.c	/^client_exec(const char *shell, const char *shellcmd)$/;"	f	file:
client_execcmd	client.c	/^static const char	*client_execcmd;$/;"	v	file:
client_execshell	client.c	/^static const char	*client_execshell;$/;"	v	file:
client_exit	client.c	/^client_exit(void)$/;"	f	file:
client_exit_message	client.c	/^client_exit_message(void)$/;"	f
client_exitflag	client.c	/^static int		 client_exitflag;$/;"	v	file:
client_exitmessage	client.c	/^static char		*client_exitmessage;$/;"	v	file:
client_exitreason	client.c	/^} client_exitreason = CLIENT_EXIT_NONE;$/;"	v	typeref:enum:__anon1	file:
client_exitsession	client.c	/^static const char	*client_exitsession;$/;"	v	file:
client_exittype	client.c	/^static enum msgtype	 client_exittype;$/;"	v	typeref:enum:msgtype	file:
client_exitval	client.c	/^static int		 client_exitval;$/;"	v	file:
client_file	tmux.h	/^struct client_file {$/;"	s
client_file_cb	tmux.h	/^typedef void (*client_file_cb) (struct client *, const char *, int, int,$/;"	t
client_files	client.c	/^static struct client_files client_files = RB_INITIALIZER(&client_files);$/;"	v	typeref:struct:client_files	file:
client_flags	client.c	/^static uint64_t		 client_flags;$/;"	v	file:
client_get_lock	client.c	/^client_get_lock(char *lockfile)$/;"	f	file:
client_main	client.c	/^client_main(struct event_base *base, int argc, char **argv, uint64_t flags,$/;"	f
client_peer	client.c	/^static struct tmuxpeer	*client_peer;$/;"	v	typeref:struct:tmuxpeer	file:
client_proc	client.c	/^static struct tmuxproc	*client_proc;$/;"	v	typeref:struct:tmuxproc	file:
client_read_callback	client.c	/^client_read_callback(__unused struct bufferevent *bev, void *arg)$/;"	f	file:
client_read_error_callback	client.c	/^client_read_error_callback(__unused struct bufferevent *bev,$/;"	f	file:
client_read_open	client.c	/^client_read_open(void *data, size_t datalen)$/;"	f	file:
client_send_identify	client.c	/^client_send_identify(const char *ttynam, const char *cwd, int feat)$/;"	f	file:
client_signal	client.c	/^client_signal(int sig)$/;"	f	file:
client_suspended	client.c	/^static int		 client_suspended;$/;"	v	file:
client_window	tmux.h	/^struct client_window {$/;"	s
client_write_callback	client.c	/^client_write_callback(__unused struct bufferevent *bev, void *arg)$/;"	f	file:
client_write_close	client.c	/^client_write_close(void *data, size_t datalen)$/;"	f	file:
client_write_data	client.c	/^client_write_data(void *data, size_t datalen)$/;"	f	file:
client_write_error_callback	client.c	/^client_write_error_callback(__unused struct bufferevent *bev,$/;"	f	file:
client_write_open	client.c	/^client_write_open(void *data, size_t datalen)$/;"	f	file:
clients	server.c	/^struct clients		 clients;$/;"	v	typeref:struct:clients
clients_calculate_size	resize.c	/^clients_calculate_size(int type, int current, struct session *s,$/;"	f	file:
clients_with_window	resize.c	/^clients_with_window(struct window *w)$/;"	f	file:
close	win32_headers/win32_posix.h	19;"	d
closed	tmux.h	/^	int				 closed;$/;"	m	struct:client_file
closefrom	compat/closefrom.c	/^closefrom(int lowfd)$/;"	f
closefrom_fallback	compat/closefrom.c	/^closefrom_fallback(int lowfd)$/;"	f	file:
cmd	cmd-confirm-before.c	/^	char	*cmd;$/;"	m	struct:cmd_confirm_before_data	file:
cmd	cmd-queue.c	/^	struct cmd		*cmd;$/;"	m	struct:cmdq_item	typeref:struct:cmdq_item::cmd	file:
cmd	cmd-run-shell.c	/^	char			*cmd;$/;"	m	struct:cmd_run_shell_data	file:
cmd	cmd.c	/^struct cmd {$/;"	s	file:
cmd	format.c	/^	const char		*cmd;$/;"	m	struct:format_job	file:
cmd	job.c	/^	char			*cmd;$/;"	m	struct:job	file:
cmd	popup.c	/^	char			 *cmd;$/;"	m	struct:popup_data	file:
cmd_append_argv	cmd.c	/^cmd_append_argv(int *argc, char ***argv, char *arg)$/;"	f
cmd_attach_session	cmd-attach-session.c	/^cmd_attach_session(struct cmdq_item *item, const char *tflag, int dflag,$/;"	f
cmd_attach_session_entry	cmd-attach-session.c	/^const struct cmd_entry cmd_attach_session_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_attach_session_exec	cmd-attach-session.c	/^cmd_attach_session_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_bind_key_entry	cmd-bind-key.c	/^const struct cmd_entry cmd_bind_key_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_bind_key_exec	cmd-bind-key.c	/^cmd_bind_key_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_break_pane_entry	cmd-break-pane.c	/^const struct cmd_entry cmd_break_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_break_pane_exec	cmd-break-pane.c	/^cmd_break_pane_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_capture_pane_append	cmd-capture-pane.c	/^cmd_capture_pane_append(char *buf, size_t *len, char *line, size_t linelen)$/;"	f	file:
cmd_capture_pane_entry	cmd-capture-pane.c	/^const struct cmd_entry cmd_capture_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_capture_pane_exec	cmd-capture-pane.c	/^cmd_capture_pane_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_capture_pane_history	cmd-capture-pane.c	/^cmd_capture_pane_history(struct args *args, struct cmdq_item *item,$/;"	f	file:
cmd_capture_pane_pending	cmd-capture-pane.c	/^cmd_capture_pane_pending(struct args *args, struct window_pane *wp,$/;"	f	file:
cmd_choose_buffer_entry	cmd-choose-tree.c	/^const struct cmd_entry cmd_choose_buffer_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_choose_client_entry	cmd-choose-tree.c	/^const struct cmd_entry cmd_choose_client_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_choose_tree_entry	cmd-choose-tree.c	/^const struct cmd_entry cmd_choose_tree_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_choose_tree_exec	cmd-choose-tree.c	/^cmd_choose_tree_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_clear_history_entry	cmd-capture-pane.c	/^const struct cmd_entry cmd_clear_history_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_clock_mode_entry	cmd-copy-mode.c	/^const struct cmd_entry cmd_clock_mode_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_command_prompt_callback	cmd-command-prompt.c	/^cmd_command_prompt_callback(struct client *c, void *data, const char *s,$/;"	f	file:
cmd_command_prompt_cdata	cmd-command-prompt.c	/^struct cmd_command_prompt_cdata {$/;"	s	file:
cmd_command_prompt_entry	cmd-command-prompt.c	/^const struct cmd_entry cmd_command_prompt_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_command_prompt_exec	cmd-command-prompt.c	/^cmd_command_prompt_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_command_prompt_free	cmd-command-prompt.c	/^cmd_command_prompt_free(void *data)$/;"	f	file:
cmd_confirm_before_callback	cmd-confirm-before.c	/^cmd_confirm_before_callback(struct client *c, void *data, const char *s,$/;"	f	file:
cmd_confirm_before_data	cmd-confirm-before.c	/^struct cmd_confirm_before_data {$/;"	s	file:
cmd_confirm_before_entry	cmd-confirm-before.c	/^const struct cmd_entry cmd_confirm_before_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_confirm_before_exec	cmd-confirm-before.c	/^cmd_confirm_before_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_confirm_before_free	cmd-confirm-before.c	/^cmd_confirm_before_free(void *data)$/;"	f	file:
cmd_copy_argv	cmd.c	/^cmd_copy_argv(int argc, char **argv)$/;"	f
cmd_copy_mode_entry	cmd-copy-mode.c	/^const struct cmd_entry cmd_copy_mode_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_copy_mode_exec	cmd-copy-mode.c	/^cmd_copy_mode_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_customize_mode_entry	cmd-choose-tree.c	/^const struct cmd_entry cmd_customize_mode_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_delete_buffer_entry	cmd-set-buffer.c	/^const struct cmd_entry cmd_delete_buffer_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_detach_client_entry	cmd-detach-client.c	/^const struct cmd_entry cmd_detach_client_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_detach_client_exec	cmd-detach-client.c	/^cmd_detach_client_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_display_menu_entry	cmd-display-menu.c	/^const struct cmd_entry cmd_display_menu_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_display_menu_exec	cmd-display-menu.c	/^cmd_display_menu_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_display_menu_get_position	cmd-display-menu.c	/^cmd_display_menu_get_position(struct client *tc, struct cmdq_item *item,$/;"	f	file:
cmd_display_message_each	cmd-display-message.c	/^cmd_display_message_each(const char *key, const char *value, void *arg)$/;"	f	file:
cmd_display_message_entry	cmd-display-message.c	/^const struct cmd_entry cmd_display_message_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_display_message_exec	cmd-display-message.c	/^cmd_display_message_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_display_panes_data	cmd-display-panes.c	/^struct cmd_display_panes_data {$/;"	s	file:
cmd_display_panes_draw	cmd-display-panes.c	/^cmd_display_panes_draw(struct client *c, struct screen_redraw_ctx *ctx)$/;"	f	file:
cmd_display_panes_draw_pane	cmd-display-panes.c	/^cmd_display_panes_draw_pane(struct screen_redraw_ctx *ctx,$/;"	f	file:
cmd_display_panes_entry	cmd-display-panes.c	/^const struct cmd_entry cmd_display_panes_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_display_panes_exec	cmd-display-panes.c	/^cmd_display_panes_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_display_panes_free	cmd-display-panes.c	/^cmd_display_panes_free(struct client *c)$/;"	f	file:
cmd_display_panes_key	cmd-display-panes.c	/^cmd_display_panes_key(struct client *c, struct key_event *event)$/;"	f	file:
cmd_display_popup_entry	cmd-display-menu.c	/^const struct cmd_entry cmd_display_popup_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_display_popup_exec	cmd-display-menu.c	/^cmd_display_popup_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_else	cmd-if-shell.c	/^	char			*cmd_else;$/;"	m	struct:cmd_if_shell_data	file:
cmd_entry	tmux.h	/^struct cmd_entry {$/;"	s
cmd_entry_flag	tmux.h	/^struct cmd_entry_flag {$/;"	s
cmd_find	cmd.c	/^cmd_find(const char *name, char **cause)$/;"	f	file:
cmd_find_best_client	cmd-find.c	/^cmd_find_best_client(struct session *s)$/;"	f
cmd_find_best_session	cmd-find.c	/^cmd_find_best_session(struct session **slist, u_int ssize, int flags)$/;"	f	file:
cmd_find_best_session_with_window	cmd-find.c	/^cmd_find_best_session_with_window(struct cmd_find_state *fs)$/;"	f	file:
cmd_find_best_winlink_with_window	cmd-find.c	/^cmd_find_best_winlink_with_window(struct cmd_find_state *fs)$/;"	f	file:
cmd_find_clear_state	cmd-find.c	/^cmd_find_clear_state(struct cmd_find_state *fs, int flags)$/;"	f
cmd_find_client	cmd-find.c	/^cmd_find_client(struct cmdq_item *item, const char *target, int quiet)$/;"	f
cmd_find_client_better	cmd-find.c	/^cmd_find_client_better(struct client *c, struct client *than)$/;"	f	file:
cmd_find_copy_state	cmd-find.c	/^cmd_find_copy_state(struct cmd_find_state *dst, struct cmd_find_state *src)$/;"	f
cmd_find_current_client	cmd-find.c	/^cmd_find_current_client(struct cmdq_item *item, int quiet)$/;"	f	file:
cmd_find_empty_state	cmd-find.c	/^cmd_find_empty_state(struct cmd_find_state *fs)$/;"	f
cmd_find_from_client	cmd-find.c	/^cmd_find_from_client(struct cmd_find_state *fs, struct client *c, int flags)$/;"	f
cmd_find_from_mouse	cmd-find.c	/^cmd_find_from_mouse(struct cmd_find_state *fs, struct mouse_event *m, int flags)$/;"	f
cmd_find_from_nothing	cmd-find.c	/^cmd_find_from_nothing(struct cmd_find_state *fs, int flags)$/;"	f
cmd_find_from_pane	cmd-find.c	/^cmd_find_from_pane(struct cmd_find_state *fs, struct window_pane *wp, int flags)$/;"	f
cmd_find_from_session	cmd-find.c	/^cmd_find_from_session(struct cmd_find_state *fs, struct session *s, int flags)$/;"	f
cmd_find_from_session_window	cmd-find.c	/^cmd_find_from_session_window(struct cmd_find_state *fs, struct session *s,$/;"	f
cmd_find_from_window	cmd-find.c	/^cmd_find_from_window(struct cmd_find_state *fs, struct window *w, int flags)$/;"	f
cmd_find_from_winlink	cmd-find.c	/^cmd_find_from_winlink(struct cmd_find_state *fs, struct winlink *wl, int flags)$/;"	f
cmd_find_from_winlink_pane	cmd-find.c	/^cmd_find_from_winlink_pane(struct cmd_find_state *fs, struct winlink *wl,$/;"	f
cmd_find_get_pane	cmd-find.c	/^cmd_find_get_pane(struct cmd_find_state *fs, const char *pane, int only)$/;"	f	file:
cmd_find_get_pane_with_session	cmd-find.c	/^cmd_find_get_pane_with_session(struct cmd_find_state *fs, const char *pane)$/;"	f	file:
cmd_find_get_pane_with_window	cmd-find.c	/^cmd_find_get_pane_with_window(struct cmd_find_state *fs, const char *pane)$/;"	f	file:
cmd_find_get_session	cmd-find.c	/^cmd_find_get_session(struct cmd_find_state *fs, const char *session)$/;"	f	file:
cmd_find_get_window	cmd-find.c	/^cmd_find_get_window(struct cmd_find_state *fs, const char *window, int only)$/;"	f	file:
cmd_find_get_window_with_session	cmd-find.c	/^cmd_find_get_window_with_session(struct cmd_find_state *fs, const char *window)$/;"	f	file:
cmd_find_inside_pane	cmd-find.c	/^cmd_find_inside_pane(struct client *c)$/;"	f	file:
cmd_find_log_state	cmd-find.c	/^cmd_find_log_state(const char *prefix, struct cmd_find_state *fs)$/;"	f	file:
cmd_find_map_table	cmd-find.c	/^cmd_find_map_table(const char *table[][2], const char *s)$/;"	f	file:
cmd_find_pane_table	cmd-find.c	/^static const char *cmd_find_pane_table[][2] = {$/;"	v	file:
cmd_find_session_better	cmd-find.c	/^cmd_find_session_better(struct session *s, struct session *than, int flags)$/;"	f	file:
cmd_find_session_table	cmd-find.c	/^static const char *cmd_find_session_table[][2] = {$/;"	v	file:
cmd_find_state	tmux.h	/^struct cmd_find_state {$/;"	s
cmd_find_target	cmd-find.c	/^cmd_find_target(struct cmd_find_state *fs, struct cmdq_item *item,$/;"	f
cmd_find_type	tmux.h	/^enum cmd_find_type {$/;"	g
cmd_find_valid_state	cmd-find.c	/^cmd_find_valid_state(struct cmd_find_state *fs)$/;"	f
cmd_find_window_entry	cmd-find-window.c	/^const struct cmd_entry cmd_find_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_find_window_exec	cmd-find-window.c	/^cmd_find_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_find_window_table	cmd-find.c	/^static const char *cmd_find_window_table[][2] = {$/;"	v	file:
cmd_free	cmd.c	/^cmd_free(struct cmd *cmd)$/;"	f
cmd_free_argv	cmd.c	/^cmd_free_argv(int argc, char **argv)$/;"	f
cmd_get_alias	cmd.c	/^cmd_get_alias(const char *name)$/;"	f
cmd_get_args	cmd.c	/^cmd_get_args(struct cmd *cmd)$/;"	f
cmd_get_entry	cmd.c	/^cmd_get_entry(struct cmd *cmd)$/;"	f
cmd_get_group	cmd.c	/^cmd_get_group(struct cmd *cmd)$/;"	f
cmd_get_source	cmd.c	/^cmd_get_source(struct cmd *cmd, const char **file, u_int *line)$/;"	f
cmd_has_session_entry	cmd-new-session.c	/^const struct cmd_entry cmd_has_session_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_if	cmd-if-shell.c	/^	char			*cmd_if;$/;"	m	struct:cmd_if_shell_data	file:
cmd_if_shell_callback	cmd-if-shell.c	/^cmd_if_shell_callback(struct job *job)$/;"	f	file:
cmd_if_shell_data	cmd-if-shell.c	/^struct cmd_if_shell_data {$/;"	s	file:
cmd_if_shell_entry	cmd-if-shell.c	/^const struct cmd_entry cmd_if_shell_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_if_shell_exec	cmd-if-shell.c	/^cmd_if_shell_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_if_shell_free	cmd-if-shell.c	/^cmd_if_shell_free(void *data)$/;"	f	file:
cmd_join_pane_entry	cmd-join-pane.c	/^const struct cmd_entry cmd_join_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_join_pane_exec	cmd-join-pane.c	/^cmd_join_pane_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_kill_pane_entry	cmd-kill-pane.c	/^const struct cmd_entry cmd_kill_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_kill_pane_exec	cmd-kill-pane.c	/^cmd_kill_pane_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_kill_server_entry	cmd-kill-server.c	/^const struct cmd_entry cmd_kill_server_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_kill_server_exec	cmd-kill-server.c	/^cmd_kill_server_exec(struct cmd *self, __unused struct cmdq_item *item)$/;"	f	file:
cmd_kill_session_entry	cmd-kill-session.c	/^const struct cmd_entry cmd_kill_session_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_kill_session_exec	cmd-kill-session.c	/^cmd_kill_session_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_kill_window_entry	cmd-kill-window.c	/^const struct cmd_entry cmd_kill_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_kill_window_exec	cmd-kill-window.c	/^cmd_kill_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_last_pane_entry	cmd-select-pane.c	/^const struct cmd_entry cmd_last_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_last_window_entry	cmd-select-window.c	/^const struct cmd_entry cmd_last_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_link_window_entry	cmd-move-window.c	/^const struct cmd_entry cmd_link_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_list	tmux.h	/^struct cmd_list {$/;"	s
cmd_list_all_have	cmd.c	/^cmd_list_all_have(struct cmd_list *cmdlist, int flag)$/;"	f
cmd_list_any_have	cmd.c	/^cmd_list_any_have(struct cmd_list *cmdlist, int flag)$/;"	f
cmd_list_append	cmd.c	/^cmd_list_append(struct cmd_list *cmdlist, struct cmd *cmd)$/;"	f
cmd_list_buffers_entry	cmd-list-buffers.c	/^const struct cmd_entry cmd_list_buffers_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_list_buffers_exec	cmd-list-buffers.c	/^cmd_list_buffers_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_list_clients_entry	cmd-list-clients.c	/^const struct cmd_entry cmd_list_clients_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_list_clients_exec	cmd-list-clients.c	/^cmd_list_clients_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_list_commands_entry	cmd-list-keys.c	/^const struct cmd_entry cmd_list_commands_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_list_first	cmd.c	/^cmd_list_first(struct cmd_list *cmdlist)$/;"	f
cmd_list_free	cmd.c	/^cmd_list_free(struct cmd_list *cmdlist)$/;"	f
cmd_list_keys_commands	cmd-list-keys.c	/^cmd_list_keys_commands(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_list_keys_entry	cmd-list-keys.c	/^const struct cmd_entry cmd_list_keys_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_list_keys_exec	cmd-list-keys.c	/^cmd_list_keys_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_list_keys_get_prefix	cmd-list-keys.c	/^cmd_list_keys_get_prefix(struct args *args, key_code *prefix)$/;"	f	file:
cmd_list_keys_get_width	cmd-list-keys.c	/^cmd_list_keys_get_width(const char *tablename, key_code only)$/;"	f	file:
cmd_list_keys_print_notes	cmd-list-keys.c	/^cmd_list_keys_print_notes(struct cmdq_item *item, struct args *args,$/;"	f	file:
cmd_list_move	cmd.c	/^cmd_list_move(struct cmd_list *cmdlist, struct cmd_list *from)$/;"	f
cmd_list_new	cmd.c	/^cmd_list_new(void)$/;"	f
cmd_list_next	cmd.c	/^cmd_list_next(struct cmd *cmd)$/;"	f
cmd_list_next_group	cmd.c	/^static u_int cmd_list_next_group = 1;$/;"	v	file:
cmd_list_panes_entry	cmd-list-panes.c	/^const struct cmd_entry cmd_list_panes_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_list_panes_exec	cmd-list-panes.c	/^cmd_list_panes_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_list_panes_server	cmd-list-panes.c	/^cmd_list_panes_server(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_list_panes_session	cmd-list-panes.c	/^cmd_list_panes_session(struct cmd *self, struct session *s,$/;"	f	file:
cmd_list_panes_window	cmd-list-panes.c	/^cmd_list_panes_window(struct cmd *self, struct session *s, struct winlink *wl,$/;"	f	file:
cmd_list_print	cmd.c	/^cmd_list_print(struct cmd_list *cmdlist, int escaped)$/;"	f
cmd_list_sessions_entry	cmd-list-sessions.c	/^const struct cmd_entry cmd_list_sessions_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_list_sessions_exec	cmd-list-sessions.c	/^cmd_list_sessions_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_list_windows_entry	cmd-list-windows.c	/^const struct cmd_entry cmd_list_windows_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_list_windows_exec	cmd-list-windows.c	/^cmd_list_windows_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_list_windows_server	cmd-list-windows.c	/^cmd_list_windows_server(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_list_windows_session	cmd-list-windows.c	/^cmd_list_windows_session(struct cmd *self, struct session *s,$/;"	f	file:
cmd_load_buffer_data	cmd-load-buffer.c	/^struct cmd_load_buffer_data {$/;"	s	file:
cmd_load_buffer_done	cmd-load-buffer.c	/^cmd_load_buffer_done(__unused struct client *c, const char *path, int error,$/;"	f	file:
cmd_load_buffer_entry	cmd-load-buffer.c	/^const struct cmd_entry cmd_load_buffer_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_load_buffer_exec	cmd-load-buffer.c	/^cmd_load_buffer_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_lock_client_entry	cmd-lock-server.c	/^const struct cmd_entry cmd_lock_client_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_lock_server_entry	cmd-lock-server.c	/^const struct cmd_entry cmd_lock_server_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_lock_server_exec	cmd-lock-server.c	/^cmd_lock_server_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_lock_session_entry	cmd-lock-server.c	/^const struct cmd_entry cmd_lock_session_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_log_argv	cmd.c	/^cmd_log_argv(int argc, char **argv, const char *fmt, ...)$/;"	f
cmd_mouse_at	cmd.c	/^cmd_mouse_at(struct window_pane *wp, struct mouse_event *m, u_int *xp,$/;"	f
cmd_mouse_pane	cmd.c	/^cmd_mouse_pane(struct mouse_event *m, struct session **sp,$/;"	f
cmd_mouse_window	cmd.c	/^cmd_mouse_window(struct mouse_event *m, struct session **sp)$/;"	f
cmd_move_pane_entry	cmd-join-pane.c	/^const struct cmd_entry cmd_move_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_move_window_entry	cmd-move-window.c	/^const struct cmd_entry cmd_move_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_move_window_exec	cmd-move-window.c	/^cmd_move_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_new_session_entry	cmd-new-session.c	/^const struct cmd_entry cmd_new_session_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_new_session_exec	cmd-new-session.c	/^cmd_new_session_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_new_window_entry	cmd-new-window.c	/^const struct cmd_entry cmd_new_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_new_window_exec	cmd-new-window.c	/^cmd_new_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_next_layout_entry	cmd-select-layout.c	/^const struct cmd_entry cmd_next_layout_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_next_window_entry	cmd-select-window.c	/^const struct cmd_entry cmd_next_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_pack_argv	cmd.c	/^cmd_pack_argv(int argc, char **argv, char *buf, size_t len)$/;"	f
cmd_parse	cmd.c	/^cmd_parse(int argc, char **argv, const char *file, u_int line, char **cause)$/;"	f
cmd_parse_input	tmux.h	/^struct cmd_parse_input {$/;"	s
cmd_parse_result	tmux.h	/^struct cmd_parse_result {$/;"	s
cmd_parse_status	tmux.h	/^enum cmd_parse_status {$/;"	g
cmd_paste_buffer_entry	cmd-paste-buffer.c	/^const struct cmd_entry cmd_paste_buffer_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_paste_buffer_exec	cmd-paste-buffer.c	/^cmd_paste_buffer_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_pipe_pane_entry	cmd-pipe-pane.c	/^const struct cmd_entry cmd_pipe_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_pipe_pane_error_callback	cmd-pipe-pane.c	/^cmd_pipe_pane_error_callback(__unused struct bufferevent *bufev,$/;"	f	file:
cmd_pipe_pane_exec	cmd-pipe-pane.c	/^cmd_pipe_pane_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_pipe_pane_read_callback	cmd-pipe-pane.c	/^cmd_pipe_pane_read_callback(__unused struct bufferevent *bufev, void *data)$/;"	f	file:
cmd_pipe_pane_write_callback	cmd-pipe-pane.c	/^cmd_pipe_pane_write_callback(__unused struct bufferevent *bufev, void *data)$/;"	f	file:
cmd_prepend_argv	cmd.c	/^cmd_prepend_argv(int *argc, char ***argv, char *arg)$/;"	f
cmd_previous_layout_entry	cmd-select-layout.c	/^const struct cmd_entry cmd_previous_layout_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_previous_window_entry	cmd-select-window.c	/^const struct cmd_entry cmd_previous_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_print	cmd.c	/^cmd_print(struct cmd *cmd)$/;"	f
cmd_refresh_client_entry	cmd-refresh-client.c	/^const struct cmd_entry cmd_refresh_client_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_refresh_client_exec	cmd-refresh-client.c	/^cmd_refresh_client_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_refresh_client_update_offset	cmd-refresh-client.c	/^cmd_refresh_client_update_offset(struct client *tc, const char *value)$/;"	f	file:
cmd_refresh_client_update_subscription	cmd-refresh-client.c	/^cmd_refresh_client_update_subscription(struct client *tc, const char *value)$/;"	f	file:
cmd_rename_session_entry	cmd-rename-session.c	/^const struct cmd_entry cmd_rename_session_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_rename_session_exec	cmd-rename-session.c	/^cmd_rename_session_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_rename_window_entry	cmd-rename-window.c	/^const struct cmd_entry cmd_rename_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_rename_window_exec	cmd-rename-window.c	/^cmd_rename_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_resize_pane_entry	cmd-resize-pane.c	/^const struct cmd_entry cmd_resize_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_resize_pane_exec	cmd-resize-pane.c	/^cmd_resize_pane_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_resize_pane_mouse_update	cmd-resize-pane.c	/^cmd_resize_pane_mouse_update(struct client *c, struct mouse_event *m)$/;"	f	file:
cmd_resize_window_entry	cmd-resize-window.c	/^const struct cmd_entry cmd_resize_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_resize_window_exec	cmd-resize-window.c	/^cmd_resize_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_respawn_pane_entry	cmd-respawn-pane.c	/^const struct cmd_entry cmd_respawn_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_respawn_pane_exec	cmd-respawn-pane.c	/^cmd_respawn_pane_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_respawn_window_entry	cmd-respawn-window.c	/^const struct cmd_entry cmd_respawn_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_respawn_window_exec	cmd-respawn-window.c	/^cmd_respawn_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_retval	tmux.h	/^enum cmd_retval {$/;"	g
cmd_rotate_window_entry	cmd-rotate-window.c	/^const struct cmd_entry cmd_rotate_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_rotate_window_exec	cmd-rotate-window.c	/^cmd_rotate_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_run_shell_callback	cmd-run-shell.c	/^cmd_run_shell_callback(struct job *job)$/;"	f	file:
cmd_run_shell_data	cmd-run-shell.c	/^struct cmd_run_shell_data {$/;"	s	file:
cmd_run_shell_entry	cmd-run-shell.c	/^const struct cmd_entry cmd_run_shell_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_run_shell_exec	cmd-run-shell.c	/^cmd_run_shell_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_run_shell_free	cmd-run-shell.c	/^cmd_run_shell_free(void *data)$/;"	f	file:
cmd_run_shell_print	cmd-run-shell.c	/^cmd_run_shell_print(struct job *job, const char *msg)$/;"	f	file:
cmd_run_shell_timer	cmd-run-shell.c	/^cmd_run_shell_timer(__unused int fd, __unused short events, void* arg)$/;"	f	file:
cmd_save_buffer_done	cmd-save-buffer.c	/^cmd_save_buffer_done(__unused struct client *c, const char *path, int error,$/;"	f	file:
cmd_save_buffer_entry	cmd-save-buffer.c	/^const struct cmd_entry cmd_save_buffer_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_save_buffer_exec	cmd-save-buffer.c	/^cmd_save_buffer_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_select_layout_entry	cmd-select-layout.c	/^const struct cmd_entry cmd_select_layout_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_select_layout_exec	cmd-select-layout.c	/^cmd_select_layout_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_select_pane_entry	cmd-select-pane.c	/^const struct cmd_entry cmd_select_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_select_pane_exec	cmd-select-pane.c	/^cmd_select_pane_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_select_pane_redraw	cmd-select-pane.c	/^cmd_select_pane_redraw(struct window *w)$/;"	f	file:
cmd_select_window_entry	cmd-select-window.c	/^const struct cmd_entry cmd_select_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_select_window_exec	cmd-select-window.c	/^cmd_select_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_send_keys_entry	cmd-send-keys.c	/^const struct cmd_entry cmd_send_keys_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_send_keys_exec	cmd-send-keys.c	/^cmd_send_keys_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_send_keys_inject_key	cmd-send-keys.c	/^cmd_send_keys_inject_key(struct cmdq_item *item, struct cmdq_item *after,$/;"	f	file:
cmd_send_keys_inject_string	cmd-send-keys.c	/^cmd_send_keys_inject_string(struct cmdq_item *item, struct cmdq_item *after,$/;"	f	file:
cmd_send_prefix_entry	cmd-send-keys.c	/^const struct cmd_entry cmd_send_prefix_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_set_buffer_entry	cmd-set-buffer.c	/^const struct cmd_entry cmd_set_buffer_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_set_buffer_exec	cmd-set-buffer.c	/^cmd_set_buffer_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_set_environment_entry	cmd-set-environment.c	/^const struct cmd_entry cmd_set_environment_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_set_environment_exec	cmd-set-environment.c	/^cmd_set_environment_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_set_hook_entry	cmd-set-option.c	/^const struct cmd_entry cmd_set_hook_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_set_option_entry	cmd-set-option.c	/^const struct cmd_entry cmd_set_option_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_set_option_exec	cmd-set-option.c	/^cmd_set_option_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_set_window_option_entry	cmd-set-option.c	/^const struct cmd_entry cmd_set_window_option_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_show_buffer_entry	cmd-save-buffer.c	/^const struct cmd_entry cmd_show_buffer_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_show_environment_entry	cmd-show-environment.c	/^const struct cmd_entry cmd_show_environment_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_show_environment_escape	cmd-show-environment.c	/^cmd_show_environment_escape(struct environ_entry *envent)$/;"	f	file:
cmd_show_environment_exec	cmd-show-environment.c	/^cmd_show_environment_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_show_environment_print	cmd-show-environment.c	/^cmd_show_environment_print(struct cmd *self, struct cmdq_item *item,$/;"	f	file:
cmd_show_hooks_entry	cmd-show-options.c	/^const struct cmd_entry cmd_show_hooks_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_show_messages_entry	cmd-show-messages.c	/^const struct cmd_entry cmd_show_messages_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_show_messages_exec	cmd-show-messages.c	/^cmd_show_messages_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_show_messages_terminals	cmd-show-messages.c	/^cmd_show_messages_terminals(struct cmd *self, struct cmdq_item *item, int blank)$/;"	f	file:
cmd_show_options_all	cmd-show-options.c	/^cmd_show_options_all(struct cmd *self, struct cmdq_item *item, int scope,$/;"	f	file:
cmd_show_options_entry	cmd-show-options.c	/^const struct cmd_entry cmd_show_options_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_show_options_exec	cmd-show-options.c	/^cmd_show_options_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_show_options_print	cmd-show-options.c	/^cmd_show_options_print(struct cmd *self, struct cmdq_item *item,$/;"	f	file:
cmd_show_window_options_entry	cmd-show-options.c	/^const struct cmd_entry cmd_show_window_options_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_source_file_add	cmd-source-file.c	/^cmd_source_file_add(struct cmd_source_file_data *cdata, const char *path)$/;"	f	file:
cmd_source_file_complete	cmd-source-file.c	/^cmd_source_file_complete(struct client *c, struct cmd_source_file_data *cdata)$/;"	f	file:
cmd_source_file_complete_cb	cmd-source-file.c	/^cmd_source_file_complete_cb(struct cmdq_item *item, __unused void *data)$/;"	f	file:
cmd_source_file_data	cmd-source-file.c	/^struct cmd_source_file_data {$/;"	s	file:
cmd_source_file_done	cmd-source-file.c	/^cmd_source_file_done(struct client *c, const char *path, int error,$/;"	f	file:
cmd_source_file_entry	cmd-source-file.c	/^const struct cmd_entry cmd_source_file_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_source_file_exec	cmd-source-file.c	/^cmd_source_file_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_split_window_entry	cmd-split-window.c	/^const struct cmd_entry cmd_split_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_split_window_exec	cmd-split-window.c	/^cmd_split_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_start_server_entry	cmd-kill-server.c	/^const struct cmd_entry cmd_start_server_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_stringify_argv	cmd.c	/^cmd_stringify_argv(int argc, char **argv)$/;"	f
cmd_suspend_client_entry	cmd-detach-client.c	/^const struct cmd_entry cmd_suspend_client_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_swap_pane_entry	cmd-swap-pane.c	/^const struct cmd_entry cmd_swap_pane_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_swap_pane_exec	cmd-swap-pane.c	/^cmd_swap_pane_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_swap_window_entry	cmd-swap-window.c	/^const struct cmd_entry cmd_swap_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_swap_window_exec	cmd-swap-window.c	/^cmd_swap_window_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_switch_client_entry	cmd-switch-client.c	/^const struct cmd_entry cmd_switch_client_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_switch_client_exec	cmd-switch-client.c	/^cmd_switch_client_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_table	cmd.c	/^const struct cmd_entry *cmd_table[] = {$/;"	v	typeref:struct:cmd_entry
cmd_template_replace	cmd.c	/^cmd_template_replace(const char *template_, const char *s, int idx)$/;"	f
cmd_unbind_key_entry	cmd-unbind-key.c	/^const struct cmd_entry cmd_unbind_key_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_unbind_key_exec	cmd-unbind-key.c	/^cmd_unbind_key_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_unlink_window_entry	cmd-kill-window.c	/^const struct cmd_entry cmd_unlink_window_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_unpack_argv	cmd.c	/^cmd_unpack_argv(char *buf, size_t len, int argc, char ***argv)$/;"	f
cmd_wait_for_add	cmd-wait-for.c	/^cmd_wait_for_add(const char *name)$/;"	f	file:
cmd_wait_for_entry	cmd-wait-for.c	/^const struct cmd_entry cmd_wait_for_entry = {$/;"	v	typeref:struct:cmd_entry
cmd_wait_for_exec	cmd-wait-for.c	/^cmd_wait_for_exec(struct cmd *self, struct cmdq_item *item)$/;"	f	file:
cmd_wait_for_flush	cmd-wait-for.c	/^cmd_wait_for_flush(void)$/;"	f
cmd_wait_for_lock	cmd-wait-for.c	/^cmd_wait_for_lock(struct cmdq_item *item, const char *name,$/;"	f	file:
cmd_wait_for_remove	cmd-wait-for.c	/^cmd_wait_for_remove(struct wait_channel *wc)$/;"	f	file:
cmd_wait_for_signal	cmd-wait-for.c	/^cmd_wait_for_signal(__unused struct cmdq_item *item, const char *name,$/;"	f	file:
cmd_wait_for_unlock	cmd-wait-for.c	/^cmd_wait_for_unlock(struct cmdq_item *item, const char *name,$/;"	f	file:
cmd_wait_for_wait	cmd-wait-for.c	/^cmd_wait_for_wait(struct cmdq_item *item, const char *name,$/;"	f	file:
cmdlist	cmd-queue.c	/^	struct cmd_list		*cmdlist;$/;"	m	struct:cmdq_item	typeref:struct:cmdq_item::cmd_list	file:
cmdlist	tmux.h	/^	struct cmd_list			 *cmdlist;$/;"	m	union:options_value	typeref:struct:options_value::cmd_list
cmdlist	tmux.h	/^	struct cmd_list		*cmdlist;$/;"	m	struct:cmd_parse_result	typeref:struct:cmd_parse_result::cmd_list
cmdlist	tmux.h	/^	struct cmd_list		*cmdlist;$/;"	m	struct:key_binding	typeref:struct:key_binding::cmd_list
cmdq_add_format	cmd-queue.c	/^cmdq_add_format(struct cmdq_state *state, const char *key, const char *fmt, ...)$/;"	f
cmdq_add_message	cmd-queue.c	/^cmdq_add_message(struct cmdq_item *item)$/;"	f	file:
cmdq_append	cmd-queue.c	/^cmdq_append(struct client *c, struct cmdq_item *item)$/;"	f
cmdq_cb	tmux.h	/^typedef enum cmd_retval (*cmdq_cb) (struct cmdq_item *, void *);$/;"	t	typeref:enum:cmdq_cb
cmdq_continue	cmd-queue.c	/^cmdq_continue(struct cmdq_item *item)$/;"	f
cmdq_copy_state	cmd-queue.c	/^cmdq_copy_state(struct cmdq_state *state)$/;"	f
cmdq_error	cmd-queue.c	/^cmdq_error(struct cmdq_item *item, const char *fmt, ...)$/;"	f
cmdq_error_callback	cmd-queue.c	/^cmdq_error_callback(struct cmdq_item *item, void *data)$/;"	f	file:
cmdq_find_flag	cmd-queue.c	/^cmdq_find_flag(struct cmdq_item *item, struct cmd_find_state *fs,$/;"	f	file:
cmdq_fire_callback	cmd-queue.c	/^cmdq_fire_callback(struct cmdq_item *item)$/;"	f	file:
cmdq_fire_command	cmd-queue.c	/^cmdq_fire_command(struct cmdq_item *item)$/;"	f	file:
cmdq_free	cmd-queue.c	/^cmdq_free(struct cmdq_list *queue)$/;"	f
cmdq_free_state	cmd-queue.c	/^cmdq_free_state(struct cmdq_state *state)$/;"	f
cmdq_get	cmd-queue.c	/^cmdq_get(struct client *c)$/;"	f	file:
cmdq_get_callback	tmux.h	2323;"	d
cmdq_get_callback1	cmd-queue.c	/^cmdq_get_callback1(const char *name, cmdq_cb cb, void *data)$/;"	f
cmdq_get_client	cmd-queue.c	/^cmdq_get_client(struct cmdq_item *item)$/;"	f
cmdq_get_command	cmd-queue.c	/^cmdq_get_command(struct cmd_list *cmdlist, struct cmdq_state *state)$/;"	f
cmdq_get_current	cmd-queue.c	/^cmdq_get_current(struct cmdq_item *item)$/;"	f
cmdq_get_error	cmd-queue.c	/^cmdq_get_error(const char *error)$/;"	f
cmdq_get_event	cmd-queue.c	/^cmdq_get_event(struct cmdq_item *item)$/;"	f
cmdq_get_flags	cmd-queue.c	/^cmdq_get_flags(struct cmdq_item *item)$/;"	f
cmdq_get_name	cmd-queue.c	/^cmdq_get_name(struct cmdq_item *item)$/;"	f
cmdq_get_source	cmd-queue.c	/^cmdq_get_source(struct cmdq_item *item)$/;"	f
cmdq_get_state	cmd-queue.c	/^cmdq_get_state(struct cmdq_item *item)$/;"	f
cmdq_get_target	cmd-queue.c	/^cmdq_get_target(struct cmdq_item *item)$/;"	f
cmdq_get_target_client	cmd-queue.c	/^cmdq_get_target_client(struct cmdq_item *item)$/;"	f
cmdq_guard	cmd-queue.c	/^cmdq_guard(struct cmdq_item *item, const char *guard, int flags)$/;"	f
cmdq_insert_after	cmd-queue.c	/^cmdq_insert_after(struct cmdq_item *after, struct cmdq_item *item)$/;"	f
cmdq_insert_hook	cmd-queue.c	/^cmdq_insert_hook(struct session *s, struct cmdq_item *item,$/;"	f
cmdq_item	cmd-queue.c	/^struct cmdq_item {$/;"	s	file:
cmdq_link_state	cmd-queue.c	/^cmdq_link_state(struct cmdq_state *state)$/;"	f
cmdq_list	cmd-queue.c	/^struct cmdq_list {$/;"	s	file:
cmdq_merge_formats	cmd-queue.c	/^cmdq_merge_formats(struct cmdq_item *item, struct format_tree *ft)$/;"	f
cmdq_name	cmd-queue.c	/^cmdq_name(struct client *c)$/;"	f	file:
cmdq_new	cmd-queue.c	/^cmdq_new(void)$/;"	f
cmdq_new_state	cmd-queue.c	/^cmdq_new_state(struct cmd_find_state *current, struct key_event *event,$/;"	f
cmdq_next	cmd-queue.c	/^cmdq_next(struct client *c)$/;"	f
cmdq_print	cmd-queue.c	/^cmdq_print(struct cmdq_item *item, const char *fmt, ...)$/;"	f
cmdq_remove	cmd-queue.c	/^cmdq_remove(struct cmdq_item *item)$/;"	f	file:
cmdq_remove_group	cmd-queue.c	/^cmdq_remove_group(struct cmdq_item *item)$/;"	f	file:
cmdq_running	cmd-queue.c	/^cmdq_running(struct client *c)$/;"	f
cmdq_state	cmd-queue.c	/^struct cmdq_state {$/;"	s	file:
cmdq_type	cmd-queue.c	/^enum cmdq_type {$/;"	g	file:
cmp_procs	osdep-dragonfly.c	/^cmp_procs(struct kinfo_proc *p1, struct kinfo_proc *p2)$/;"	f
cmp_procs	osdep-freebsd.c	/^cmp_procs(struct kinfo_proc *p1, struct kinfo_proc *p2)$/;"	f
cmp_procs	osdep-netbsd.c	/^cmp_procs(struct kinfo_proc2 *p1, struct kinfo_proc2 *p2)$/;"	f
cmp_procs	osdep-openbsd.c	/^cmp_procs(struct kinfo_proc *p1, struct kinfo_proc *p2)$/;"	f	file:
code	tty-keys.c	/^	enum tty_code_code	code;$/;"	m	struct:tty_default_key_code	typeref:enum:tty_default_key_code::tty_code_code	file:
codes	tmux.h	/^	struct tty_code	*codes;$/;"	m	struct:tty_term	typeref:struct:tty_term::tty_code
colour_256to16	colour.c	/^colour_256to16(int c)$/;"	f
colour_256toRGB	colour.c	/^colour_256toRGB(int c)$/;"	f
colour_dist_sq	colour.c	/^colour_dist_sq(int R, int G, int B, int r, int g, int b)$/;"	f	file:
colour_find_rgb	colour.c	/^colour_find_rgb(u_char r, u_char g, u_char b)$/;"	f
colour_fromstring	colour.c	/^colour_fromstring(const char *s)$/;"	f
colour_join_rgb	colour.c	/^colour_join_rgb(u_char r, u_char g, u_char b)$/;"	f
colour_split_rgb	colour.c	/^colour_split_rgb(int c, u_char *r, u_char *g, u_char *b)$/;"	f
colour_to_6cube	colour.c	/^colour_to_6cube(int v)$/;"	f	file:
colour_tostring	colour.c	/^colour_tostring(int c)$/;"	f
command	cmd-display-panes.c	/^	char			*command;$/;"	m	struct:cmd_display_panes_data	file:
command	cmd-parse.y	/^command		: assignment$/;"	l
command	tmux.h	/^	const char	*command;$/;"	m	struct:menu_item
command	tmux.h	/^	void		 (*command)(struct window_mode_entry *, struct client *,$/;"	m	struct:window_mode
command	window-buffer.c	/^	char				 *command;$/;"	m	struct:window_buffer_modedata	file:
command	window-client.c	/^	char				 *command;$/;"	m	struct:window_client_modedata	file:
command	window-copy.c	/^	const char			 *command;$/;"	m	struct:__anon22	file:
command	window-tree.c	/^	char				 *command;$/;"	m	struct:window_tree_modedata	file:
commands	cmd-parse.y	/^commands	: command$/;"	l
completecb	job.c	/^	job_complete_cb		 completecb;$/;"	m	struct:job	file:
condition	cmd-parse.y	/^condition	: if_open '\\n' statements if_close$/;"	l
condition1	cmd-parse.y	/^condition1	: if_open commands if_close$/;"	l
control_add_pane	control.c	/^control_add_pane(struct client *c, struct window_pane *wp)$/;"	f	file:
control_add_sub	control.c	/^control_add_sub(struct client *c, const char *name, enum control_sub_type type,$/;"	f
control_all_done	control.c	/^control_all_done(struct client *c)$/;"	f
control_append_data	control.c	/^control_append_data(struct client *c, struct control_pane *cp, uint64_t age,$/;"	f	file:
control_block	control.c	/^struct control_block {$/;"	s	file:
control_check_age	control.c	/^control_check_age(struct client *c, struct window_pane *wp,$/;"	f	file:
control_check_subs_all_panes	control.c	/^control_check_subs_all_panes(struct client *c, struct control_sub *csub)$/;"	f	file:
control_check_subs_all_windows	control.c	/^control_check_subs_all_windows(struct client *c, struct control_sub *csub)$/;"	f	file:
control_check_subs_pane	control.c	/^control_check_subs_pane(struct client *c, struct control_sub *csub)$/;"	f	file:
control_check_subs_session	control.c	/^control_check_subs_session(struct client *c, struct control_sub *csub)$/;"	f	file:
control_check_subs_timer	control.c	/^control_check_subs_timer(__unused int fd, __unused short events, void *data)$/;"	f	file:
control_check_subs_window	control.c	/^control_check_subs_window(struct client *c, struct control_sub *csub)$/;"	f	file:
control_continue_pane	control.c	/^control_continue_pane(struct client *c, struct window_pane *wp)$/;"	f
control_discard	control.c	/^control_discard(struct client *c)$/;"	f
control_discard_pane	control.c	/^control_discard_pane(struct client *c, struct control_pane *cp)$/;"	f	file:
control_error	control.c	/^control_error(struct cmdq_item *item, void *data)$/;"	f	file:
control_error_callback	control.c	/^control_error_callback(__unused struct bufferevent *bufev,$/;"	f	file:
control_flush_all_blocks	control.c	/^control_flush_all_blocks(struct client *c)$/;"	f	file:
control_free_block	control.c	/^control_free_block(struct control_state *cs, struct control_block *cb)$/;"	f	file:
control_free_sub	control.c	/^control_free_sub(struct control_state *cs, struct control_sub *csub)$/;"	f	file:
control_get_pane	control.c	/^control_get_pane(struct client *c, struct window_pane *wp)$/;"	f	file:
control_notify_client_session_changed	control-notify.c	/^control_notify_client_session_changed(struct client *cc)$/;"	f
control_notify_pane_mode_changed	control-notify.c	/^control_notify_pane_mode_changed(int pane)$/;"	f
control_notify_session_closed	control-notify.c	/^control_notify_session_closed(__unused struct session *s)$/;"	f
control_notify_session_created	control-notify.c	/^control_notify_session_created(__unused struct session *s)$/;"	f
control_notify_session_renamed	control-notify.c	/^control_notify_session_renamed(struct session *s)$/;"	f
control_notify_session_window_changed	control-notify.c	/^control_notify_session_window_changed(struct session *s)$/;"	f
control_notify_window_layout_changed	control-notify.c	/^control_notify_window_layout_changed(struct window *w)$/;"	f
control_notify_window_linked	control-notify.c	/^control_notify_window_linked(__unused struct session *s, struct window *w)$/;"	f
control_notify_window_pane_changed	control-notify.c	/^control_notify_window_pane_changed(struct window *w)$/;"	f
control_notify_window_renamed	control-notify.c	/^control_notify_window_renamed(struct window *w)$/;"	f
control_notify_window_unlinked	control-notify.c	/^control_notify_window_unlinked(__unused struct session *s, struct window *w)$/;"	f
control_pane	control.c	/^struct control_pane {$/;"	s	file:
control_pane_cmp	control.c	/^control_pane_cmp(struct control_pane *cp1, struct control_pane *cp2)$/;"	f	file:
control_pane_offset	control.c	/^control_pane_offset(struct client *c, struct window_pane *wp, int *off)$/;"	f
control_pause_pane	control.c	/^control_pause_pane(struct client *c, struct window_pane *wp)$/;"	f
control_read_callback	control.c	/^control_read_callback(__unused struct bufferevent *bufev, void *data)$/;"	f	file:
control_remove_sub	control.c	/^control_remove_sub(struct client *c, const char *name)$/;"	f
control_reset_offsets	control.c	/^control_reset_offsets(struct client *c)$/;"	f
control_set_pane_off	control.c	/^control_set_pane_off(struct client *c, struct window_pane *wp)$/;"	f
control_set_pane_on	control.c	/^control_set_pane_on(struct client *c, struct window_pane *wp)$/;"	f
control_start	control.c	/^control_start(struct client *c)$/;"	f
control_state	control.c	/^struct control_state {$/;"	s	file:
control_state	tmux.h	/^	struct control_state *control_state;$/;"	m	struct:client	typeref:struct:client::control_state
control_stop	control.c	/^control_stop(struct client *c)$/;"	f
control_sub	control.c	/^struct control_sub {$/;"	s	file:
control_sub_cmp	control.c	/^control_sub_cmp(struct control_sub *csub1, struct control_sub *csub2)$/;"	f	file:
control_sub_pane	control.c	/^struct control_sub_pane {$/;"	s	file:
control_sub_pane_cmp	control.c	/^control_sub_pane_cmp(struct control_sub_pane *csp1,$/;"	f	file:
control_sub_type	tmux.h	/^enum control_sub_type {$/;"	g
control_sub_window	control.c	/^struct control_sub_window {$/;"	s	file:
control_sub_window_cmp	control.c	/^control_sub_window_cmp(struct control_sub_window *csw1,$/;"	f	file:
control_vwrite	control.c	/^control_vwrite(struct client *c, const char *fmt, va_list ap)$/;"	f	file:
control_window_pane	control.c	/^control_window_pane(struct client *c, u_int pane)$/;"	f	file:
control_write	control.c	/^control_write(struct client *c, const char *fmt, ...)$/;"	f
control_write_callback	control.c	/^control_write_callback(__unused struct bufferevent *bufev, void *data)$/;"	f	file:
control_write_data	control.c	/^control_write_data(struct client *c, struct evbuffer *message)$/;"	f	file:
control_write_output	control.c	/^control_write_output(struct client *c, struct window_pane *wp)$/;"	f
control_write_pending	control.c	/^control_write_pending(struct client *c, struct control_pane *cp, size_t limit)$/;"	f	file:
count	arguments.c	/^	u_int			 count;$/;"	m	struct:args_entry	file:
count	tmux.h	/^	u_int			 count;$/;"	m	struct:menu
created	paste.c	/^	time_t		 created;$/;"	m	struct:paste_buffer	file:
creation_time	tmux.h	/^	struct timeval	 creation_time;$/;"	m	struct:client	typeref:struct:client::timeval
creation_time	tmux.h	/^	struct timeval	 creation_time;$/;"	m	struct:session	typeref:struct:session::timeval
cstyle	tmux.h	/^	u_int			 cstyle;	\/* cursor style *\/$/;"	m	struct:screen
cstyle	tmux.h	/^	u_int		 cstyle;$/;"	m	struct:tty
ctx	input.c	/^	struct screen_write_ctx ctx;$/;"	m	struct:input_ctx	typeref:struct:input_ctx::screen_write_ctx	file:
current	cmd-queue.c	/^	struct cmd_find_state	 current;$/;"	m	struct:cmdq_state	typeref:struct:cmdq_state::cmd_find_state	file:
current	cmd-source-file.c	/^	u_int			  current;$/;"	m	struct:cmd_source_file_data	file:
current	mode-tree.c	/^	u_int			  current;$/;"	m	struct:mode_tree_data	file:
current	tmux.h	/^	struct cmd_find_state	*current;$/;"	m	struct:cmd_find_state	typeref:struct:cmd_find_state::cmd_find_state
cursordrag	window-copy.c	/^	} cursordrag;$/;"	m	struct:window_copy_mode_data	typeref:enum:window_copy_mode_data::__anon19	file:
curw	tmux.h	/^	struct winlink	*curw;$/;"	m	struct:session	typeref:struct:session::winlink
cwd	cmd-run-shell.c	/^	char			*cwd;$/;"	m	struct:cmd_run_shell_data	file:
cwd	tmux.h	/^	char		*cwd;$/;"	m	struct:window_pane
cwd	tmux.h	/^	const char		 *cwd;$/;"	m	struct:spawn_context
cwd	tmux.h	/^	const char	*cwd;$/;"	m	struct:client
cwd	tmux.h	/^	const char	*cwd;$/;"	m	struct:session
cx	tmux.h	/^	u_int			 cx;		\/* cursor x *\/$/;"	m	struct:screen
cx	tmux.h	/^	u_int		 cx;$/;"	m	struct:tty
cx	window-copy.c	/^	u_int		 cx;$/;"	m	struct:window_copy_mode_data	file:
cy	tmux.h	/^	u_int			 cy;		\/* cursor y *\/$/;"	m	struct:screen
cy	tmux.h	/^	u_int		 cy;$/;"	m	struct:tty
cy	window-copy.c	/^	u_int		 cy;$/;"	m	struct:window_copy_mode_data	file:
daemon	compat/daemon.c	/^daemon(int nochdir, int noclose)$/;"	f
daemon_darwin	compat/daemon-darwin.c	/^daemon_darwin(void)$/;"	f
data	cmd-queue.c	/^	void			*data;$/;"	m	struct:cmdq_item	file:
data	compat/imsg.h	/^	void		*data;$/;"	m	struct:imsg
data	input-keys.c	/^	const char			*data;$/;"	m	struct:input_key_entry	file:
data	job.c	/^	void			*data;$/;"	m	struct:job	file:
data	menu.c	/^	void			*data;$/;"	m	struct:menu_data	file:
data	mode-tree.c	/^	struct mode_tree_data		*data;$/;"	m	struct:mode_tree_menu	typeref:struct:mode_tree_menu::mode_tree_data	file:
data	paste.c	/^	char		*data;$/;"	m	struct:paste_buffer	file:
data	screen-write.c	/^	char					*data;$/;"	m	struct:screen_write_collect_line	file:
data	tmux.h	/^			u_char	data;$/;"	m	struct:grid_cell_entry::__anon11::__anon12
data	tmux.h	/^		} data;$/;"	m	union:grid_cell_entry::__anon11	typeref:struct:grid_cell_entry::__anon11::__anon12
data	tmux.h	/^	struct utf8_data	data;$/;"	m	struct:grid_cell	typeref:struct:grid_cell::utf8_data
data	tmux.h	/^	u_char	data[UTF8_SIZE];$/;"	m	struct:utf8_data
data	tmux.h	/^	utf8_char		data;$/;"	m	struct:grid_extd_entry
data	tmux.h	/^	void				*data;$/;"	m	struct:client_file
data	tmux.h	/^	void				*data;$/;"	m	struct:window_mode_entry
data	utf8.c	/^	char			data[UTF8_SIZE];$/;"	m	struct:utf8_item	file:
data	window-buffer.c	/^	struct mode_tree_data		 *data;$/;"	m	struct:window_buffer_modedata	typeref:struct:window_buffer_modedata::mode_tree_data	file:
data	window-client.c	/^	struct mode_tree_data		 *data;$/;"	m	struct:window_client_modedata	typeref:struct:window_client_modedata::mode_tree_data	file:
data	window-customize.c	/^	struct mode_tree_data			 *data;$/;"	m	struct:window_customize_modedata	typeref:struct:window_customize_modedata::mode_tree_data	file:
data	window-customize.c	/^	struct window_customize_modedata	*data;$/;"	m	struct:window_customize_itemdata	typeref:struct:window_customize_itemdata::window_customize_modedata	file:
data	window-tree.c	/^	struct mode_tree_data		 *data;$/;"	m	struct:window_tree_modedata	typeref:struct:window_tree_modedata::mode_tree_data	file:
dead	mode-tree.c	/^	int			  dead;$/;"	m	struct:mode_tree_data	file:
dead	window-customize.c	/^	int					  dead;$/;"	m	struct:window_customize_modedata	file:
dead	window-tree.c	/^	int				  dead;$/;"	m	struct:window_tree_modedata	file:
default_arr	tmux.h	/^	const char		**default_arr;$/;"	m	struct:options_table_entry
default_format	tmux.h	/^	const char	*default_format;$/;"	m	struct:window_mode
default_key_bindings	tmux.h	/^	struct key_bindings	 default_key_bindings;$/;"	m	struct:key_table	typeref:struct:key_table::key_bindings
default_num	tmux.h	/^	long long		  default_num;$/;"	m	struct:options_table_entry
default_str	tmux.h	/^	const char		 *default_str;$/;"	m	struct:options_table_entry
default_type	tmux.h	/^	enum style_default_type	default_type;$/;"	m	struct:style	typeref:enum:style::style_default_type
default_window_name	names.c	/^default_window_name(struct window *w)$/;"	f
default_window_size	resize.c	/^default_window_size(struct client *c, struct session *s, struct window *w,$/;"	f
default_window_size_skip_client	resize.c	/^default_window_size_skip_client (struct client *loop, int type,$/;"	f	file:
defaults	tmux.h	/^	struct grid_cell defaults;$/;"	m	struct:tty_ctx	typeref:struct:tty_ctx::grid_cell
depth	mode-tree.c	/^	u_int				 depth;$/;"	m	struct:mode_tree_line	file:
depth	mode-tree.c	/^	u_int			  depth;$/;"	m	struct:mode_tree_data	file:
die	autogen.sh	/^die()$/;"	f
dirent	compat/closefrom.c	32;"	d	file:
discarded	tmux.h	/^	size_t		 discarded;$/;"	m	struct:client
discarded	tmux.h	/^	size_t		 discarded;$/;"	m	struct:tty
dispatchcb	proc.c	/^	void		(*dispatchcb)(struct imsg *, void *);$/;"	m	struct:tmuxpeer	file:
dragging	popup.c	/^	enum { OFF, MOVE, SIZE }  dragging;$/;"	m	struct:popup_data	typeref:enum:popup_data::__anon8	file:
dragtimer	window-copy.c	/^	struct event	 dragtimer;$/;"	m	struct:window_copy_mode_data	typeref:struct:window_copy_mode_data::event	file:
draw_as_parent	mode-tree.c	/^	int				 draw_as_parent;$/;"	m	struct:mode_tree_item	file:
drawcb	mode-tree.c	/^	mode_tree_draw_cb         drawcb;$/;"	m	struct:mode_tree_data	file:
dx	popup.c	/^	u_int			  dx;$/;"	m	struct:popup_data	file:
dx	window-copy.c	/^	u_int		 dx;		\/* drag start position *\/$/;"	m	struct:window_copy_mode_data	file:
dy	popup.c	/^	u_int			  dy;$/;"	m	struct:popup_data	file:
dy	window-copy.c	/^	u_int		 dy;$/;"	m	struct:window_copy_mode_data	file:
each	window-tree.c	/^	u_int				  each;$/;"	m	struct:window_tree_modedata	file:
elif	cmd-parse.y	/^elif		: if_elif '\\n' statements$/;"	l
elif1	cmd-parse.y	/^elif1		: if_elif commands$/;"	l
end	format-draw.c	/^	u_int				 end;$/;"	m	struct:format_range	file:
end	tmux.h	/^	u_int			 end; \/* not included *\/$/;"	m	struct:style_range
end	window-tree.c	/^	u_int				  end;$/;"	m	struct:window_tree_modedata	file:
endselrx	window-copy.c	/^	u_int		 endselrx;$/;"	m	struct:window_copy_mode_data	file:
endselry	window-copy.c	/^	u_int		 endselry;$/;"	m	struct:window_copy_mode_data	file:
endselx	window-copy.c	/^	u_int		 endselx;	\/* end of selection *\/$/;"	m	struct:window_copy_mode_data	file:
endsely	window-copy.c	/^	u_int		 endsely;$/;"	m	struct:window_copy_mode_data	file:
enter	input.c	/^	void				(*enter)(struct input_ctx *);$/;"	m	struct:input_state	file:
entered	window-tree.c	/^	const char			 *entered;$/;"	m	struct:window_tree_modedata	file:
entries	tmux.h	/^	struct status_line_entry entries[STATUS_LINES_LIMIT];$/;"	m	struct:status_line	typeref:struct:status_line::status_line_entry
entry	cmd.c	/^	const struct cmd_entry	 *entry;$/;"	m	struct:cmd	typeref:struct:cmd::cmd_entry	file:
entry	compat/imsg.h	/^	TAILQ_ENTRY(ibuf)	 entry;$/;"	m	struct:ibuf
entry	compat/imsg.h	/^	TAILQ_ENTRY(imsg_fd)	entry;$/;"	m	struct:imsg_fd
entry	tmux.h	/^	LIST_ENTRY(tty_term) entry;$/;"	m	struct:tty_term
entry	tmux.h	/^	RB_ENTRY(client_file)		 entry;$/;"	m	struct:client_file
entry	tmux.h	/^	RB_ENTRY(client_window)	 entry;$/;"	m	struct:client_window
entry	tmux.h	/^	RB_ENTRY(environ_entry) entry;$/;"	m	struct:environ_entry
entry	tmux.h	/^	RB_ENTRY(key_binding)	 entry;$/;"	m	struct:key_binding
entry	tmux.h	/^	RB_ENTRY(key_table)	 entry;$/;"	m	struct:key_table
entry	tmux.h	/^	RB_ENTRY(session)    entry;$/;"	m	struct:session
entry	tmux.h	/^	RB_ENTRY(session_group)	 entry;$/;"	m	struct:session_group
entry	tmux.h	/^	RB_ENTRY(window) entry;$/;"	m	struct:window
entry	tmux.h	/^	RB_ENTRY(winlink) entry;$/;"	m	struct:winlink
entry	tmux.h	/^	TAILQ_ENTRY (window_mode_entry)	 entry;$/;"	m	struct:window_mode_entry
entry	tmux.h	/^	TAILQ_ENTRY(client) entry;$/;"	m	struct:client
entry	tmux.h	/^	TAILQ_ENTRY(layout_cell) entry;$/;"	m	struct:layout_cell
entry	tmux.h	/^	TAILQ_ENTRY(message_entry)	 entry;$/;"	m	struct:message_entry
entry	tmux.h	/^	TAILQ_ENTRY(style_range) entry;$/;"	m	struct:style_range
entry	tmux.h	/^	TAILQ_ENTRY(window_pane) entry;$/;"	m	struct:window_pane
env	tmux.h	/^	struct environ_tree		 *env;$/;"	m	struct:spawn_context	typeref:struct:spawn_context::environ_tree
env	tmux.h	/^	struct environ_tree	*env;$/;"	m	struct:client	typeref:struct:client::environ_tree
env	tmux.h	/^	struct environ_tree	*env;$/;"	m	struct:session	typeref:struct:session::environ_tree
environ_clear	environ.c	/^environ_clear(struct environ_tree *env, const char *name)$/;"	f
environ_cmp	environ.c	/^environ_cmp(struct environ_entry *envent1, struct environ_entry *envent2)$/;"	f	file:
environ_copy	environ.c	/^environ_copy(struct environ_tree *srcenv, struct environ_tree *dstenv)$/;"	f
environ_create	environ.c	/^environ_create(void)$/;"	f
environ_entry	tmux.h	/^struct environ_entry {$/;"	s
environ_find	environ.c	/^environ_find(struct environ_tree *env, const char *name)$/;"	f
environ_first	environ.c	/^environ_first(struct environ_tree *env)$/;"	f
environ_for_session	environ.c	/^environ_for_session(struct session *s, int no_TERM)$/;"	f
environ_free	environ.c	/^environ_free(struct environ_tree *env)$/;"	f
environ_log	environ.c	/^environ_log(struct environ_tree *env, const char *fmt, ...)$/;"	f
environ_next	environ.c	/^environ_next(struct environ_entry *envent)$/;"	f
environ_push	environ.c	/^environ_push(struct environ_tree *env)$/;"	f
environ_put	environ.c	/^environ_put(struct environ_tree *env, const char *var, int flags)$/;"	f
environ_set	environ.c	/^environ_set(struct environ_tree *env, const char *name, int flags, const char *fmt,$/;"	f
environ_unset	environ.c	/^environ_unset(struct environ_tree *env, const char *name)$/;"	f
environ_update	environ.c	/^environ_update(struct options *oo, struct environ_tree *src, struct environ_tree *dst)$/;"	f
err	compat/err.c	/^err(int eval, const char *fmt, ...)$/;"	f
error	cmd-parse.y	/^error:$/;"	l
error	tmux.h	/^	char			*error;$/;"	m	struct:cmd_parse_result
error	tmux.h	/^	int				 error;$/;"	m	struct:client_file
error	tmux.h	/^	int	error;$/;"	m	struct:msg_read_done
error	tmux.h	/^	int	error;$/;"	m	struct:msg_write_ready
errx	compat/err.c	/^errx(int eval, const char *fmt, ...)$/;"	f
ev_sigchld	proc.c	/^	struct event	  ev_sigchld;$/;"	m	struct:tmuxproc	typeref:struct:tmuxproc::event	file:
ev_sigcont	proc.c	/^	struct event	  ev_sigcont;$/;"	m	struct:tmuxproc	typeref:struct:tmuxproc::event	file:
ev_sighup	proc.c	/^	struct event	  ev_sighup;$/;"	m	struct:tmuxproc	typeref:struct:tmuxproc::event	file:
ev_sigint	proc.c	/^	struct event	  ev_sigint;$/;"	m	struct:tmuxproc	typeref:struct:tmuxproc::event	file:
ev_sigterm	proc.c	/^	struct event	  ev_sigterm;$/;"	m	struct:tmuxproc	typeref:struct:tmuxproc::event	file:
ev_sigusr1	proc.c	/^	struct event	  ev_sigusr1;$/;"	m	struct:tmuxproc	typeref:struct:tmuxproc::event	file:
ev_sigusr2	proc.c	/^	struct event	  ev_sigusr2;$/;"	m	struct:tmuxproc	typeref:struct:tmuxproc::event	file:
ev_sigwinch	proc.c	/^	struct event	  ev_sigwinch;$/;"	m	struct:tmuxproc	typeref:struct:tmuxproc::event	file:
event	cmd-queue.c	/^	struct key_event	 event;$/;"	m	struct:cmdq_state	typeref:struct:cmdq_state::key_event	file:
event	input.c	/^	struct bufferevent     *event;$/;"	m	struct:input_ctx	typeref:struct:input_ctx::bufferevent	file:
event	job.c	/^	struct bufferevent	*event;$/;"	m	struct:job	typeref:struct:job::bufferevent	file:
event	proc.c	/^	struct event	 event;$/;"	m	struct:tmuxpeer	typeref:struct:tmuxpeer::event	file:
event	tmux.h	/^	struct bufferevent		*event;$/;"	m	struct:client_file	typeref:struct:client_file::bufferevent
event	tmux.h	/^	struct bufferevent *event;$/;"	m	struct:window_pane	typeref:struct:window_pane::bufferevent
event	tmux.h	/^	struct event	 event;$/;"	m	struct:client	typeref:struct:client::event
event_in	tmux.h	/^	struct event	 event_in;$/;"	m	struct:tty	typeref:struct:tty::event
event_out	tmux.h	/^	struct event	 event_out;$/;"	m	struct:tty	typeref:struct:tty::event
ex	screen.c	/^	u_int		 ex;$/;"	m	struct:screen_sel	file:
exec	tmux.h	/^	enum cmd_retval	 (*exec)(struct cmd *, struct cmdq_item *);$/;"	m	struct:cmd_entry	typeref:enum:cmd_entry::exec
exit	input.c	/^	void				(*exit)(struct input_ctx *);$/;"	m	struct:input_state	file:
exit	proc.c	/^	int		  exit;$/;"	m	struct:tmuxproc	file:
exit_message	tmux.h	/^	char		*exit_message;$/;"	m	struct:client
exit_msgtype	tmux.h	/^	enum msgtype	 exit_msgtype;$/;"	m	struct:client	typeref:enum:client::msgtype
exit_session	tmux.h	/^	char		*exit_session;$/;"	m	struct:client
exit_type	tmux.h	/^	}		 exit_type;$/;"	m	struct:client	typeref:enum:client::__anon14
expand_path	tmux.c	/^expand_path(const char *path, const char *home)$/;"	f	file:
expand_paths	tmux.c	/^expand_paths(const char *s, char ***paths, u_int *n)$/;"	f
expanded	cmd-parse.y	/^expanded	: format$/;"	l
expanded	format.c	/^	const char		*expanded;$/;"	m	struct:format_job	file:
expanded	mode-tree.c	/^	int				 expanded;$/;"	m	struct:mode_tree_item	file:
expanded	tmux.h	/^	char			*expanded;$/;"	m	struct:status_line_entry
explicit_bzero	compat/explicit_bzero.c	/^explicit_bzero(void *buf, size_t len)$/;"	f
extddata	tmux.h	/^	struct grid_extd_entry	*extddata;$/;"	m	struct:grid_line	typeref:struct:grid_line::grid_extd_entry
extdsize	tmux.h	/^	u_int			 extdsize;$/;"	m	struct:grid_line
ey	screen.c	/^	u_int		 ey;$/;"	m	struct:screen_sel	file:
f	window-copy.c	/^	enum window_copy_cmd_action	(*f)(struct window_copy_cmd_state *);$/;"	m	struct:__anon22	typeref:enum:__anon22::f	file:
fatal	log.c	/^fatal(const char *msg, ...)$/;"	f
fatalx	log.c	/^fatalx(const char *msg, ...)$/;"	f
fd	compat/imsg.h	/^	int			 fd;$/;"	m	struct:ibuf
fd	compat/imsg.h	/^	int			 fd;$/;"	m	struct:imsgbuf
fd	compat/imsg.h	/^	int			 fd;$/;"	m	struct:msgbuf
fd	compat/imsg.h	/^	int			fd;$/;"	m	struct:imsg_fd
fd	compat/imsg.h	/^	int		 fd;$/;"	m	struct:imsg
fd	job.c	/^	int			 fd;$/;"	m	struct:job	file:
fd	tmux.h	/^	int				 fd;$/;"	m	struct:client_file
fd	tmux.h	/^	int		 fd;$/;"	m	struct:client
fd	tmux.h	/^	int		 fd;$/;"	m	struct:window_pane
fd	tmux.h	/^	int	fd;$/;"	m	struct:msg_read_open
fd	tmux.h	/^	int	fd;$/;"	m	struct:msg_write_open
fdforkpty	compat/fdforkpty.c	/^fdforkpty(__unused int ptmfd, int *master, char *name, struct termios *tio,$/;"	f
fds	compat/imsg.h	/^	TAILQ_HEAD(, imsg_fd)	 fds;$/;"	m	struct:imsgbuf
features	tmux.h	/^	int		 features;$/;"	m	struct:tty_term
fg	tmux.h	/^			u_char	fg;$/;"	m	struct:grid_cell_entry::__anon11::__anon12
fg	tmux.h	/^	int			fg;$/;"	m	struct:grid_cell
fg	tmux.h	/^	int			fg;$/;"	m	struct:grid_extd_entry
fg	tmux.h	/^	int		 fg;$/;"	m	struct:window_pane
fgetln	compat/fgetln.c	/^fgetln(FILE *fp, size_t *len)$/;"	f
field	tmux.h	/^	u_int	field;$/;"	m	struct:mode_tree_sort_criteria
file	cmd.c	/^	char			 *file;$/;"	m	struct:cmd	file:
file	tmux.h	/^	const char		*file;$/;"	m	struct:cmd_parse_input
file_can_print	file.c	/^file_can_print(struct client *c)$/;"	f
file_cmp	file.c	/^file_cmp(struct client_file *cf1, struct client_file *cf2)$/;"	f
file_create	file.c	/^file_create(struct client *c, int stream, client_file_cb cb, void *cbdata)$/;"	f
file_error	file.c	/^file_error(struct client *c, const char *fmt, ...)$/;"	f
file_fire_done	file.c	/^file_fire_done(struct client_file *cf)$/;"	f
file_fire_done_cb	file.c	/^file_fire_done_cb(__unused int fd, __unused short events, void *arg)$/;"	f	file:
file_fire_read	file.c	/^file_fire_read(struct client_file *cf)$/;"	f
file_free	file.c	/^file_free(struct client_file *cf)$/;"	f
file_get_path	file.c	/^file_get_path(struct client *c, const char *file)$/;"	f	file:
file_next_stream	file.c	/^static int	file_next_stream = 3;$/;"	v	file:
file_print	file.c	/^file_print(struct client *c, const char *fmt, ...)$/;"	f
file_print_buffer	file.c	/^file_print_buffer(struct client *c, void *data, size_t size)$/;"	f
file_push	file.c	/^file_push(struct client_file *cf)$/;"	f
file_push_cb	file.c	/^file_push_cb(__unused int fd, __unused short events, void *arg)$/;"	f	file:
file_read	file.c	/^file_read(struct client *c, const char *path, client_file_cb cb, void *cbdata)$/;"	f
file_vprint	file.c	/^file_vprint(struct client *c, const char *fmt, va_list ap)$/;"	f
file_write	file.c	/^file_write(struct client *c, const char *path, int flags, const void *bdata,$/;"	f
files	cmd-source-file.c	/^	char			**files;$/;"	m	struct:cmd_source_file_data	file:
files	tmux.h	/^	struct client_files files;$/;"	m	struct:client	typeref:struct:client::client_files
fill	tmux.h	/^	int			fill;$/;"	m	struct:style
filter	mode-tree.c	/^	char			 *filter;$/;"	m	struct:mode_tree_data	file:
find_cwd	tmux.c	/^find_cwd(void)$/;"	f
find_home	tmux.c	/^find_home(void)$/;"	f
first	input.c	/^	int				first;$/;"	m	struct:input_transition	file:
flag	arguments.c	/^	u_char			 flag;$/;"	m	struct:args_entry	file:
flag	status.c	/^	char		  flag;$/;"	m	struct:status_prompt_menu	file:
flag	tmux.h	/^	char			 flag;$/;"	m	struct:cmd_entry_flag
flag	tty-term.c	/^		int		flag;$/;"	m	union:tty_code::__anon16	file:
flags	cmd-command-prompt.c	/^	int	 flags;$/;"	m	struct:cmd_command_prompt_cdata	file:
flags	cmd-queue.c	/^	int			 flags;$/;"	m	struct:cmdq_item	file:
flags	cmd-queue.c	/^	int			 flags;$/;"	m	struct:cmdq_state	file:
flags	cmd-run-shell.c	/^	int			 flags;$/;"	m	struct:cmd_run_shell_data	file:
flags	cmd-source-file.c	/^	int			  flags;$/;"	m	struct:cmd_source_file_data	file:
flags	compat/imsg.h	/^	uint16_t	 flags;$/;"	m	struct:imsg_hdr
flags	control.c	/^	int				 flags;$/;"	m	struct:control_pane	file:
flags	format.c	/^	int			 flags;$/;"	m	struct:format_expand_state	file:
flags	format.c	/^	int			 flags;$/;"	m	struct:format_tree	file:
flags	input.c	/^	int			flags;$/;"	m	struct:input_ctx	file:
flags	job.c	/^	int			 flags;$/;"	m	struct:job	file:
flags	menu.c	/^	int			 flags;$/;"	m	struct:menu_data	file:
flags	popup.c	/^	int			  flags;$/;"	m	struct:popup_data	file:
flags	proc.c	/^	int		 flags;$/;"	m	struct:tmuxpeer	file:
flags	tmux.h	/^	int			  flags;$/;"	m	struct:options_table_entry
flags	tmux.h	/^	int			  flags;$/;"	m	struct:spawn_context
flags	tmux.h	/^	int			 flags;$/;"	m	struct:cmd_entry_flag
flags	tmux.h	/^	int			 flags;$/;"	m	struct:cmd_find_state
flags	tmux.h	/^	int			 flags;$/;"	m	struct:cmd_parse_input
flags	tmux.h	/^	int			 flags;$/;"	m	struct:grid
flags	tmux.h	/^	int			 flags;$/;"	m	struct:grid_line
flags	tmux.h	/^	int			 flags;$/;"	m	struct:key_binding
flags	tmux.h	/^	int			 flags;$/;"	m	struct:screen_write_ctx
flags	tmux.h	/^	int		 flags;$/;"	m	struct:cmd_entry
flags	tmux.h	/^	int		 flags;$/;"	m	struct:environ_entry
flags	tmux.h	/^	int		 flags;$/;"	m	struct:session
flags	tmux.h	/^	int		 flags;$/;"	m	struct:tty
flags	tmux.h	/^	int		 flags;$/;"	m	struct:tty_term
flags	tmux.h	/^	int		 flags;$/;"	m	struct:window
flags	tmux.h	/^	int		 flags;$/;"	m	struct:window_pane
flags	tmux.h	/^	int		 flags;$/;"	m	struct:winlink
flags	tmux.h	/^	int	flags;$/;"	m	struct:msg_write_open
flags	tmux.h	/^	u_char			flags;$/;"	m	struct:grid_cell
flags	tmux.h	/^	u_char			flags;$/;"	m	struct:grid_cell_entry
flags	tmux.h	/^	u_char			flags;$/;"	m	struct:grid_extd_entry
flags	tmux.h	/^	uint64_t	 flags;$/;"	m	struct:client
flags	tty-features.c	/^	int		  flags;$/;"	m	struct:tty_feature	file:
flat	mode-tree.c	/^	int				 flat;$/;"	m	struct:mode_tree_line	file:
force_timer	tmux.h	/^	struct event	 force_timer;$/;"	m	struct:window_pane	typeref:struct:window_pane::event
forkpty	compat/forkpty-aix.c	/^forkpty(int *master, __unused char *name, struct termios *tio,$/;"	f
forkpty	compat/forkpty-haiku.c	/^forkpty(int *master, char *name, struct termios *tio, struct winsize *ws)$/;"	f
forkpty	compat/forkpty-hpux.c	/^forkpty(int *master, char *name, struct termios *tio, struct winsize *ws)$/;"	f
forkpty	compat/forkpty-sunos.c	/^forkpty(int *master, char *name, struct termios *tio, struct winsize *ws)$/;"	f
format	cmd-parse.y	/^format		: TMUX_YACC_FORMAT$/;"	l
format	control.c	/^	char				*format;$/;"	m	struct:control_sub	file:
format	window-buffer.c	/^	char				 *format;$/;"	m	struct:window_buffer_modedata	file:
format	window-client.c	/^	char				 *format;$/;"	m	struct:window_client_modedata	file:
format	window-customize.c	/^	char					 *format;$/;"	m	struct:window_customize_modedata	file:
format	window-tree.c	/^	char				 *format;$/;"	m	struct:window_tree_modedata	file:
format_add	format.c	/^format_add(struct format_tree *ft, const char *key, const char *fmt, ...)$/;"	f
format_add_cb	format.c	/^format_add_cb(struct format_tree *ft, const char *key, format_cb cb)$/;"	f
format_add_modifier	format.c	/^format_add_modifier(struct format_modifier **list, u_int *count,$/;"	f	file:
format_add_tv	format.c	/^format_add_tv(struct format_tree *ft, const char *key, struct timeval *tv)$/;"	f
format_build_modifiers	format.c	/^format_build_modifiers(struct format_expand_state *es, const char **s,$/;"	f	file:
format_cb	tmux.h	/^typedef char *(*format_cb)(struct format_tree *);$/;"	t
format_cb_current_command	format.c	/^format_cb_current_command(struct format_tree *ft)$/;"	f	file:
format_cb_current_path	format.c	/^format_cb_current_path(struct format_tree *ft)$/;"	f	file:
format_cb_cursor_character	format.c	/^format_cb_cursor_character(struct format_tree *ft)$/;"	f	file:
format_cb_history_all_bytes	format.c	/^format_cb_history_all_bytes(struct format_tree *ft)$/;"	f	file:
format_cb_history_bytes	format.c	/^format_cb_history_bytes(struct format_tree *ft)$/;"	f	file:
format_cb_host	format.c	/^format_cb_host(__unused struct format_tree *ft)$/;"	f	file:
format_cb_host_short	format.c	/^format_cb_host_short(__unused struct format_tree *ft)$/;"	f	file:
format_cb_mouse_line	format.c	/^format_cb_mouse_line(struct format_tree *ft)$/;"	f	file:
format_cb_mouse_word	format.c	/^format_cb_mouse_word(struct format_tree *ft)$/;"	f	file:
format_cb_pane_at_bottom	format.c	/^format_cb_pane_at_bottom(struct format_tree *ft)$/;"	f	file:
format_cb_pane_at_top	format.c	/^format_cb_pane_at_top(struct format_tree *ft)$/;"	f	file:
format_cb_pane_in_mode	format.c	/^format_cb_pane_in_mode(struct format_tree *ft)$/;"	f	file:
format_cb_pane_tabs	format.c	/^format_cb_pane_tabs(struct format_tree *ft)$/;"	f	file:
format_cb_pid	format.c	/^format_cb_pid(__unused struct format_tree *ft)$/;"	f	file:
format_cb_session_alerts	format.c	/^format_cb_session_alerts(struct format_tree *ft)$/;"	f	file:
format_cb_session_attached_list	format.c	/^format_cb_session_attached_list(struct format_tree *ft)$/;"	f	file:
format_cb_session_group_attached_list	format.c	/^format_cb_session_group_attached_list(struct format_tree *ft)$/;"	f	file:
format_cb_session_group_list	format.c	/^format_cb_session_group_list(struct format_tree *ft)$/;"	f	file:
format_cb_session_stack	format.c	/^format_cb_session_stack(struct format_tree *ft)$/;"	f	file:
format_cb_start_command	format.c	/^format_cb_start_command(struct format_tree *ft)$/;"	f	file:
format_cb_window_active_clients	format.c	/^format_cb_window_active_clients(struct format_tree *ft)$/;"	f	file:
format_cb_window_active_clients_list	format.c	/^format_cb_window_active_clients_list(struct format_tree *ft)$/;"	f	file:
format_cb_window_active_sessions	format.c	/^format_cb_window_active_sessions(struct format_tree *ft)$/;"	f	file:
format_cb_window_active_sessions_list	format.c	/^format_cb_window_active_sessions_list(struct format_tree *ft)$/;"	f	file:
format_cb_window_layout	format.c	/^format_cb_window_layout(struct format_tree *ft)$/;"	f	file:
format_cb_window_linked_sessions_list	format.c	/^format_cb_window_linked_sessions_list(struct format_tree *ft)$/;"	f	file:
format_cb_window_stack_index	format.c	/^format_cb_window_stack_index(struct format_tree *ft)$/;"	f	file:
format_cb_window_visible_layout	format.c	/^format_cb_window_visible_layout(struct format_tree *ft)$/;"	f	file:
format_choose	format.c	/^format_choose(struct format_expand_state *es, const char *s, char **left,$/;"	f	file:
format_copy_state	format.c	/^format_copy_state(struct format_expand_state *to,$/;"	f	file:
format_create	format.c	/^format_create(struct client *c, struct cmdq_item *item, int tag, int flags)$/;"	f
format_create_add_item	format.c	/^format_create_add_item(struct format_tree *ft, struct cmdq_item *item)$/;"	f	file:
format_create_defaults	format.c	/^format_create_defaults(struct cmdq_item *item, struct client *c,$/;"	f
format_create_from_state	format.c	/^format_create_from_state(struct cmdq_item *item, struct client *c,$/;"	f
format_create_from_target	format.c	/^format_create_from_target(struct cmdq_item *item)$/;"	f
format_defaults	format.c	/^format_defaults(struct format_tree *ft, struct client *c, struct session *s,$/;"	f
format_defaults_client	format.c	/^format_defaults_client(struct format_tree *ft, struct client *c)$/;"	f	file:
format_defaults_pane	format.c	/^format_defaults_pane(struct format_tree *ft, struct window_pane *wp)$/;"	f
format_defaults_paste_buffer	format.c	/^format_defaults_paste_buffer(struct format_tree *ft, struct paste_buffer *pb)$/;"	f
format_defaults_session	format.c	/^format_defaults_session(struct format_tree *ft, struct session *s)$/;"	f	file:
format_defaults_window	format.c	/^format_defaults_window(struct format_tree *ft, struct window *w)$/;"	f
format_defaults_winlink	format.c	/^format_defaults_winlink(struct format_tree *ft, struct winlink *wl)$/;"	f	file:
format_draw	format-draw.c	/^format_draw(struct screen_write_ctx *octx, const struct grid_cell *base,$/;"	f
format_draw_centre	format-draw.c	/^format_draw_centre(struct screen_write_ctx *octx, u_int available, u_int ocx,$/;"	f	file:
format_draw_left	format-draw.c	/^format_draw_left(struct screen_write_ctx *octx, u_int available, u_int ocx,$/;"	f	file:
format_draw_many	format-draw.c	/^format_draw_many(struct screen_write_ctx *ctx, struct style *sy, char ch,$/;"	f	file:
format_draw_none	format-draw.c	/^format_draw_none(struct screen_write_ctx *octx, u_int available, u_int ocx,$/;"	f	file:
format_draw_put	format-draw.c	/^format_draw_put(struct screen_write_ctx *octx, u_int ocx, u_int ocy,$/;"	f	file:
format_draw_put_list	format-draw.c	/^format_draw_put_list(struct screen_write_ctx *octx,$/;"	f	file:
format_draw_right	format-draw.c	/^format_draw_right(struct screen_write_ctx *octx, u_int available, u_int ocx,$/;"	f	file:
format_each	format.c	/^format_each(struct format_tree *ft, void (*cb)(const char *, const char *,$/;"	f
format_entry	format.c	/^struct format_entry {$/;"	s	file:
format_entry_cmp	format.c	/^format_entry_cmp(struct format_entry *fe1, struct format_entry *fe2)$/;"	f	file:
format_escape	format.c	/^format_escape(const char *s)$/;"	f	file:
format_expand	format.c	/^format_expand(struct format_tree *ft, const char *fmt)$/;"	f
format_expand1	format.c	/^format_expand1(struct format_expand_state *es, const char *fmt)$/;"	f	file:
format_expand_state	format.c	/^struct format_expand_state {$/;"	s	file:
format_expand_time	format.c	/^format_expand_time(struct format_tree *ft, const char *fmt)$/;"	f
format_find	format.c	/^format_find(struct format_tree *ft, const char *key, int modifiers,$/;"	f	file:
format_free	format.c	/^format_free(struct format_tree *ft)$/;"	f
format_free_modifiers	format.c	/^format_free_modifiers(struct format_modifier *list, u_int count)$/;"	f	file:
format_free_range	format-draw.c	/^format_free_range(struct format_ranges *frs, struct format_range *fr)$/;"	f	file:
format_get_pane	format.c	/^format_get_pane(struct format_tree *ft)$/;"	f
format_grid_line	format.c	/^format_grid_line(struct grid *gd, u_int y)$/;"	f
format_grid_word	format.c	/^format_grid_word(struct grid *gd, u_int x, u_int y)$/;"	f
format_is_end	format.c	/^format_is_end(char c)$/;"	f	file:
format_is_type	format-draw.c	/^format_is_type(struct format_range *fr, struct style *sy)$/;"	f	file:
format_job	format.c	/^struct format_job {$/;"	s	file:
format_job_cmp	format.c	/^format_job_cmp(struct format_job *fj1, struct format_job *fj2)$/;"	f	file:
format_job_complete	format.c	/^format_job_complete(struct job *job)$/;"	f	file:
format_job_event	format.c	/^static struct event format_job_event;$/;"	v	typeref:struct:event	file:
format_job_get	format.c	/^format_job_get(struct format_expand_state *es, const char *cmd)$/;"	f	file:
format_job_tidy	format.c	/^format_job_tidy(struct format_job_tree *jobs, int force)$/;"	f	file:
format_job_timer	format.c	/^format_job_timer(__unused int fd, __unused short events, __unused void *arg)$/;"	f	file:
format_job_update	format.c	/^format_job_update(struct job *job)$/;"	f	file:
format_log	format.c	254;"	d	file:
format_log1	format.c	/^format_log1(struct format_expand_state *es, const char *from, const char *fmt,$/;"	f
format_logging	format.c	/^format_logging(struct format_tree *ft)$/;"	f	file:
format_loop_panes	format.c	/^format_loop_panes(struct format_expand_state *es, const char *fmt)$/;"	f	file:
format_loop_sessions	format.c	/^format_loop_sessions(struct format_expand_state *es, const char *fmt)$/;"	f	file:
format_loop_windows	format.c	/^format_loop_windows(struct format_expand_state *es, const char *fmt)$/;"	f	file:
format_lost_client	format.c	/^format_lost_client(struct client *c)$/;"	f
format_lower	format.c	/^static const char *format_lower[] = {$/;"	v	file:
format_match	format.c	/^format_match(struct format_modifier *fm, const char *pattern, const char *text)$/;"	f	file:
format_merge	format.c	/^format_merge(struct format_tree *ft, struct format_tree *from)$/;"	f
format_modifier	format.c	/^struct format_modifier {$/;"	s	file:
format_pretty_time	format.c	/^format_pretty_time(time_t t)$/;"	f	file:
format_quote	format.c	/^format_quote(const char *s)$/;"	f	file:
format_range	format-draw.c	/^struct format_range {$/;"	s	file:
format_replace	format.c	/^format_replace(struct format_expand_state *es, const char *key, size_t keylen,$/;"	f	file:
format_replace_expression	format.c	/^format_replace_expression(struct format_modifier *mexp,$/;"	f	file:
format_search	format.c	/^format_search(struct format_modifier *fm, struct window_pane *wp, const char *s)$/;"	f	file:
format_single	format.c	/^format_single(struct cmdq_item *item, const char *fmt, struct client *c,$/;"	f
format_single_from_state	format.c	/^format_single_from_state(struct cmdq_item *item, const char *fmt,$/;"	f
format_single_from_target	format.c	/^format_single_from_target(struct cmdq_item *item, const char *fmt)$/;"	f
format_skip	format.c	/^format_skip(const char *s, const char *end)$/;"	f
format_strip	format.c	/^format_strip(const char *s)$/;"	f	file:
format_sub	format.c	/^format_sub(struct format_modifier *fm, const char *text, const char *pattern,$/;"	f	file:
format_tree	format.c	/^struct format_tree {$/;"	s	file:
format_trim_left	format-draw.c	/^format_trim_left(const char *expanded, u_int limit)$/;"	f
format_trim_right	format-draw.c	/^format_trim_right(const char *expanded, u_int limit)$/;"	f
format_true	format.c	/^format_true(const char *s)$/;"	f
format_update_ranges	format-draw.c	/^format_update_ranges(struct format_ranges *frs, struct screen *s, u_int offset,$/;"	f	file:
format_upper	format.c	/^static const char *format_upper[] = {$/;"	v	file:
format_width	format-draw.c	/^format_width(const char *expanded)$/;"	f
format_window_name	names.c	/^format_window_name(struct window *w)$/;"	f	file:
formats	cmd-queue.c	/^	struct format_tree	*formats;$/;"	m	struct:cmdq_state	typeref:struct:cmdq_state::format_tree	file:
formats	tmux.h	/^	void		 (*formats)(struct window_mode_entry *,$/;"	m	struct:window_mode
free	tmux.h	/^	void		 (*free)(struct window_mode_entry *);$/;"	m	struct:window_mode
freecb	job.c	/^	job_free_cb		 freecb;$/;"	m	struct:job	file:
freezero	compat/freezero.c	/^freezero(void *ptr, size_t size)$/;"	f
from	tmux.h	/^	const char		*from;$/;"	m	struct:options_name_map
fs	menu.c	/^	struct cmd_find_state	 fs;$/;"	m	struct:menu_data	typeref:struct:menu_data::cmd_find_state	file:
fs	notify.c	/^	struct cmd_find_state	 fs;$/;"	m	struct:notify_entry	typeref:struct:notify_entry::cmd_find_state	file:
fs	popup.c	/^	struct cmd_find_state	  fs;$/;"	m	struct:popup_data	typeref:struct:popup_data::cmd_find_state	file:
fs	tmux.h	/^	struct cmd_find_state	 fs;$/;"	m	struct:cmd_parse_input	typeref:struct:cmd_parse_input::cmd_find_state
fs	window-buffer.c	/^	struct cmd_find_state		  fs;$/;"	m	struct:window_buffer_modedata	typeref:struct:window_buffer_modedata::cmd_find_state	file:
fs	window-customize.c	/^	struct cmd_find_state			  fs;$/;"	m	struct:window_customize_modedata	typeref:struct:window_customize_modedata::cmd_find_state	file:
fs	window-tree.c	/^	struct cmd_find_state		  fs;$/;"	m	struct:window_tree_modedata	typeref:struct:window_tree_modedata::cmd_find_state	file:
ft	format.c	/^	struct format_tree	*ft;$/;"	m	struct:format_expand_state	typeref:struct:format_expand_state::format_tree	file:
g0set	input.c	/^	int			g0set;	\/* 1 if ACS *\/$/;"	m	struct:input_cell	file:
g1set	input.c	/^	int			g1set;	\/* 1 if ACS *\/$/;"	m	struct:input_cell	file:
gc	screen-write.c	/^	struct grid_cell	 gc;$/;"	m	struct:screen_write_collect_item	typeref:struct:screen_write_collect_item::grid_cell	file:
gc	tmux.h	/^	struct grid_cell	gc;$/;"	m	struct:style	typeref:struct:style::grid_cell
gentry	tmux.h	/^	TAILQ_ENTRY(session) gentry;$/;"	m	struct:session
get_timer	tmux.c	/^get_timer(void)$/;"	f
getdelim	compat/getline.c	/^getdelim(char **buf, size_t *bufsiz, int delimiter, FILE *fp)$/;"	f	file:
getdtablecount	compat/getdtablecount.c	/^getdtablecount(void)$/;"	f
getdtablesize	compat/getdtablesize.c	/^getdtablesize(void)$/;"	f
getline	compat/getline.c	/^getline(char **buf, size_t *bufsiz, FILE *fp)$/;"	f
getopt	compat.h	415;"	d
getpid	win32_headers/win32_posix.h	20;"	d
getprogname	compat/getprogname.c	/^getprogname(void)$/;"	f
getptmfd	compat/fdforkpty.c	/^getptmfd(void)$/;"	f
getshell	tmux.c	/^getshell(void)$/;"	f	file:
getversion	tmux.c	/^getversion(void)$/;"	f
global_environ	tmux.c	/^struct environ_tree	*global_environ;$/;"	v	typeref:struct:environ_tree
global_options	tmux.c	/^struct options	*global_options;	\/* server options *\/$/;"	v	typeref:struct:options
global_s_options	tmux.c	/^struct options	*global_s_options;	\/* session options *\/$/;"	v	typeref:struct:options
global_w_options	tmux.c	/^struct options	*global_w_options;	\/* window options *\/$/;"	v	typeref:struct:options
grid	tmux.h	/^	struct grid		*grid;		\/* grid data *\/$/;"	m	struct:screen	typeref:struct:screen::grid
grid	tmux.h	/^struct grid {$/;"	s
grid_adjust_lines	grid.c	/^grid_adjust_lines(struct grid *gd, u_int lines)$/;"	f
grid_cell	tmux.h	/^struct grid_cell {$/;"	s
grid_cell_entry	tmux.h	/^struct grid_cell_entry {$/;"	s
grid_cells_equal	grid.c	/^grid_cells_equal(const struct grid_cell *gc1, const struct grid_cell *gc2)$/;"	f
grid_cells_look_equal	grid.c	/^grid_cells_look_equal(const struct grid_cell *gc1, const struct grid_cell *gc2)$/;"	f
grid_check_y	grid.c	/^grid_check_y(struct grid *gd, const char *from, u_int py)$/;"	f	file:
grid_clear	grid.c	/^grid_clear(struct grid *gd, u_int px, u_int py, u_int nx, u_int ny, u_int bg)$/;"	f
grid_clear_cell	grid.c	/^grid_clear_cell(struct grid *gd, u_int px, u_int py, u_int bg)$/;"	f	file:
grid_clear_history	grid.c	/^grid_clear_history(struct grid *gd)$/;"	f
grid_clear_lines	grid.c	/^grid_clear_lines(struct grid *gd, u_int py, u_int ny, u_int bg)$/;"	f
grid_cleared_cell	grid.c	/^static const struct grid_cell grid_cleared_cell = {$/;"	v	typeref:struct:grid_cell	file:
grid_cleared_entry	grid.c	/^static const struct grid_cell_entry grid_cleared_entry = {$/;"	v	typeref:struct:grid_cell_entry	file:
grid_collect_history	grid.c	/^grid_collect_history(struct grid *gd)$/;"	f
grid_compact_line	grid.c	/^grid_compact_line(struct grid_line *gl)$/;"	f	file:
grid_compare	grid.c	/^grid_compare(struct grid *ga, struct grid *gb)$/;"	f
grid_create	grid.c	/^grid_create(u_int sx, u_int sy, u_int hlimit)$/;"	f
grid_default_cell	grid.c	/^const struct grid_cell grid_default_cell = {$/;"	v	typeref:struct:grid_cell
grid_destroy	grid.c	/^grid_destroy(struct grid *gd)$/;"	f
grid_duplicate_lines	grid.c	/^grid_duplicate_lines(struct grid *dst, u_int dy, struct grid *src, u_int sy,$/;"	f
grid_empty_line	grid.c	/^grid_empty_line(struct grid *gd, u_int py, u_int bg)$/;"	f
grid_expand_line	grid.c	/^grid_expand_line(struct grid *gd, u_int py, u_int sx, u_int bg)$/;"	f	file:
grid_extd_entry	tmux.h	/^struct grid_extd_entry {$/;"	s
grid_extended_cell	grid.c	/^grid_extended_cell(struct grid_line *gl, struct grid_cell_entry *gce,$/;"	f	file:
grid_free_line	grid.c	/^grid_free_line(struct grid *gd, u_int py)$/;"	f	file:
grid_free_lines	grid.c	/^grid_free_lines(struct grid *gd, u_int py, u_int ny)$/;"	f	file:
grid_get_cell	grid.c	/^grid_get_cell(struct grid *gd, u_int px, u_int py, struct grid_cell *gc)$/;"	f
grid_get_cell1	grid.c	/^grid_get_cell1(struct grid_line *gl, u_int px, struct grid_cell *gc)$/;"	f	file:
grid_get_extended_cell	grid.c	/^grid_get_extended_cell(struct grid_line *gl, struct grid_cell_entry *gce,$/;"	f	file:
grid_get_line	grid.c	/^grid_get_line(struct grid *gd, u_int line)$/;"	f
grid_line	tmux.h	/^struct grid_line {$/;"	s
grid_line_length	grid.c	/^grid_line_length(struct grid *gd, u_int py)$/;"	f
grid_move_cells	grid.c	/^grid_move_cells(struct grid *gd, u_int dx, u_int px, u_int py, u_int nx,$/;"	f
grid_move_lines	grid.c	/^grid_move_lines(struct grid *gd, u_int dy, u_int py, u_int ny, u_int bg)$/;"	f
grid_need_extended_cell	grid.c	/^grid_need_extended_cell(const struct grid_cell_entry *gce,$/;"	f	file:
grid_padding_cell	grid.c	/^static const struct grid_cell grid_padding_cell = {$/;"	v	typeref:struct:grid_cell	file:
grid_peek_line	grid.c	/^grid_peek_line(struct grid *gd, u_int py)$/;"	f
grid_reflow	grid.c	/^grid_reflow(struct grid *gd, u_int sx)$/;"	f
grid_reflow_add	grid.c	/^grid_reflow_add(struct grid *gd, u_int n)$/;"	f	file:
grid_reflow_dead	grid.c	/^grid_reflow_dead(struct grid_line *gl)$/;"	f	file:
grid_reflow_join	grid.c	/^grid_reflow_join(struct grid *target, struct grid *gd, u_int sx, u_int yy,$/;"	f	file:
grid_reflow_move	grid.c	/^grid_reflow_move(struct grid *gd, struct grid_line *from)$/;"	f	file:
grid_reflow_split	grid.c	/^grid_reflow_split(struct grid *target, struct grid *gd, u_int sx, u_int yy,$/;"	f	file:
grid_remove_history	grid.c	/^grid_remove_history(struct grid *gd, u_int ny)$/;"	f
grid_scroll_history	grid.c	/^grid_scroll_history(struct grid *gd, u_int bg)$/;"	f
grid_scroll_history_region	grid.c	/^grid_scroll_history_region(struct grid *gd, u_int upper, u_int lower, u_int bg)$/;"	f
grid_set_cell	grid.c	/^grid_set_cell(struct grid *gd, u_int px, u_int py, const struct grid_cell *gc)$/;"	f
grid_set_cells	grid.c	/^grid_set_cells(struct grid *gd, u_int px, u_int py, const struct grid_cell *gc,$/;"	f
grid_set_padding	grid.c	/^grid_set_padding(struct grid *gd, u_int px, u_int py)$/;"	f
grid_store_cell	grid.c	/^grid_store_cell(struct grid_cell_entry *gce, const struct grid_cell *gc,$/;"	f	file:
grid_string_cells	grid.c	/^grid_string_cells(struct grid *gd, u_int px, u_int py, u_int nx,$/;"	f
grid_string_cells_bg	grid.c	/^grid_string_cells_bg(const struct grid_cell *gc, int *values)$/;"	f	file:
grid_string_cells_code	grid.c	/^grid_string_cells_code(const struct grid_cell *lastgc,$/;"	f	file:
grid_string_cells_fg	grid.c	/^grid_string_cells_fg(const struct grid_cell *gc, int *values)$/;"	f	file:
grid_trim_history	grid.c	/^grid_trim_history(struct grid *gd, u_int ny)$/;"	f	file:
grid_unwrap_position	grid.c	/^grid_unwrap_position(struct grid *gd, u_int *px, u_int *py, u_int wx, u_int wy)$/;"	f
grid_view_clear	grid-view.c	/^grid_view_clear(struct grid *gd, u_int px, u_int py, u_int nx, u_int ny,$/;"	f
grid_view_clear_history	grid-view.c	/^grid_view_clear_history(struct grid *gd, u_int bg)$/;"	f
grid_view_delete_cells	grid-view.c	/^grid_view_delete_cells(struct grid *gd, u_int px, u_int py, u_int nx, u_int bg)$/;"	f
grid_view_delete_lines	grid-view.c	/^grid_view_delete_lines(struct grid *gd, u_int py, u_int ny, u_int bg)$/;"	f
grid_view_delete_lines_region	grid-view.c	/^grid_view_delete_lines_region(struct grid *gd, u_int rlower, u_int py,$/;"	f
grid_view_get_cell	grid-view.c	/^grid_view_get_cell(struct grid *gd, u_int px, u_int py, struct grid_cell *gc)$/;"	f
grid_view_insert_cells	grid-view.c	/^grid_view_insert_cells(struct grid *gd, u_int px, u_int py, u_int nx, u_int bg)$/;"	f
grid_view_insert_lines	grid-view.c	/^grid_view_insert_lines(struct grid *gd, u_int py, u_int ny, u_int bg)$/;"	f
grid_view_insert_lines_region	grid-view.c	/^grid_view_insert_lines_region(struct grid *gd, u_int rlower, u_int py,$/;"	f
grid_view_scroll_region_down	grid-view.c	/^grid_view_scroll_region_down(struct grid *gd, u_int rupper, u_int rlower,$/;"	f
grid_view_scroll_region_up	grid-view.c	/^grid_view_scroll_region_up(struct grid *gd, u_int rupper, u_int rlower,$/;"	f
grid_view_set_cell	grid-view.c	/^grid_view_set_cell(struct grid *gd, u_int px, u_int py,$/;"	f
grid_view_set_cells	grid-view.c	/^grid_view_set_cells(struct grid *gd, u_int px, u_int py,$/;"	f
grid_view_set_padding	grid-view.c	/^grid_view_set_padding(struct grid *gd, u_int px, u_int py)$/;"	f
grid_view_string_cells	grid-view.c	/^grid_view_string_cells(struct grid *gd, u_int px, u_int py, u_int nx)$/;"	f
grid_view_x	grid-view.c	30;"	d	file:
grid_view_y	grid-view.c	31;"	d	file:
grid_wrap_position	grid.c	/^grid_wrap_position(struct grid *gd, u_int px, u_int py, u_int *wx, u_int *wy)$/;"	f
group	cmd-queue.c	/^	u_int			 group;$/;"	m	struct:cmdq_item	file:
group	cmd.c	/^	u_int			  group;$/;"	m	struct:cmd	file:
group	tmux.h	/^	u_int		 group;$/;"	m	struct:cmd_list
handler	input.c	/^	int				(*handler)(struct input_ctx *);$/;"	m	struct:input_transition	file:
have	tmux.h	/^	u_char	have;$/;"	m	struct:utf8_data
hdr	compat/imsg.h	/^	struct imsg_hdr	 hdr;$/;"	m	struct:imsg	typeref:struct:imsg::imsg_hdr
height	mode-tree.c	/^	u_int			  height;$/;"	m	struct:mode_tree_data	file:
heightcb	mode-tree.c	/^	mode_tree_height_cb       heightcb;$/;"	m	struct:mode_tree_data	file:
hidden	screen.c	/^	int		 hidden;$/;"	m	struct:screen_sel	file:
hidden_assignment	cmd-parse.y	/^hidden_assignment : TMUX_YACC_HIDDEN TMUX_YACC_EQUALS$/;"	l
hide_global	window-customize.c	/^	int					  hide_global;$/;"	m	struct:window_customize_modedata	file:
hide_position	window-copy.c	/^	int		 hide_position;	\/* hide position marker *\/$/;"	m	struct:window_copy_mode_data	file:
hlimit	tmux.h	/^	u_int			 hlimit;$/;"	m	struct:grid
hscrolled	tmux.h	/^	u_int			 hscrolled;$/;"	m	struct:grid
hsize	tmux.h	/^	u_int			 hsize;$/;"	m	struct:grid
ibuf	compat/imsg.h	/^struct ibuf {$/;"	s
ibuf	proc.c	/^	struct imsgbuf	 ibuf;$/;"	m	struct:tmuxpeer	typeref:struct:tmuxpeer::imsgbuf	file:
ibuf_add	compat/imsg-buffer.c	/^ibuf_add(struct ibuf *buf, const void *data, size_t len)$/;"	f
ibuf_close	compat/imsg-buffer.c	/^ibuf_close(struct msgbuf *msgbuf, struct ibuf *buf)$/;"	f
ibuf_dequeue	compat/imsg-buffer.c	/^ibuf_dequeue(struct msgbuf *msgbuf, struct ibuf *buf)$/;"	f	file:
ibuf_dynamic	compat/imsg-buffer.c	/^ibuf_dynamic(size_t len, size_t max)$/;"	f
ibuf_enqueue	compat/imsg-buffer.c	/^ibuf_enqueue(struct msgbuf *msgbuf, struct ibuf *buf)$/;"	f	file:
ibuf_free	compat/imsg-buffer.c	/^ibuf_free(struct ibuf *buf)$/;"	f
ibuf_left	compat/imsg-buffer.c	/^ibuf_left(struct ibuf *buf)$/;"	f
ibuf_open	compat/imsg-buffer.c	/^ibuf_open(size_t len)$/;"	f
ibuf_read	compat/imsg.h	/^struct ibuf_read {$/;"	s
ibuf_realloc	compat/imsg-buffer.c	/^ibuf_realloc(struct ibuf *buf, size_t len)$/;"	f	file:
ibuf_reserve	compat/imsg-buffer.c	/^ibuf_reserve(struct ibuf *buf, size_t len)$/;"	f
ibuf_seek	compat/imsg-buffer.c	/^ibuf_seek(struct ibuf *buf, size_t pos, size_t len)$/;"	f
ibuf_size	compat/imsg-buffer.c	/^ibuf_size(struct ibuf *buf)$/;"	f
ibuf_write	compat/imsg-buffer.c	/^ibuf_write(struct msgbuf *msgbuf)$/;"	f
ictx	popup.c	/^	struct input_ctx	 *ictx;$/;"	m	struct:popup_data	typeref:struct:popup_data::input_ctx	file:
ictx	tmux.h	/^	struct input_ctx *ictx;$/;"	m	struct:window_pane	typeref:struct:window_pane::input_ctx
id	control.c	/^	u_int				 id;$/;"	m	struct:control_sub	file:
id	tmux.h	/^	u_int		 id;$/;"	m	struct:session
id	tmux.h	/^	u_int		 id;$/;"	m	struct:window
id	tmux.h	/^	u_int		 id;$/;"	m	struct:window_pane
idx	cmd-command-prompt.c	/^	int	 idx;$/;"	m	struct:cmd_command_prompt_cdata	file:
idx	control.c	/^	u_int				 idx;$/;"	m	struct:control_sub_pane	file:
idx	control.c	/^	u_int				 idx;$/;"	m	struct:control_sub_window	file:
idx	tmux.h	/^	int			  idx;$/;"	m	struct:spawn_context
idx	tmux.h	/^	int			 idx;$/;"	m	struct:cmd_find_state
idx	tmux.h	/^	int		 idx;$/;"	m	struct:winlink
idx	window-customize.c	/^	int					 idx;$/;"	m	struct:window_customize_itemdata	file:
if_close	cmd-parse.y	/^if_close	: TMUX_YACC_ENDIF$/;"	l
if_elif	cmd-parse.y	/^if_elif		: TMUX_YACC_ELIF expanded$/;"	l
if_else	cmd-parse.y	/^if_else		: TMUX_YACC_ELSE$/;"	l
if_open	cmd-parse.y	/^if_open		: TMUX_YACC_IF expanded$/;"	l
ignore	tmux.h	/^	int			ignore;$/;"	m	struct:style
ignore	tmux.h	/^	int		ignore;$/;"	m	struct:mouse_event
ignore_client_size	resize.c	/^ignore_client_size(struct client *c)$/;"	f	file:
imsg	compat/imsg.h	/^struct imsg {$/;"	s
imsg_add	compat/imsg.c	/^imsg_add(struct ibuf *msg, const void *data, uint16_t datalen)$/;"	f
imsg_clear	compat/imsg.c	/^imsg_clear(struct imsgbuf *ibuf)$/;"	f
imsg_close	compat/imsg.c	/^imsg_close(struct imsgbuf *ibuf, struct ibuf *msg)$/;"	f
imsg_compose	compat/imsg.c	/^imsg_compose(struct imsgbuf *ibuf, uint32_t type, uint32_t peerid, pid_t pid,$/;"	f
imsg_create	compat/imsg.c	/^imsg_create(struct imsgbuf *ibuf, uint32_t type, uint32_t peerid, pid_t pid,$/;"	f
imsg_fd	compat/imsg.h	/^struct imsg_fd {$/;"	s
imsg_fd_overhead	compat/imsg.c	/^int	 imsg_fd_overhead = 0;$/;"	v
imsg_flush	compat/imsg.c	/^imsg_flush(struct imsgbuf *ibuf)$/;"	f
imsg_free	compat/imsg.c	/^imsg_free(struct imsg *imsg)$/;"	f
imsg_get	compat/imsg.c	/^imsg_get(struct imsgbuf *ibuf, struct imsg *imsg)$/;"	f
imsg_get_fd	compat/imsg.c	/^imsg_get_fd(struct imsgbuf *ibuf)$/;"	f	file:
imsg_hdr	compat/imsg.h	/^struct imsg_hdr {$/;"	s
imsg_init	compat/imsg.c	/^imsg_init(struct imsgbuf *ibuf, int fd)$/;"	f
imsg_read	compat/imsg.c	/^imsg_read(struct imsgbuf *ibuf)$/;"	f
imsgbuf	compat/imsg.h	/^struct imsgbuf {$/;"	s
in	tmux.h	/^	struct evbuffer	*in;$/;"	m	struct:tty	typeref:struct:tty::evbuffer
index	format-draw.c	/^	u_int				 index;$/;"	m	struct:format_range	file:
index	options.c	/^	u_int				 index;$/;"	m	struct:options_array_item	file:
index	utf8.c	/^	u_int			index;$/;"	m	struct:utf8_item	file:
init	tmux.h	/^	struct screen	*(*init)(struct window_mode_entry *,$/;"	m	struct:window_mode	typeref:struct:window_mode::init
init_ctx_cb	tmux.h	/^	screen_write_init_ctx_cb init_ctx_cb;$/;"	m	struct:screen_write_ctx
init_winsock	tmux.c	/^int init_winsock()$/;"	f
input	cmd-if-shell.c	/^	struct cmd_parse_input	 input;$/;"	m	struct:cmd_if_shell_data	typeref:struct:cmd_if_shell_data::cmd_parse_input	file:
input_buf	input.c	/^	u_char		       *input_buf;$/;"	m	struct:input_ctx	file:
input_c0_dispatch	input.c	/^input_c0_dispatch(struct input_ctx *ictx)$/;"	f	file:
input_cell	input.c	/^struct input_cell {$/;"	s	file:
input_clear	input.c	/^input_clear(struct input_ctx *ictx)$/;"	f	file:
input_csi_dispatch	input.c	/^input_csi_dispatch(struct input_ctx *ictx)$/;"	f	file:
input_csi_dispatch_rm	input.c	/^input_csi_dispatch_rm(struct input_ctx *ictx)$/;"	f	file:
input_csi_dispatch_rm_private	input.c	/^input_csi_dispatch_rm_private(struct input_ctx *ictx)$/;"	f	file:
input_csi_dispatch_sgr	input.c	/^input_csi_dispatch_sgr(struct input_ctx *ictx)$/;"	f	file:
input_csi_dispatch_sgr_256	input.c	/^input_csi_dispatch_sgr_256(struct input_ctx *ictx, int fgbg, u_int *i)$/;"	f	file:
input_csi_dispatch_sgr_256_do	input.c	/^input_csi_dispatch_sgr_256_do(struct input_ctx *ictx, int fgbg, int c)$/;"	f	file:
input_csi_dispatch_sgr_colon	input.c	/^input_csi_dispatch_sgr_colon(struct input_ctx *ictx, u_int i)$/;"	f	file:
input_csi_dispatch_sgr_rgb	input.c	/^input_csi_dispatch_sgr_rgb(struct input_ctx *ictx, int fgbg, u_int *i)$/;"	f	file:
input_csi_dispatch_sgr_rgb_do	input.c	/^input_csi_dispatch_sgr_rgb_do(struct input_ctx *ictx, int fgbg, int r, int g,$/;"	f	file:
input_csi_dispatch_sm	input.c	/^input_csi_dispatch_sm(struct input_ctx *ictx)$/;"	f	file:
input_csi_dispatch_sm_private	input.c	/^input_csi_dispatch_sm_private(struct input_ctx *ictx)$/;"	f	file:
input_csi_dispatch_winops	input.c	/^input_csi_dispatch_winops(struct input_ctx *ictx)$/;"	f	file:
input_csi_table	input.c	/^static const struct input_table_entry input_csi_table[] = {$/;"	v	typeref:struct:input_table_entry	file:
input_csi_type	input.c	/^enum input_csi_type {$/;"	g	file:
input_ctx	input.c	/^struct input_ctx {$/;"	s	file:
input_dcs_dispatch	input.c	/^input_dcs_dispatch(struct input_ctx *ictx)$/;"	f	file:
input_end	input.c	/^	}			input_end;$/;"	m	struct:input_ctx	typeref:enum:input_ctx::__anon4	file:
input_end_bel	input.c	/^input_end_bel(struct input_ctx *ictx)$/;"	f	file:
input_enter_apc	input.c	/^input_enter_apc(struct input_ctx *ictx)$/;"	f	file:
input_enter_dcs	input.c	/^input_enter_dcs(struct input_ctx *ictx)$/;"	f	file:
input_enter_osc	input.c	/^input_enter_osc(struct input_ctx *ictx)$/;"	f	file:
input_enter_rename	input.c	/^input_enter_rename(struct input_ctx *ictx)$/;"	f	file:
input_esc_dispatch	input.c	/^input_esc_dispatch(struct input_ctx *ictx)$/;"	f	file:
input_esc_table	input.c	/^static const struct input_table_entry input_esc_table[] = {$/;"	v	typeref:struct:input_table_entry	file:
input_esc_type	input.c	/^enum input_esc_type {$/;"	g	file:
input_exit_apc	input.c	/^input_exit_apc(struct input_ctx *ictx)$/;"	f	file:
input_exit_osc	input.c	/^input_exit_osc(struct input_ctx *ictx)$/;"	f	file:
input_exit_rename	input.c	/^input_exit_rename(struct input_ctx *ictx)$/;"	f	file:
input_free	input.c	/^input_free(struct input_ctx *ictx)$/;"	f
input_get	input.c	/^input_get(struct input_ctx *ictx, u_int validx, int minval, int defval)$/;"	f	file:
input_ground	input.c	/^input_ground(struct input_ctx *ictx)$/;"	f	file:
input_init	input.c	/^input_init(struct window_pane *wp, struct bufferevent *bev)$/;"	f
input_input	input.c	/^input_input(struct input_ctx *ictx)$/;"	f	file:
input_intermediate	input.c	/^input_intermediate(struct input_ctx *ictx)$/;"	f	file:
input_key	input-keys.c	/^input_key(struct screen *s, struct bufferevent *bev, key_code key)$/;"	f
input_key_build	input-keys.c	/^input_key_build(void)$/;"	f
input_key_cmp	input-keys.c	/^input_key_cmp(struct input_key_entry *ike1, struct input_key_entry *ike2)$/;"	f	file:
input_key_defaults	input-keys.c	/^static struct input_key_entry input_key_defaults[] = {$/;"	v	typeref:struct:input_key_entry	file:
input_key_entry	input-keys.c	/^struct input_key_entry {$/;"	s	file:
input_key_get	input-keys.c	/^input_key_get (key_code key)$/;"	f	file:
input_key_get_mouse	input-keys.c	/^input_key_get_mouse(struct screen *s, struct mouse_event *m, u_int x, u_int y,$/;"	f
input_key_modifiers	input-keys.c	/^static const key_code input_key_modifiers[] = {$/;"	v	file:
input_key_mouse	input-keys.c	/^input_key_mouse(struct window_pane *wp, struct mouse_event *m)$/;"	f	file:
input_key_pane	input-keys.c	/^input_key_pane(struct window_pane *wp, key_code key, struct mouse_event *m)$/;"	f
input_key_split2	input-keys.c	/^input_key_split2(u_int c, u_char *dst)$/;"	f	file:
input_key_tree	input-keys.c	/^struct input_key_tree input_key_tree = RB_INITIALIZER(&input_key_tree);$/;"	v	typeref:struct:input_key_tree
input_len	input.c	/^	size_t			input_len;$/;"	m	struct:input_ctx	file:
input_osc_10	input.c	/^input_osc_10(struct input_ctx *ictx, const char *p)$/;"	f	file:
input_osc_104	input.c	/^input_osc_104(struct input_ctx *ictx, const char *p)$/;"	f	file:
input_osc_11	input.c	/^input_osc_11(struct input_ctx *ictx, const char *p)$/;"	f	file:
input_osc_4	input.c	/^input_osc_4(struct input_ctx *ictx, const char *p)$/;"	f	file:
input_osc_52	input.c	/^input_osc_52(struct input_ctx *ictx, const char *p)$/;"	f	file:
input_osc_colour_reply	input.c	/^input_osc_colour_reply(struct input_ctx *ictx, u_int n, int c)$/;"	f	file:
input_osc_parse_colour	input.c	/^input_osc_parse_colour(const char *p, u_int *r, u_int *g, u_int *b)$/;"	f	file:
input_param	input.c	/^struct input_param {$/;"	s	file:
input_parameter	input.c	/^input_parameter(struct input_ctx *ictx)$/;"	f	file:
input_parse	input.c	/^input_parse(struct input_ctx *ictx, u_char *buf, size_t len)$/;"	f	file:
input_parse_buffer	input.c	/^input_parse_buffer(struct window_pane *wp, u_char *buf, size_t len)$/;"	f
input_parse_pane	input.c	/^input_parse_pane(struct window_pane *wp)$/;"	f
input_parse_screen	input.c	/^input_parse_screen(struct input_ctx *ictx, struct screen *s,$/;"	f
input_pending	input.c	/^input_pending(struct input_ctx *ictx)$/;"	f
input_print	input.c	/^input_print(struct input_ctx *ictx)$/;"	f	file:
input_reply	input.c	/^input_reply(struct input_ctx *ictx, const char *fmt, ...)$/;"	f	file:
input_reset	input.c	/^input_reset(struct input_ctx *ictx, int clear)$/;"	f
input_reset_cell	input.c	/^input_reset_cell(struct input_ctx *ictx)$/;"	f	file:
input_restore_state	input.c	/^input_restore_state(struct input_ctx *ictx)$/;"	f	file:
input_save_state	input.c	/^input_save_state(struct input_ctx *ictx)$/;"	f	file:
input_set_state	input.c	/^input_set_state(struct input_ctx *ictx, const struct input_transition *itr)$/;"	f	file:
input_space	input.c	/^	size_t			input_space;$/;"	m	struct:input_ctx	file:
input_split	input.c	/^input_split(struct input_ctx *ictx)$/;"	f	file:
input_start_timer	input.c	/^input_start_timer(struct input_ctx *ictx)$/;"	f	file:
input_state	input.c	/^struct input_state {$/;"	s	file:
input_state_apc_string	input.c	/^static const struct input_state input_state_apc_string = {$/;"	v	typeref:struct:input_state	file:
input_state_apc_string_table	input.c	/^static const struct input_transition input_state_apc_string_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_apc_string_table	input.c	/^static const struct input_transition input_state_apc_string_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_consume_st	input.c	/^static const struct input_state input_state_consume_st = {$/;"	v	typeref:struct:input_state	file:
input_state_consume_st_table	input.c	/^static const struct input_transition input_state_consume_st_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_consume_st_table	input.c	/^static const struct input_transition input_state_consume_st_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_csi_enter	input.c	/^static const struct input_state input_state_csi_enter = {$/;"	v	typeref:struct:input_state	file:
input_state_csi_enter_table	input.c	/^static const struct input_transition input_state_csi_enter_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_csi_enter_table	input.c	/^static const struct input_transition input_state_csi_enter_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_csi_ignore	input.c	/^static const struct input_state input_state_csi_ignore = {$/;"	v	typeref:struct:input_state	file:
input_state_csi_ignore_table	input.c	/^static const struct input_transition input_state_csi_ignore_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_csi_ignore_table	input.c	/^static const struct input_transition input_state_csi_ignore_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_csi_intermediate	input.c	/^static const struct input_state input_state_csi_intermediate = {$/;"	v	typeref:struct:input_state	file:
input_state_csi_intermediate_table	input.c	/^static const struct input_transition input_state_csi_intermediate_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_csi_intermediate_table	input.c	/^static const struct input_transition input_state_csi_intermediate_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_csi_parameter	input.c	/^static const struct input_state input_state_csi_parameter = {$/;"	v	typeref:struct:input_state	file:
input_state_csi_parameter_table	input.c	/^static const struct input_transition input_state_csi_parameter_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_csi_parameter_table	input.c	/^static const struct input_transition input_state_csi_parameter_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_enter	input.c	/^static const struct input_state input_state_dcs_enter = {$/;"	v	typeref:struct:input_state	file:
input_state_dcs_enter_table	input.c	/^static const struct input_transition input_state_dcs_enter_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_enter_table	input.c	/^static const struct input_transition input_state_dcs_enter_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_escape	input.c	/^static const struct input_state input_state_dcs_escape = {$/;"	v	typeref:struct:input_state	file:
input_state_dcs_escape_table	input.c	/^static const struct input_transition input_state_dcs_escape_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_escape_table	input.c	/^static const struct input_transition input_state_dcs_escape_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_handler	input.c	/^static const struct input_state input_state_dcs_handler = {$/;"	v	typeref:struct:input_state	file:
input_state_dcs_handler_table	input.c	/^static const struct input_transition input_state_dcs_handler_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_handler_table	input.c	/^static const struct input_transition input_state_dcs_handler_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_ignore	input.c	/^static const struct input_state input_state_dcs_ignore = {$/;"	v	typeref:struct:input_state	file:
input_state_dcs_ignore_table	input.c	/^static const struct input_transition input_state_dcs_ignore_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_ignore_table	input.c	/^static const struct input_transition input_state_dcs_ignore_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_intermediate	input.c	/^static const struct input_state input_state_dcs_intermediate = {$/;"	v	typeref:struct:input_state	file:
input_state_dcs_intermediate_table	input.c	/^static const struct input_transition input_state_dcs_intermediate_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_intermediate_table	input.c	/^static const struct input_transition input_state_dcs_intermediate_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_parameter	input.c	/^static const struct input_state input_state_dcs_parameter = {$/;"	v	typeref:struct:input_state	file:
input_state_dcs_parameter_table	input.c	/^static const struct input_transition input_state_dcs_parameter_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_dcs_parameter_table	input.c	/^static const struct input_transition input_state_dcs_parameter_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_esc_enter	input.c	/^static const struct input_state input_state_esc_enter = {$/;"	v	typeref:struct:input_state	file:
input_state_esc_enter_table	input.c	/^static const struct input_transition input_state_esc_enter_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_esc_enter_table	input.c	/^static const struct input_transition input_state_esc_enter_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_esc_intermediate	input.c	/^static const struct input_state input_state_esc_intermediate = {$/;"	v	typeref:struct:input_state	file:
input_state_esc_intermediate_table	input.c	/^static const struct input_transition input_state_esc_intermediate_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_esc_intermediate_table	input.c	/^static const struct input_transition input_state_esc_intermediate_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_ground	input.c	/^static const struct input_state input_state_ground = {$/;"	v	typeref:struct:input_state	file:
input_state_ground_table	input.c	/^static const struct input_transition input_state_ground_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_ground_table	input.c	/^static const struct input_transition input_state_ground_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_osc_string	input.c	/^static const struct input_state input_state_osc_string = {$/;"	v	typeref:struct:input_state	file:
input_state_osc_string_table	input.c	/^static const struct input_transition input_state_osc_string_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_osc_string_table	input.c	/^static const struct input_transition input_state_osc_string_table[];$/;"	v	typeref:struct:input_transition	file:
input_state_rename_string	input.c	/^static const struct input_state input_state_rename_string = {$/;"	v	typeref:struct:input_state	file:
input_state_rename_string_table	input.c	/^static const struct input_transition input_state_rename_string_table[] = {$/;"	v	typeref:struct:input_transition	file:
input_state_rename_string_table	input.c	/^static const struct input_transition input_state_rename_string_table[];$/;"	v	typeref:struct:input_transition	file:
input_table_compare	input.c	/^input_table_compare(const void *key, const void *value)$/;"	f	file:
input_table_entry	input.c	/^struct input_table_entry {$/;"	s	file:
input_timer_callback	input.c	/^input_timer_callback(__unused int fd, __unused short events, void *arg)$/;"	f	file:
input_top_bit_set	input.c	/^input_top_bit_set(struct input_ctx *ictx)$/;"	f	file:
input_transition	input.c	/^struct input_transition {$/;"	s	file:
inputs	cmd-command-prompt.c	/^	char	*inputs;$/;"	m	struct:cmd_command_prompt_cdata	file:
interm	input.c	/^	const char     *interm;$/;"	m	struct:input_table_entry	file:
interm_buf	input.c	/^	u_char			interm_buf[4];$/;"	m	struct:input_ctx	file:
interm_len	input.c	/^	size_t			interm_len;$/;"	m	struct:input_ctx	file:
is_runnable	osdep-dragonfly.c	41;"	d	file:
is_runnable	osdep-freebsd.c	45;"	d	file:
is_runnable	osdep-netbsd.c	33;"	d	file:
is_runnable	osdep-openbsd.c	35;"	d	file:
is_stopped	osdep-dragonfly.c	43;"	d	file:
is_stopped	osdep-freebsd.c	47;"	d	file:
is_stopped	osdep-netbsd.c	35;"	d	file:
is_stopped	osdep-openbsd.c	37;"	d	file:
isoctal	compat/unvis.c	47;"	d	file:
isoctal	compat/vis.c	40;"	d	file:
isvisible	compat/vis.c	41;"	d	file:
item	cmd-display-panes.c	/^	struct cmdq_item	*item;$/;"	m	struct:cmd_display_panes_data	typeref:struct:cmd_display_panes_data::cmdq_item	file:
item	cmd-if-shell.c	/^	struct cmdq_item	*item;$/;"	m	struct:cmd_if_shell_data	typeref:struct:cmd_if_shell_data::cmdq_item	file:
item	cmd-load-buffer.c	/^	struct cmdq_item	*item;$/;"	m	struct:cmd_load_buffer_data	typeref:struct:cmd_load_buffer_data::cmdq_item	file:
item	cmd-queue.c	/^	struct cmdq_item	*item;$/;"	m	struct:cmdq_list	typeref:struct:cmdq_list::cmdq_item	file:
item	cmd-run-shell.c	/^	struct cmdq_item	*item;$/;"	m	struct:cmd_run_shell_data	typeref:struct:cmd_run_shell_data::cmdq_item	file:
item	cmd-source-file.c	/^	struct cmdq_item	 *item;$/;"	m	struct:cmd_source_file_data	typeref:struct:cmd_source_file_data::cmdq_item	file:
item	cmd-wait-for.c	/^	struct cmdq_item	*item;$/;"	m	struct:wait_item	typeref:struct:wait_item::cmdq_item	file:
item	format.c	/^	struct cmdq_item	*item;$/;"	m	struct:format_tree	typeref:struct:format_tree::cmdq_item	file:
item	menu.c	/^	struct cmdq_item	*item;$/;"	m	struct:menu_data	typeref:struct:menu_data::cmdq_item	file:
item	mode-tree.c	/^	struct mode_tree_item		*item;$/;"	m	struct:mode_tree_line	typeref:struct:mode_tree_line::mode_tree_item	file:
item	popup.c	/^	struct cmdq_item	 *item;$/;"	m	struct:popup_data	typeref:struct:popup_data::cmdq_item	file:
item	tmux.h	/^	struct cmdq_item	 *item;$/;"	m	struct:spawn_context	typeref:struct:spawn_context::cmdq_item
item	tmux.h	/^	struct cmdq_item	*item;$/;"	m	struct:cmd_parse_input	typeref:struct:cmd_parse_input::cmdq_item
item	tmux.h	/^	struct screen_write_collect_item *item;$/;"	m	struct:screen_write_ctx	typeref:struct:screen_write_ctx::screen_write_collect_item
item	window.c	/^	struct cmdq_item	*item;$/;"	m	struct:window_pane_input_data	typeref:struct:window_pane_input_data::cmdq_item	file:
item_list	window-buffer.c	/^	struct window_buffer_itemdata	**item_list;$/;"	m	struct:window_buffer_modedata	typeref:struct:window_buffer_modedata::window_buffer_itemdata	file:
item_list	window-client.c	/^	struct window_client_itemdata	**item_list;$/;"	m	struct:window_client_modedata	typeref:struct:window_client_modedata::window_client_itemdata	file:
item_list	window-customize.c	/^	struct window_customize_itemdata	**item_list;$/;"	m	struct:window_customize_modedata	typeref:struct:window_customize_modedata::window_customize_itemdata	file:
item_list	window-tree.c	/^	struct window_tree_itemdata	**item_list;$/;"	m	struct:window_tree_modedata	typeref:struct:window_tree_modedata::window_tree_itemdata	file:
item_size	window-buffer.c	/^	u_int				  item_size;$/;"	m	struct:window_buffer_modedata	file:
item_size	window-client.c	/^	u_int				  item_size;$/;"	m	struct:window_client_modedata	file:
item_size	window-customize.c	/^	u_int					  item_size;$/;"	m	struct:window_customize_modedata	file:
item_size	window-tree.c	/^	u_int				  item_size;$/;"	m	struct:window_tree_modedata	file:
itemdata	mode-tree.c	/^	void				*itemdata;$/;"	m	struct:mode_tree_item	file:
itemdata	mode-tree.c	/^	void				*itemdata;$/;"	m	struct:mode_tree_menu	file:
items	tmux.h	/^	struct menu_item	*items;$/;"	m	struct:menu	typeref:struct:menu::menu_item
job	format.c	/^	struct job		*job;$/;"	m	struct:format_job	typeref:struct:format_job::job	file:
job	job.c	/^struct job {$/;"	s	file:
job	popup.c	/^	struct job		 *job;$/;"	m	struct:popup_data	typeref:struct:popup_data::job	file:
job_check_died	job.c	/^job_check_died(pid_t pid, int status)$/;"	f
job_complete_cb	tmux.h	/^typedef void (*job_complete_cb) (struct job *);$/;"	t
job_error_callback	job.c	/^job_error_callback(__unused struct bufferevent *bufev, __unused short events,$/;"	f	file:
job_free	job.c	/^job_free(struct job *job)$/;"	f
job_free_cb	tmux.h	/^typedef void (*job_free_cb) (void *);$/;"	t
job_get_data	job.c	/^job_get_data(struct job *job)$/;"	f
job_get_event	job.c	/^job_get_event(struct job *job)$/;"	f
job_get_status	job.c	/^job_get_status(struct job *job)$/;"	f
job_kill_all	job.c	/^job_kill_all(void)$/;"	f
job_print_summary	job.c	/^job_print_summary(struct cmdq_item *item, int blank)$/;"	f
job_read_callback	job.c	/^job_read_callback(__unused struct bufferevent *bufev, void *data)$/;"	f	file:
job_resize	job.c	/^job_resize(struct job *job, u_int sx, u_int sy)$/;"	f
job_run	job.c	/^job_run(const char *cmd, struct session *s, const char *cwd,$/;"	f
job_still_running	job.c	/^job_still_running(void)$/;"	f
job_update_cb	tmux.h	/^typedef void (*job_update_cb) (struct job *);$/;"	t
job_write_callback	job.c	/^job_write_callback(__unused struct bufferevent *bufev, void *data)$/;"	f	file:
jobs	tmux.h	/^	struct format_job_tree	*jobs;$/;"	m	struct:client	typeref:struct:client::format_job_tree
jumpchar	window-copy.c	/^	char		 jumpchar;$/;"	m	struct:window_copy_mode_data	file:
jumptype	window-copy.c	/^	int		 jumptype;$/;"	m	struct:window_copy_mode_data	file:
key	format.c	/^	char			*key;$/;"	m	struct:format_entry	file:
key	input-keys.c	/^	key_code			 key;$/;"	m	struct:input_key_entry	file:
key	key-string.c	/^	key_code	key;$/;"	m	struct:__anon6	file:
key	tmux.h	/^	key_code		 key;$/;"	m	struct:key_binding
key	tmux.h	/^	key_code		key;$/;"	m	struct:key_event
key	tmux.h	/^	key_code	 key;$/;"	m	struct:menu_item
key	tmux.h	/^	key_code	 key;$/;"	m	struct:tty_key
key	tmux.h	/^	key_code	key;$/;"	m	struct:mouse_event
key	tmux.h	/^	void		 (*key)(struct window_mode_entry *, struct client *,$/;"	m	struct:window_mode
key	tty-acs.c	/^	u_char		 key;$/;"	m	struct:tty_acs_reverse_entry	file:
key	tty-acs.c	/^	u_char	 	 key;$/;"	m	struct:tty_acs_entry	file:
key	tty-keys.c	/^	key_code	 	key;$/;"	m	struct:tty_default_key_code	file:
key	tty-keys.c	/^	key_code	 	key;$/;"	m	struct:tty_default_key_raw	file:
key	tty-keys.c	/^	key_code	 key;$/;"	m	struct:tty_default_key_xterm	file:
key	window-customize.c	/^	key_code				 key;$/;"	m	struct:window_customize_itemdata	file:
key_binding	tmux.h	/^struct key_binding {$/;"	s
key_bindings	tmux.h	/^	struct key_bindings	 key_bindings;$/;"	m	struct:key_table	typeref:struct:key_table::key_bindings
key_bindings_add	key-bindings.c	/^key_bindings_add(const char *name, key_code key, const char *note, int repeat,$/;"	f
key_bindings_cmp	key-bindings.c	/^key_bindings_cmp(struct key_binding *bd1, struct key_binding *bd2)$/;"	f	file:
key_bindings_dispatch	key-bindings.c	/^key_bindings_dispatch(struct key_binding *bd, struct cmdq_item *item,$/;"	f
key_bindings_first	key-bindings.c	/^key_bindings_first(struct key_table *table)$/;"	f
key_bindings_first_table	key-bindings.c	/^key_bindings_first_table(void)$/;"	f
key_bindings_free	key-bindings.c	/^key_bindings_free(struct key_binding *bd)$/;"	f	file:
key_bindings_get	key-bindings.c	/^key_bindings_get(struct key_table *table, key_code key)$/;"	f
key_bindings_get_default	key-bindings.c	/^key_bindings_get_default(struct key_table *table, key_code key)$/;"	f
key_bindings_get_table	key-bindings.c	/^key_bindings_get_table(const char *name, int create)$/;"	f
key_bindings_init	key-bindings.c	/^key_bindings_init(void)$/;"	f
key_bindings_init_done	key-bindings.c	/^key_bindings_init_done(__unused struct cmdq_item *item, __unused void *data)$/;"	f	file:
key_bindings_next	key-bindings.c	/^key_bindings_next(__unused struct key_table *table, struct key_binding *bd)$/;"	f
key_bindings_next_table	key-bindings.c	/^key_bindings_next_table(struct key_table *table)$/;"	f
key_bindings_read_only	key-bindings.c	/^key_bindings_read_only(struct cmdq_item *item, __unused void *data)$/;"	f	file:
key_bindings_remove	key-bindings.c	/^key_bindings_remove(const char *name, key_code key)$/;"	f
key_bindings_remove_table	key-bindings.c	/^key_bindings_remove_table(const char *name)$/;"	f
key_bindings_reset	key-bindings.c	/^key_bindings_reset(const char *name, key_code key)$/;"	f
key_bindings_reset_table	key-bindings.c	/^key_bindings_reset_table(const char *name)$/;"	f
key_bindings_unref_table	key-bindings.c	/^key_bindings_unref_table(struct key_table *table)$/;"	f
key_code	tmux.h	/^typedef unsigned long long key_code;$/;"	t
key_event	tmux.h	/^struct key_event {$/;"	s
key_string_get_modifiers	key-string.c	/^key_string_get_modifiers(const char **string)$/;"	f	file:
key_string_lookup_key	key-string.c	/^key_string_lookup_key(key_code key, int with_flags)$/;"	f
key_string_lookup_string	key-string.c	/^key_string_lookup_string(const char *string)$/;"	f
key_string_search_table	key-string.c	/^key_string_search_table(const char *string)$/;"	f	file:
key_string_table	key-string.c	/^} key_string_table[] = {$/;"	v	typeref:struct:__anon6	file:
key_table	tmux.h	/^	const char	*(*key_table)(struct window_mode_entry *);$/;"	m	struct:window_mode
key_table	tmux.h	/^struct key_table {$/;"	s
key_table_cmp	key-bindings.c	/^key_table_cmp(struct key_table *table1, struct key_table *table2)$/;"	f	file:
key_tables	key-bindings.c	/^static struct key_tables key_tables = RB_INITIALIZER(&key_tables);$/;"	v	typeref:struct:key_tables	file:
key_timer	tmux.h	/^	struct event	 key_timer;$/;"	m	struct:tty	typeref:struct:tty::event
key_tree	tmux.h	/^	struct tty_key	*key_tree;$/;"	m	struct:tty	typeref:struct:tty::tty_key
keytable	tmux.h	/^	struct key_table *keytable;$/;"	m	struct:client	typeref:struct:client::key_table
last	control.c	/^	char				*last;$/;"	m	struct:control_sub	file:
last	control.c	/^	char				*last;$/;"	m	struct:control_sub_pane	file:
last	control.c	/^	char				*last;$/;"	m	struct:control_sub_window	file:
last	format.c	/^	time_t			 last;$/;"	m	struct:format_job	file:
last	input.c	/^	int				last;$/;"	m	struct:input_transition	file:
last	input.c	/^	int			last;$/;"	m	struct:input_ctx	file:
last	mode-tree.c	/^	int				 last;$/;"	m	struct:mode_tree_line	file:
last	tmux.h	/^	struct window_pane *last;$/;"	m	struct:window	typeref:struct:window::window_pane
last_activity_time	tmux.h	/^	struct timeval	 last_activity_time;$/;"	m	struct:session	typeref:struct:session::timeval
last_attached_time	tmux.h	/^	struct timeval	 last_attached_time;$/;"	m	struct:session	typeref:struct:session::timeval
last_cell	tmux.h	/^	struct grid_cell last_cell;$/;"	m	struct:tty	typeref:struct:tty::grid_cell
last_session	tmux.h	/^	struct session	*last_session;$/;"	m	struct:client	typeref:struct:client::session
lastcx	window-copy.c	/^	u_int		 lastcx; 	\/* position in last line w\/ content *\/$/;"	m	struct:window_copy_mode_data	file:
lastlayout	tmux.h	/^	int		 lastlayout;$/;"	m	struct:window
lastsx	window-copy.c	/^	u_int		 lastsx;	\/* size of last line w\/ content *\/$/;"	m	struct:window_copy_mode_data	file:
lastw	tmux.h	/^	struct winlink_stack lastw;$/;"	m	struct:session	typeref:struct:session::winlink_stack
latest	tmux.h	/^	void		*latest;$/;"	m	struct:window
layout_add_border	layout.c	/^layout_add_border(struct window *w, struct layout_cell *lc, int status)$/;"	f	file:
layout_append	layout-custom.c	/^layout_append(struct layout_cell *lc, char *buf, size_t len)$/;"	f	file:
layout_assign	layout-custom.c	/^layout_assign(struct window_pane **wp, struct layout_cell *lc)$/;"	f	file:
layout_assign_pane	layout.c	/^layout_assign_pane(struct layout_cell *lc, struct window_pane *wp)$/;"	f
layout_cell	tmux.h	/^	struct layout_cell *layout_cell;$/;"	m	struct:window_pane	typeref:struct:window_pane::layout_cell
layout_cell	tmux.h	/^struct layout_cell {$/;"	s
layout_cell_is_bottom	layout.c	/^layout_cell_is_bottom(struct window *w, struct layout_cell *lc)$/;"	f	file:
layout_cell_is_top	layout.c	/^layout_cell_is_top(struct window *w, struct layout_cell *lc)$/;"	f	file:
layout_check	layout-custom.c	/^layout_check(struct layout_cell *lc)$/;"	f	file:
layout_checksum	layout-custom.c	/^layout_checksum(const char *layout)$/;"	f	file:
layout_close_pane	layout.c	/^layout_close_pane(struct window_pane *wp)$/;"	f
layout_construct	layout-custom.c	/^layout_construct(struct layout_cell *lcparent, const char **layout)$/;"	f	file:
layout_count_cells	layout.c	/^layout_count_cells(struct layout_cell *lc)$/;"	f
layout_create_cell	layout.c	/^layout_create_cell(struct layout_cell *lcparent)$/;"	f
layout_destroy_cell	layout.c	/^layout_destroy_cell(struct window *w, struct layout_cell *lc,$/;"	f
layout_dump	layout-custom.c	/^layout_dump(struct layout_cell *root)$/;"	f
layout_find_bottomright	layout-custom.c	/^layout_find_bottomright(struct layout_cell *lc)$/;"	f	file:
layout_fix_offsets	layout.c	/^layout_fix_offsets(struct window *w)$/;"	f
layout_fix_offsets1	layout.c	/^layout_fix_offsets1(struct layout_cell *lc)$/;"	f	file:
layout_fix_panes	layout.c	/^layout_fix_panes(struct window *w)$/;"	f
layout_free	layout.c	/^layout_free(struct window *w)$/;"	f
layout_free_cell	layout.c	/^layout_free_cell(struct layout_cell *lc)$/;"	f
layout_init	layout.c	/^layout_init(struct window *w, struct window_pane *wp)$/;"	f
layout_make_leaf	layout.c	/^layout_make_leaf(struct layout_cell *lc, struct window_pane *wp)$/;"	f
layout_make_node	layout.c	/^layout_make_node(struct layout_cell *lc, enum layout_type type)$/;"	f
layout_new_pane_size	layout.c	/^layout_new_pane_size(struct window *w, u_int previous, struct layout_cell *lc,$/;"	f	file:
layout_parse	layout-custom.c	/^layout_parse(struct window *w, const char *layout)$/;"	f
layout_print_cell	layout.c	/^layout_print_cell(struct layout_cell *lc, const char *hdr, u_int n)$/;"	f
layout_resize	layout.c	/^layout_resize(struct window *w, u_int sx, u_int sy)$/;"	f
layout_resize_adjust	layout.c	/^layout_resize_adjust(struct window *w, struct layout_cell *lc,$/;"	f
layout_resize_check	layout.c	/^layout_resize_check(struct window *w, struct layout_cell *lc,$/;"	f	file:
layout_resize_child_cells	layout.c	/^layout_resize_child_cells(struct window *w, struct layout_cell *lc)$/;"	f	file:
layout_resize_layout	layout.c	/^layout_resize_layout(struct window *w, struct layout_cell *lc,$/;"	f
layout_resize_pane	layout.c	/^layout_resize_pane(struct window_pane *wp, enum layout_type type, int change,$/;"	f
layout_resize_pane_grow	layout.c	/^layout_resize_pane_grow(struct window *w, struct layout_cell *lc,$/;"	f	file:
layout_resize_pane_shrink	layout.c	/^layout_resize_pane_shrink(struct window *w, struct layout_cell *lc,$/;"	f	file:
layout_resize_pane_to	layout.c	/^layout_resize_pane_to(struct window_pane *wp, enum layout_type type,$/;"	f
layout_root	tmux.h	/^	struct layout_cell *layout_root;$/;"	m	struct:window	typeref:struct:window::layout_cell
layout_search_by_border	layout.c	/^layout_search_by_border(struct layout_cell *lc, u_int x, u_int y)$/;"	f
layout_set_even	layout-set.c	/^layout_set_even(struct window *w, enum layout_type type)$/;"	f	file:
layout_set_even_h	layout-set.c	/^layout_set_even_h(struct window *w)$/;"	f	file:
layout_set_even_v	layout-set.c	/^layout_set_even_v(struct window *w)$/;"	f	file:
layout_set_lookup	layout-set.c	/^layout_set_lookup(const char *name)$/;"	f
layout_set_main_h	layout-set.c	/^layout_set_main_h(struct window *w)$/;"	f	file:
layout_set_main_v	layout-set.c	/^layout_set_main_v(struct window *w)$/;"	f	file:
layout_set_next	layout-set.c	/^layout_set_next(struct window *w)$/;"	f
layout_set_previous	layout-set.c	/^layout_set_previous(struct window *w)$/;"	f
layout_set_select	layout-set.c	/^layout_set_select(struct window *w, u_int layout)$/;"	f
layout_set_size	layout.c	/^layout_set_size(struct layout_cell *lc, u_int sx, u_int sy, u_int xoff,$/;"	f
layout_set_size_check	layout.c	/^layout_set_size_check(struct window *w, struct layout_cell *lc,$/;"	f	file:
layout_set_tiled	layout-set.c	/^layout_set_tiled(struct window *w)$/;"	f
layout_sets	layout-set.c	/^} layout_sets[] = {$/;"	v	typeref:struct:__anon7	file:
layout_split_pane	layout.c	/^layout_split_pane(struct window_pane *wp, enum layout_type type, int size,$/;"	f
layout_spread_cell	layout.c	/^layout_spread_cell(struct window *w, struct layout_cell *parent)$/;"	f
layout_spread_out	layout.c	/^layout_spread_out(struct window_pane *wp)$/;"	f
layout_type	tmux.h	/^enum layout_type {$/;"	g
lb	popup.c	/^	u_int			  lb;$/;"	m	struct:popup_data	file:
lb	tmux.h	/^	u_int		lb;$/;"	m	struct:mouse_event
lc	tmux.h	/^	struct layout_cell	 *lc;$/;"	m	struct:spawn_context	typeref:struct:spawn_context::layout_cell
left	tmux.h	/^	struct tty_key	*left;$/;"	m	struct:tty_key	typeref:struct:tty_key::tty_key
left	window-tree.c	/^	int				  left;$/;"	m	struct:window_tree_modedata	file:
len	compat/imsg.h	/^	uint16_t	 len;$/;"	m	struct:imsg_hdr
libevent	fuzz/input-fuzzer.c	/^struct event_base *libevent;$/;"	v	typeref:struct:event_base
line	cmd.c	/^	u_int			  line;$/;"	m	struct:cmd	file:
line	control.c	/^	char				*line;$/;"	m	struct:control_block	file:
line	mode-tree.c	/^	u_int				 line;$/;"	m	struct:mode_tree_item	file:
line	mode-tree.c	/^	u_int				 line;$/;"	m	struct:mode_tree_menu	file:
line	tmux.h	/^	u_int			 line;$/;"	m	struct:cmd_parse_input
line_list	mode-tree.c	/^	struct mode_tree_line	 *line_list;$/;"	m	struct:mode_tree_data	typeref:struct:mode_tree_data::mode_tree_line	file:
line_size	mode-tree.c	/^	u_int			  line_size;$/;"	m	struct:mode_tree_data	file:
linedata	tmux.h	/^	struct grid_line	*linedata;$/;"	m	struct:grid	typeref:struct:grid::grid_line
lineflag	window-copy.c	/^	} lineflag;			\/* line selection mode *\/$/;"	m	struct:window_copy_mode_data	typeref:enum:window_copy_mode_data::__anon20	file:
lines	cmd-parse.y	/^lines		: \/* empty *\/$/;"	l
lines	popup.c	/^	char			**lines;$/;"	m	struct:popup_data	file:
list	cmd-queue.c	/^	struct cmdq_item_list	 list;$/;"	m	struct:cmdq_list	typeref:struct:cmdq_list::cmdq_item_list	file:
list	status.c	/^	char		**list;$/;"	m	struct:status_prompt_menu	file:
list	tmux.h	/^	enum style_list		list;$/;"	m	struct:style	typeref:enum:style::style_list
list	tmux.h	/^	struct cmds	*list;$/;"	m	struct:cmd_list	typeref:struct:cmd_list::cmds
load_cfg	cfg.c	/^load_cfg(const char *path, struct client *c, struct cmdq_item *item, int flags,$/;"	f
load_cfg_from_buffer	cfg.c	/^load_cfg_from_buffer(const void *buf, size_t len, const char *path,$/;"	f
lock_timer	tmux.h	/^	struct event	 lock_timer;$/;"	m	struct:session	typeref:struct:session::event
locked	cmd-wait-for.c	/^	int			locked;$/;"	m	struct:wait_channel	file:
log_add_level	log.c	/^log_add_level(void)$/;"	f
log_close	log.c	/^log_close(void)$/;"	f
log_debug	log.c	/^log_debug(const char *msg, ...)$/;"	f
log_event_cb	log.c	/^log_event_cb(__unused int severity, const char *msg)$/;"	f	file:
log_file	log.c	/^static FILE	*log_file;$/;"	v	file:
log_get_level	log.c	/^log_get_level(void)$/;"	f
log_level	log.c	/^static int	 log_level;$/;"	v	file:
log_open	log.c	/^log_open(const char *name)$/;"	f
log_toggle	log.c	/^log_toggle(const char *name)$/;"	f
log_vwrite	log.c	/^log_vwrite(const char *msg, va_list ap)$/;"	f	file:
loop	format.c	/^	u_int			 loop;$/;"	m	struct:format_expand_state	file:
lower	tmux.h	/^		int		 lower;$/;"	m	struct:cmd_entry::__anon13
lx	popup.c	/^	u_int			  lx;$/;"	m	struct:popup_data	file:
lx	tmux.h	/^	u_int		lx;$/;"	m	struct:mouse_event
ly	popup.c	/^	u_int			  ly;$/;"	m	struct:popup_data	file:
ly	tmux.h	/^	u_int		ly;$/;"	m	struct:mouse_event
m	format.c	/^	struct mouse_event	 m;$/;"	m	struct:format_tree	typeref:struct:format_tree::mouse_event	file:
m	tmux.h	/^	struct mouse_event	m;$/;"	m	struct:key_event	typeref:struct:key_event::mouse_event
m	window-copy.c	/^	struct mouse_event		*m;$/;"	m	struct:window_copy_cmd_state	typeref:struct:window_copy_cmd_state::mouse_event	file:
main	compat.h	405;"	d
main	tmux.c	/^main(int argc, char **argv)$/;"	f
make_label	tmux.c	/^make_label(const char *label, char **cause)$/;"	f	file:
marked_pane	server.c	/^struct cmd_find_state	 marked_pane;$/;"	v	typeref:struct:cmd_find_state
max	compat/imsg.h	/^	size_t			 max;$/;"	m	struct:ibuf
maxargs	window-copy.c	/^	int				  maxargs;$/;"	m	struct:__anon22	file:
maximum	tmux.h	/^	u_int			  maximum;$/;"	m	struct:options_table_entry
memmem	compat/memmem.c	/^memmem(const void *l, size_t l_len, const void *s, size_t s_len)$/;"	f
menu	menu.c	/^	struct menu		*menu;$/;"	m	struct:menu_data	typeref:struct:menu_data::menu	file:
menu	mode-tree.c	/^	const struct menu_item	 *menu;$/;"	m	struct:mode_tree_data	typeref:struct:mode_tree_data::menu_item	file:
menu	tmux.h	/^struct menu {$/;"	s
menu_add_item	menu.c	/^menu_add_item(struct menu *menu, const struct menu_item *item,$/;"	f
menu_add_items	menu.c	/^menu_add_items(struct menu *menu, const struct menu_item *items,$/;"	f
menu_choice_cb	tmux.h	/^typedef void (*menu_choice_cb)(struct menu *, u_int, key_code, void *);$/;"	t
menu_create	menu.c	/^menu_create(const char *title)$/;"	f
menu_data	menu.c	/^struct menu_data {$/;"	s	file:
menu_display	menu.c	/^menu_display(struct menu *menu, int flags, struct cmdq_item *item, u_int px,$/;"	f
menu_draw_cb	menu.c	/^menu_draw_cb(struct client *c, __unused struct screen_redraw_ctx *ctx0)$/;"	f	file:
menu_free	menu.c	/^menu_free(struct menu *menu)$/;"	f
menu_free_cb	menu.c	/^menu_free_cb(struct client *c)$/;"	f	file:
menu_item	tmux.h	/^struct menu_item {$/;"	s
menu_key_cb	menu.c	/^menu_key_cb(struct client *c, struct key_event *event)$/;"	f	file:
menu_mode_cb	menu.c	/^menu_mode_cb(struct client *c, __unused u_int *cx, __unused u_int *cy)$/;"	f	file:
menucb	mode-tree.c	/^	mode_tree_menu_cb         menucb;$/;"	m	struct:mode_tree_data	file:
message_entry	tmux.h	/^struct message_entry {$/;"	s
message_ignore_styles	tmux.h	/^	int		 message_ignore_styles;$/;"	m	struct:client
message_log	server.c	/^struct message_list	 message_log;$/;"	v	typeref:struct:message_list
message_next	server.c	/^static u_int		 message_next;$/;"	v	file:
message_string	tmux.h	/^	char		*message_string;$/;"	m	struct:client
message_timer	tmux.h	/^	struct event	 message_timer;$/;"	m	struct:client	typeref:struct:client::event
minargs	window-copy.c	/^	int				  minargs;$/;"	m	struct:__anon22	file:
minimum	tmux.h	/^	u_int			  minimum;$/;"	m	struct:options_table_entry
mode	tmux.h	/^	const struct window_mode	*mode;$/;"	m	struct:window_mode_entry	typeref:struct:window_mode_entry::window_mode
mode	tmux.h	/^	int			 mode;$/;"	m	struct:screen
mode	tmux.h	/^	int		 mode;$/;"	m	struct:tty
mode_tree_add	mode-tree.c	/^mode_tree_add(struct mode_tree_data *mtd, struct mode_tree_item *parent,$/;"	f
mode_tree_build	mode-tree.c	/^mode_tree_build(struct mode_tree_data *mtd)$/;"	f
mode_tree_build_cb	tmux.h	/^typedef void (*mode_tree_build_cb)(void *, struct mode_tree_sort_criteria *,$/;"	t
mode_tree_build_lines	mode-tree.c	/^mode_tree_build_lines(struct mode_tree_data *mtd,$/;"	f	file:
mode_tree_check_selected	mode-tree.c	/^mode_tree_check_selected(struct mode_tree_data *mtd)$/;"	f	file:
mode_tree_clear_lines	mode-tree.c	/^mode_tree_clear_lines(struct mode_tree_data *mtd)$/;"	f	file:
mode_tree_clear_tagged	mode-tree.c	/^mode_tree_clear_tagged(struct mode_tree_list *mtl)$/;"	f	file:
mode_tree_collapse_current	mode-tree.c	/^mode_tree_collapse_current(struct mode_tree_data *mtd)$/;"	f
mode_tree_count_tagged	mode-tree.c	/^mode_tree_count_tagged(struct mode_tree_data *mtd)$/;"	f
mode_tree_data	mode-tree.c	/^struct mode_tree_data {$/;"	s	file:
mode_tree_display_menu	mode-tree.c	/^mode_tree_display_menu(struct mode_tree_data *mtd, struct client *c, u_int x,$/;"	f	file:
mode_tree_down	mode-tree.c	/^mode_tree_down(struct mode_tree_data *mtd, int wrap)$/;"	f
mode_tree_draw	mode-tree.c	/^mode_tree_draw(struct mode_tree_data *mtd)$/;"	f
mode_tree_draw_as_parent	mode-tree.c	/^mode_tree_draw_as_parent(struct mode_tree_item *mti)$/;"	f
mode_tree_draw_cb	tmux.h	/^typedef void (*mode_tree_draw_cb)(void *, void *, struct screen_write_ctx *,$/;"	t
mode_tree_each_cb	tmux.h	/^typedef void (*mode_tree_each_cb)(void *, void *, struct client *, key_code);$/;"	t
mode_tree_each_tagged	mode-tree.c	/^mode_tree_each_tagged(struct mode_tree_data *mtd, mode_tree_each_cb cb,$/;"	f
mode_tree_expand	mode-tree.c	/^mode_tree_expand(struct mode_tree_data *mtd, uint64_t tag)$/;"	f
mode_tree_expand_current	mode-tree.c	/^mode_tree_expand_current(struct mode_tree_data *mtd)$/;"	f
mode_tree_filter_callback	mode-tree.c	/^mode_tree_filter_callback(__unused struct client *c, void *data, const char *s,$/;"	f	file:
mode_tree_filter_free	mode-tree.c	/^mode_tree_filter_free(void *data)$/;"	f	file:
mode_tree_find_item	mode-tree.c	/^mode_tree_find_item(struct mode_tree_list *mtl, uint64_t tag)$/;"	f	file:
mode_tree_free	mode-tree.c	/^mode_tree_free(struct mode_tree_data *mtd)$/;"	f
mode_tree_free_item	mode-tree.c	/^mode_tree_free_item(struct mode_tree_item *mti)$/;"	f	file:
mode_tree_free_items	mode-tree.c	/^mode_tree_free_items(struct mode_tree_list *mtl)$/;"	f	file:
mode_tree_get_current	mode-tree.c	/^mode_tree_get_current(struct mode_tree_data *mtd)$/;"	f
mode_tree_get_current_name	mode-tree.c	/^mode_tree_get_current_name(struct mode_tree_data *mtd)$/;"	f
mode_tree_get_tag	mode-tree.c	/^mode_tree_get_tag(struct mode_tree_data *mtd, uint64_t tag, u_int *found)$/;"	f	file:
mode_tree_height_cb	tmux.h	/^typedef u_int (*mode_tree_height_cb)(void *, u_int);$/;"	t
mode_tree_item	mode-tree.c	/^struct mode_tree_item {$/;"	s	file:
mode_tree_key	mode-tree.c	/^mode_tree_key(struct mode_tree_data *mtd, struct client *c, key_code *key,$/;"	f
mode_tree_line	mode-tree.c	/^struct mode_tree_line {$/;"	s	file:
mode_tree_menu	mode-tree.c	/^struct mode_tree_menu {$/;"	s	file:
mode_tree_menu_callback	mode-tree.c	/^mode_tree_menu_callback(__unused struct menu *menu, __unused u_int idx,$/;"	f	file:
mode_tree_menu_cb	tmux.h	/^typedef void (*mode_tree_menu_cb)(void *, struct client *, key_code);$/;"	t
mode_tree_menu_items	mode-tree.c	/^static const struct menu_item mode_tree_menu_items[] = {$/;"	v	typeref:struct:menu_item	file:
mode_tree_no_tag	mode-tree.c	/^mode_tree_no_tag(struct mode_tree_item *mti)$/;"	f
mode_tree_remove	mode-tree.c	/^mode_tree_remove(struct mode_tree_data *mtd, struct mode_tree_item *mti)$/;"	f
mode_tree_remove_ref	mode-tree.c	/^mode_tree_remove_ref(struct mode_tree_data *mtd)$/;"	f	file:
mode_tree_resize	mode-tree.c	/^mode_tree_resize(struct mode_tree_data *mtd, u_int sx, u_int sy)$/;"	f
mode_tree_run_command	mode-tree.c	/^mode_tree_run_command(struct client *c, struct cmd_find_state *fs,$/;"	f
mode_tree_search_callback	mode-tree.c	/^mode_tree_search_callback(__unused struct client *c, void *data, const char *s,$/;"	f	file:
mode_tree_search_cb	tmux.h	/^typedef int (*mode_tree_search_cb)(void *, void *, const char *);$/;"	t
mode_tree_search_for	mode-tree.c	/^mode_tree_search_for(struct mode_tree_data *mtd)$/;"	f	file:
mode_tree_search_free	mode-tree.c	/^mode_tree_search_free(void *data)$/;"	f	file:
mode_tree_search_set	mode-tree.c	/^mode_tree_search_set(struct mode_tree_data *mtd)$/;"	f	file:
mode_tree_set_current	mode-tree.c	/^mode_tree_set_current(struct mode_tree_data *mtd, uint64_t tag)$/;"	f
mode_tree_set_height	mode-tree.c	/^mode_tree_set_height(struct mode_tree_data *mtd)$/;"	f	file:
mode_tree_sort_criteria	tmux.h	/^struct mode_tree_sort_criteria {$/;"	s
mode_tree_start	mode-tree.c	/^mode_tree_start(struct window_pane *wp, struct args *args,$/;"	f
mode_tree_up	mode-tree.c	/^mode_tree_up(struct mode_tree_data *mtd, int wrap)$/;"	f
mode_tree_zoom	mode-tree.c	/^mode_tree_zoom(struct mode_tree_data *mtd, struct args *args)$/;"	f
modedata	mode-tree.c	/^	void			 *modedata;$/;"	m	struct:mode_tree_data	file:
modekeys	screen.c	/^	int		 modekeys;$/;"	m	struct:screen_sel	file:
modekeys	window-copy.c	/^	int		 modekeys;$/;"	m	struct:window_copy_mode_data	file:
modes	tmux.h	/^	TAILQ_HEAD (, window_mode_entry) modes;$/;"	m	struct:window_pane
modifier	format.c	/^	char	  modifier[3];$/;"	m	struct:format_modifier	file:
mouse_drag_flag	tmux.h	/^	int		 mouse_drag_flag;$/;"	m	struct:tty
mouse_drag_release	tmux.h	/^	void		(*mouse_drag_release)(struct client *,$/;"	m	struct:tty
mouse_drag_update	tmux.h	/^	void		(*mouse_drag_update)(struct client *,$/;"	m	struct:tty
mouse_event	tmux.h	/^struct mouse_event {$/;"	s
mouse_last_b	tmux.h	/^	u_int		 mouse_last_b;$/;"	m	struct:tty
mouse_last_x	tmux.h	/^	u_int		 mouse_last_x;$/;"	m	struct:tty
mouse_last_y	tmux.h	/^	u_int		 mouse_last_y;$/;"	m	struct:tty
msg	tmux.h	/^	char				*msg;$/;"	m	struct:message_entry
msg_command	tmux.h	/^struct msg_command {$/;"	s
msg_num	tmux.h	/^	u_int				 msg_num;$/;"	m	struct:message_entry
msg_read_data	tmux.h	/^struct msg_read_data {$/;"	s
msg_read_done	tmux.h	/^struct msg_read_done {$/;"	s
msg_read_open	tmux.h	/^struct msg_read_open {$/;"	s
msg_time	tmux.h	/^	struct timeval			 msg_time;$/;"	m	struct:message_entry	typeref:struct:message_entry::timeval
msg_write_close	tmux.h	/^struct msg_write_close {$/;"	s
msg_write_data	tmux.h	/^struct msg_write_data {$/;"	s
msg_write_open	tmux.h	/^struct msg_write_open {$/;"	s
msg_write_ready	tmux.h	/^struct msg_write_ready {$/;"	s
msgbuf	compat/imsg.h	/^struct msgbuf {$/;"	s
msgbuf_clear	compat/imsg-buffer.c	/^msgbuf_clear(struct msgbuf *msgbuf)$/;"	f
msgbuf_drain	compat/imsg-buffer.c	/^msgbuf_drain(struct msgbuf *msgbuf, size_t n)$/;"	f
msgbuf_init	compat/imsg-buffer.c	/^msgbuf_init(struct msgbuf *msgbuf)$/;"	f
msgbuf_write	compat/imsg-buffer.c	/^msgbuf_write(struct msgbuf *msgbuf)$/;"	f
msgtype	tmux.h	/^enum msgtype {$/;"	g
mx	window-copy.c	/^	u_int		 mx;		\/* mark position *\/$/;"	m	struct:window_copy_mode_data	file:
my	window-copy.c	/^	u_int		 my;$/;"	m	struct:window_copy_mode_data	file:
name	cmd-load-buffer.c	/^	char			*name;$/;"	m	struct:cmd_load_buffer_data	file:
name	cmd-queue.c	/^	char			*name;$/;"	m	struct:cmdq_item	file:
name	cmd-wait-for.c	/^	const char	       *name;$/;"	m	struct:wait_channel	file:
name	control.c	/^	char				*name;$/;"	m	struct:control_sub	file:
name	input.c	/^	const char			*name;$/;"	m	struct:input_state	file:
name	layout-set.c	/^	const char	*name;$/;"	m	struct:__anon7	file:
name	mode-tree.c	/^	const char			*name;$/;"	m	struct:mode_tree_item	file:
name	notify.c	/^	const char		*name;$/;"	m	struct:notify_entry	file:
name	options.c	/^	const char				*name;$/;"	m	struct:options_entry	file:
name	paste.c	/^	char		*name;$/;"	m	struct:paste_buffer	file:
name	proc.c	/^	const char	 *name;$/;"	m	struct:tmuxproc	file:
name	tmux.h	/^	char		*name;$/;"	m	struct:environ_entry
name	tmux.h	/^	char		*name;$/;"	m	struct:session
name	tmux.h	/^	char		*name;$/;"	m	struct:tty_term
name	tmux.h	/^	char		*name;$/;"	m	struct:window
name	tmux.h	/^	const char		 *name;$/;"	m	struct:options_table_entry
name	tmux.h	/^	const char		 *name;$/;"	m	struct:spawn_context
name	tmux.h	/^	const char		*name;$/;"	m	struct:cmd_entry
name	tmux.h	/^	const char		*name;$/;"	m	struct:key_table
name	tmux.h	/^	const char		*name;$/;"	m	struct:session_group
name	tmux.h	/^	const char	*name;$/;"	m	struct:client
name	tmux.h	/^	const char	*name;$/;"	m	struct:menu_item
name	tmux.h	/^	const char	*name;$/;"	m	struct:window_mode
name	tty-features.c	/^	const char	 *name;$/;"	m	struct:tty_feature	file:
name	tty-term.c	/^	const char	       *name;$/;"	m	struct:tty_term_code_entry	file:
name	window-buffer.c	/^	char			*name;$/;"	m	struct:window_buffer_editdata	file:
name	window-buffer.c	/^	const char	*name;$/;"	m	struct:window_buffer_itemdata	file:
name	window-customize.c	/^	char					*name;$/;"	m	struct:window_customize_itemdata	file:
name_event	tmux.h	/^	struct event	 name_event;$/;"	m	struct:window	typeref:struct:window::event
name_time	tmux.h	/^	struct timeval	 name_time;$/;"	m	struct:window	typeref:struct:window::timeval
name_time_callback	names.c	/^name_time_callback(__unused int fd, __unused short events, void *arg)$/;"	f	file:
name_time_expired	names.c	/^name_time_expired(struct window *w, struct timeval *tv)$/;"	f	file:
new_sx	tmux.h	/^	u_int		 new_sx;$/;"	m	struct:window
new_sy	tmux.h	/^	u_int		 new_sy;$/;"	m	struct:window
new_xpixel	tmux.h	/^	u_int		 new_xpixel;$/;"	m	struct:window
new_ypixel	tmux.h	/^	u_int		 new_ypixel;$/;"	m	struct:window
next	cmd-queue.c	/^	struct cmdq_item	*next;$/;"	m	struct:cmdq_item	typeref:struct:cmdq_item::cmdq_item	file:
next	tmux.h	/^	struct tty_key	*next;$/;"	m	struct:tty_key	typeref:struct:tty_key::tty_key
next_active_point	window.c	/^static u_int	next_active_point;$/;"	v	file:
next_input	cmd-command-prompt.c	/^	char	*next_input;$/;"	m	struct:cmd_command_prompt_cdata	file:
next_prompt	cmd-command-prompt.c	/^	char	*next_prompt;$/;"	m	struct:cmd_command_prompt_cdata	file:
next_session_id	session.c	/^static u_int		next_session_id;$/;"	v	file:
next_window_id	window.c	/^static u_int	next_window_id;$/;"	v	file:
next_window_pane_id	window.c	/^static u_int	next_window_pane_id;$/;"	v	file:
nfiles	cmd-source-file.c	/^	u_int			  nfiles;$/;"	m	struct:cmd_source_file_data	file:
nitems	osdep-dragonfly.c	38;"	d	file:
nitems	osdep-freebsd.c	42;"	d	file:
nitems	osdep-openbsd.c	32;"	d	file:
nitems	tmux.h	100;"	d
nlines	popup.c	/^	u_int			  nlines;$/;"	m	struct:popup_data	file:
no_matches	mode-tree.c	/^	int			  no_matches;$/;"	m	struct:mode_tree_data	file:
no_tag	mode-tree.c	/^	int				 no_tag;$/;"	m	struct:mode_tree_item	file:
note	tmux.h	/^	const char		*note;$/;"	m	struct:key_binding
notify_add	notify.c	/^notify_add(const char *name, struct cmd_find_state *fs, struct client *c,$/;"	f	file:
notify_callback	notify.c	/^notify_callback(struct cmdq_item *item, void *data)$/;"	f	file:
notify_client	notify.c	/^notify_client(const char *name, struct client *c)$/;"	f
notify_entry	notify.c	/^struct notify_entry {$/;"	s	file:
notify_hook	notify.c	/^notify_hook(struct cmdq_item *item, const char *name)$/;"	f
notify_hook_formats	notify.c	/^notify_hook_formats(struct cmdq_state *state, struct session *s,$/;"	f	file:
notify_insert_hook	notify.c	/^notify_insert_hook(struct cmdq_item *item, struct notify_entry *ne)$/;"	f	file:
notify_pane	notify.c	/^notify_pane(const char *name, struct window_pane *wp)$/;"	f
notify_session	notify.c	/^notify_session(const char *name, struct session *s)$/;"	f
notify_session_window	notify.c	/^notify_session_window(const char *name, struct session *s, struct window *w)$/;"	f
notify_window	notify.c	/^notify_window(const char *name, struct window *w)$/;"	f
notify_winlink	notify.c	/^notify_winlink(const char *name, struct winlink *wl)$/;"	f
num	input.c	/^		int		num;$/;"	m	union:input_param::__anon3	file:
num	tmux.h	/^	u_int			 num;$/;"	m	struct:tty_ctx
number	cmd-queue.c	/^	u_int			 number;$/;"	m	struct:cmdq_item	file:
number	tmux.h	/^	long long			  number;$/;"	m	union:options_value
number	tty-term.c	/^		int		number;$/;"	m	union:tty_code::__anon16	file:
ocx	tmux.h	/^	u_int		 ocx;$/;"	m	struct:tty_ctx
ocy	tmux.h	/^	u_int		 ocy;$/;"	m	struct:tty_ctx
offset	control.c	/^	struct window_pane_offset	 offset;$/;"	m	struct:control_pane	typeref:struct:control_pane::window_pane_offset	file:
offset	mode-tree.c	/^	u_int			  offset;$/;"	m	struct:mode_tree_data	file:
offset	tmux.h	/^		u_int		offset;$/;"	m	union:grid_cell_entry::__anon11
offset	tmux.h	/^	struct window_pane_offset offset;$/;"	m	struct:window_pane	typeref:struct:window_pane::window_pane_offset
offset	window-tree.c	/^	int				  offset;$/;"	m	struct:window_tree_modedata	file:
offset_timer	tmux.h	/^	struct event	 offset_timer;$/;"	m	struct:window	typeref:struct:window::event
oflag	tmux.h	/^	int		 oflag;$/;"	m	struct:tty
old_cell	input.c	/^	struct input_cell	old_cell;$/;"	m	struct:input_ctx	typeref:struct:input_ctx::input_cell	file:
old_cx	input.c	/^	u_int			old_cx;$/;"	m	struct:input_ctx	file:
old_cy	input.c	/^	u_int			old_cy;$/;"	m	struct:input_ctx	file:
old_layout	tmux.h	/^	char		*old_layout;$/;"	m	struct:window
old_mode	input.c	/^	int			old_mode;$/;"	m	struct:input_ctx	file:
oo	window-customize.c	/^	struct options				*oo;$/;"	m	struct:window_customize_itemdata	typeref:struct:window_customize_itemdata::options	file:
oox	tmux.h	/^	u_int		 oox;$/;"	m	struct:tty
ooy	tmux.h	/^	u_int		 ooy;$/;"	m	struct:tty
optarg	compat.h	420;"	d
opterr	compat.h	416;"	d
optind	compat.h	417;"	d
optional_assignment	cmd-parse.y	/^optional_assignment	: \/* empty *\/$/;"	l
options	options.c	/^struct options {$/;"	s	file:
options	tmux.h	/^	struct options	*options;$/;"	m	struct:session	typeref:struct:session::options
options	tmux.h	/^	struct options	*options;$/;"	m	struct:window	typeref:struct:window::options
options	tmux.h	/^	struct options	*options;$/;"	m	struct:window_pane	typeref:struct:window_pane::options
options_add	options.c	/^options_add(struct options *oo, const char *name)$/;"	f	file:
options_array_assign	options.c	/^options_array_assign(struct options_entry *o, const char *s, char **cause)$/;"	f
options_array_clear	options.c	/^options_array_clear(struct options_entry *o)$/;"	f
options_array_cmp	options.c	/^options_array_cmp(struct options_array_item *a1, struct options_array_item *a2)$/;"	f	file:
options_array_first	options.c	/^options_array_first(struct options_entry *o)$/;"	f
options_array_free	options.c	/^options_array_free(struct options_entry *o, struct options_array_item *a)$/;"	f	file:
options_array_get	options.c	/^options_array_get(struct options_entry *o, u_int idx)$/;"	f
options_array_item	options.c	/^options_array_item(struct options_entry *o, u_int idx)$/;"	f	file:
options_array_item	options.c	/^struct options_array_item {$/;"	s	file:
options_array_item_index	options.c	/^options_array_item_index(struct options_array_item *a)$/;"	f
options_array_item_value	options.c	/^options_array_item_value(struct options_array_item *a)$/;"	f
options_array_new	options.c	/^options_array_new(struct options_entry *o, u_int idx)$/;"	f	file:
options_array_next	options.c	/^options_array_next(struct options_array_item *a)$/;"	f
options_array_set	options.c	/^options_array_set(struct options_entry *o, u_int idx, const char *value,$/;"	f
options_cmp	options.c	/^options_cmp(struct options_entry *lhs, struct options_entry *rhs)$/;"	f	file:
options_create	options.c	/^options_create(struct options *parent)$/;"	f
options_default	options.c	/^options_default(struct options *oo, const struct options_table_entry *oe)$/;"	f
options_default_to_string	options.c	/^options_default_to_string(const struct options_table_entry *oe)$/;"	f
options_empty	options.c	/^options_empty(struct options *oo, const struct options_table_entry *oe)$/;"	f
options_entry	options.c	/^struct options_entry {$/;"	s	file:
options_first	options.c	/^options_first(struct options *oo)$/;"	f
options_free	options.c	/^options_free(struct options *oo)$/;"	f
options_from_string	options.c	/^options_from_string(struct options *oo, const struct options_table_entry *oe,$/;"	f
options_from_string_check	options.c	/^options_from_string_check(const struct options_table_entry *oe,$/;"	f	file:
options_from_string_choice	options.c	/^options_from_string_choice(const struct options_table_entry *oe,$/;"	f	file:
options_from_string_flag	options.c	/^options_from_string_flag(struct options *oo, const char *name,$/;"	f	file:
options_get	options.c	/^options_get(struct options *oo, const char *name)$/;"	f
options_get_number	options.c	/^options_get_number(struct options *oo, const char *name)$/;"	f
options_get_only	options.c	/^options_get_only(struct options *oo, const char *name)$/;"	f
options_get_parent	options.c	/^options_get_parent(struct options *oo)$/;"	f
options_get_string	options.c	/^options_get_string(struct options *oo, const char *name)$/;"	f
options_is_array	options.c	/^options_is_array(struct options_entry *o)$/;"	f
options_is_string	options.c	/^options_is_string(struct options_entry *o)$/;"	f
options_map_name	options.c	/^options_map_name(const char *name)$/;"	f	file:
options_match	options.c	/^options_match(const char *s, int *idx, int *ambiguous)$/;"	f
options_match_get	options.c	/^options_match_get(struct options *oo, const char *s, int *idx, int only,$/;"	f
options_name	options.c	/^options_name(struct options_entry *o)$/;"	f
options_name_map	tmux.h	/^struct options_name_map {$/;"	s
options_next	options.c	/^options_next(struct options_entry *o)$/;"	f
options_other_names	options-table.c	/^const struct options_name_map options_other_names[] = {$/;"	v	typeref:struct:options_name_map
options_owner	options.c	/^options_owner(struct options_entry *o)$/;"	f
options_parent_table_entry	options.c	/^options_parent_table_entry(struct options *oo, const char *s)$/;"	f	file:
options_parse	options.c	/^options_parse(const char *name, int *idx)$/;"	f
options_parse_get	options.c	/^options_parse_get(struct options *oo, const char *s, int *idx, int only)$/;"	f
options_push_changes	options.c	/^options_push_changes(const char *name)$/;"	f
options_remove	options.c	/^options_remove(struct options_entry *o)$/;"	f	file:
options_remove_or_default	options.c	/^options_remove_or_default(struct options_entry *o, int idx, char **cause)$/;"	f
options_scope_from_flags	options.c	/^options_scope_from_flags(struct args *args, int window,$/;"	f
options_scope_from_name	options.c	/^options_scope_from_name(struct args *args, int window,$/;"	f
options_set_number	options.c	/^options_set_number(struct options *oo, const char *name, long long value)$/;"	f
options_set_parent	options.c	/^options_set_parent(struct options *oo, struct options *parent)$/;"	f
options_set_string	options.c	/^options_set_string(struct options *oo, const char *name, int append,$/;"	f
options_string_to_style	options.c	/^options_string_to_style(struct options *oo, const char *name,$/;"	f
options_table	options-table.c	/^const struct options_table_entry options_table[] = {$/;"	v	typeref:struct:options_table_entry
options_table_bell_action_list	options-table.c	/^static const char *options_table_bell_action_list[] = {$/;"	v	file:
options_table_clock_mode_style_list	options-table.c	/^static const char *options_table_clock_mode_style_list[] = {$/;"	v	file:
options_table_entry	options.c	/^options_table_entry(struct options_entry *o)$/;"	f
options_table_entry	tmux.h	/^struct options_table_entry {$/;"	s
options_table_mode_keys_list	options-table.c	/^static const char *options_table_mode_keys_list[] = {$/;"	v	file:
options_table_pane_lines_list	options-table.c	/^static const char *options_table_pane_lines_list[] = {$/;"	v	file:
options_table_pane_status_list	options-table.c	/^static const char *options_table_pane_status_list[] = {$/;"	v	file:
options_table_set_clipboard_list	options-table.c	/^static const char *options_table_set_clipboard_list[] = {$/;"	v	file:
options_table_status_format_default	options-table.c	/^static const char *options_table_status_format_default[] = {$/;"	v	file:
options_table_status_justify_list	options-table.c	/^static const char *options_table_status_justify_list[] = {$/;"	v	file:
options_table_status_keys_list	options-table.c	/^static const char *options_table_status_keys_list[] = {$/;"	v	file:
options_table_status_list	options-table.c	/^static const char *options_table_status_list[] = {$/;"	v	file:
options_table_status_position_list	options-table.c	/^static const char *options_table_status_position_list[] = {$/;"	v	file:
options_table_type	tmux.h	/^enum options_table_type {$/;"	g
options_table_visual_bell_list	options-table.c	/^static const char *options_table_visual_bell_list[] = {$/;"	v	file:
options_table_window_size_list	options-table.c	/^static const char *options_table_window_size_list[] = {$/;"	v	file:
options_to_string	options.c	/^options_to_string(struct options_entry *o, int idx, int numeric)$/;"	f
options_value	tmux.h	/^union options_value {$/;"	u
options_value_free	options.c	/^options_value_free(struct options_entry *o, union options_value *ov)$/;"	f	file:
options_value_to_string	options.c	/^options_value_to_string(struct options_entry *o, union options_value *ov,$/;"	f	file:
optopt	compat.h	418;"	d
optreset	compat.h	419;"	d
order	paste.c	/^	u_int		 order;$/;"	m	struct:paste_buffer	file:
order	window-buffer.c	/^	u_int		 order;$/;"	m	struct:window_buffer_itemdata	file:
orlower	tmux.h	/^	u_int		 orlower;$/;"	m	struct:tty_ctx
orupper	tmux.h	/^	u_int		 orupper;$/;"	m	struct:tty_ctx
osdep_event_init	osdep-aix.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-cygwin.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-darwin.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-dragonfly.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-freebsd.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-haiku.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-hpux.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-linux.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-netbsd.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-openbsd.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-sunos.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-unknown.c	/^osdep_event_init(void)$/;"	f
osdep_event_init	osdep-windows.c	/^osdep_event_init(void)$/;"	f
osdep_get_cwd	osdep-aix.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-cygwin.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-darwin.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-dragonfly.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-freebsd.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-haiku.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-hpux.c	/^osdep_get_cwd(__unused int fd)$/;"	f
osdep_get_cwd	osdep-linux.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-netbsd.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-openbsd.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-sunos.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-unknown.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd	osdep-windows.c	/^osdep_get_cwd(int fd)$/;"	f
osdep_get_cwd_fallback	osdep-freebsd.c	/^osdep_get_cwd_fallback(int fd)$/;"	f	file:
osdep_get_name	osdep-aix.c	/^osdep_get_name(__unused int fd, char *tty)$/;"	f
osdep_get_name	osdep-cygwin.c	/^osdep_get_name(int fd, __unused char *tty)$/;"	f
osdep_get_name	osdep-darwin.c	/^osdep_get_name(int fd, __unused char *tty)$/;"	f
osdep_get_name	osdep-dragonfly.c	/^osdep_get_name(int fd, char *tty)$/;"	f
osdep_get_name	osdep-freebsd.c	/^osdep_get_name(int fd, char *tty)$/;"	f
osdep_get_name	osdep-haiku.c	/^osdep_get_name(int fd, __unused char *tty)$/;"	f
osdep_get_name	osdep-hpux.c	/^osdep_get_name(__unused int fd, __unused char *tty)$/;"	f
osdep_get_name	osdep-linux.c	/^osdep_get_name(int fd, __unused char *tty)$/;"	f
osdep_get_name	osdep-netbsd.c	/^osdep_get_name(int fd, __unused char *tty)$/;"	f
osdep_get_name	osdep-openbsd.c	/^osdep_get_name(int fd, char *tty)$/;"	f
osdep_get_name	osdep-sunos.c	/^osdep_get_name(__unused int fd, char *tty)$/;"	f
osdep_get_name	osdep-unknown.c	/^osdep_get_name(__unused int fd, __unused char *tty)$/;"	f
osdep_get_name	osdep-windows.c	/^osdep_get_name(int fd, char *tty)$/;"	f
osx	tmux.h	/^	u_int		 osx;$/;"	m	struct:tty
osy	tmux.h	/^	u_int		 osy;$/;"	m	struct:tty
out	cmd-parse.y	/^out:$/;"	l
out	format.c	/^	char			*out;$/;"	m	struct:format_job	file:
out	tmux.h	/^	struct evbuffer	*out;$/;"	m	struct:tty	typeref:struct:tty::evbuffer
out_fd	tmux.h	/^	int		 out_fd;$/;"	m	struct:client
overlay_check	tmux.h	/^	overlay_check_cb overlay_check;$/;"	m	struct:client
overlay_check_cb	tmux.h	/^typedef int (*overlay_check_cb)(struct client *, u_int, u_int);$/;"	t
overlay_data	tmux.h	/^	void		*overlay_data;$/;"	m	struct:client
overlay_draw	tmux.h	/^	overlay_draw_cb	 overlay_draw;$/;"	m	struct:client
overlay_draw_cb	tmux.h	/^typedef void (*overlay_draw_cb)(struct client *, struct screen_redraw_ctx *);$/;"	t
overlay_free	tmux.h	/^	overlay_free_cb	 overlay_free;$/;"	m	struct:client
overlay_free_cb	tmux.h	/^typedef void (*overlay_free_cb)(struct client *);$/;"	t
overlay_key	tmux.h	/^	overlay_key_cb	 overlay_key;$/;"	m	struct:client
overlay_key_cb	tmux.h	/^typedef int (*overlay_key_cb)(struct client *, struct key_event *);$/;"	t
overlay_mode	tmux.h	/^	overlay_mode_cb	 overlay_mode;$/;"	m	struct:client
overlay_mode_cb	tmux.h	/^typedef struct screen *(*overlay_mode_cb)(struct client *, u_int *, u_int *);$/;"	t	typeref:struct:overlay_mode_cb
overlay_timer	tmux.h	/^	struct event	 overlay_timer;$/;"	m	struct:client	typeref:struct:client::event
owner	options.c	/^	struct options				*owner;$/;"	m	struct:options_entry	typeref:struct:options_entry::options	file:
ox	tmux.h	/^	u_int		 ox;$/;"	m	struct:screen_redraw_ctx
ox	tmux.h	/^	u_int		ox;$/;"	m	struct:mouse_event
oy	tmux.h	/^	u_int		 oy;$/;"	m	struct:screen_redraw_ctx
oy	tmux.h	/^	u_int		oy;$/;"	m	struct:mouse_event
oy	window-copy.c	/^	u_int		 oy;		\/* number of lines scrolled up *\/$/;"	m	struct:window_copy_mode_data	file:
palette	tmux.h	/^	int		*palette;$/;"	m	struct:tty_ctx
palette	tmux.h	/^	int		*palette;$/;"	m	struct:window_pane
pan_ox	tmux.h	/^	u_int		 pan_ox;$/;"	m	struct:client
pan_oy	tmux.h	/^	u_int		 pan_oy;$/;"	m	struct:client
pan_window	tmux.h	/^	void		*pan_window;$/;"	m	struct:client
pane	control.c	/^	u_int				 pane;$/;"	m	struct:control_pane	file:
pane	control.c	/^	u_int				 pane;$/;"	m	struct:control_sub_pane	file:
pane	notify.c	/^	int			 pane;$/;"	m	struct:notify_entry	file:
pane	tmux.h	/^	struct window_pane	*pane;$/;"	m	struct:client_window	typeref:struct:client_window::window_pane
pane	window-tree.c	/^	int			pane;$/;"	m	struct:window_tree_itemdata	file:
pane_lines	tmux.h	/^	int		 pane_lines;$/;"	m	struct:screen_redraw_ctx
pane_status	tmux.h	/^	int		 pane_status;$/;"	m	struct:screen_redraw_ctx
panes	control.c	/^	struct control_panes		 panes;$/;"	m	struct:control_state	typeref:struct:control_state::control_panes	file:
panes	control.c	/^	struct control_sub_panes	 panes;$/;"	m	struct:control_sub	typeref:struct:control_sub::control_sub_panes	file:
panes	tmux.h	/^	struct window_panes panes;$/;"	m	struct:window	typeref:struct:window::window_panes
param_buf	input.c	/^	u_char			param_buf[64];$/;"	m	struct:input_ctx	file:
param_len	input.c	/^	size_t			param_len;$/;"	m	struct:input_ctx	file:
param_list	input.c	/^	struct input_param	param_list[24];$/;"	m	struct:input_ctx	typeref:struct:input_ctx::input_param	file:
param_list_len	input.c	/^	u_int			param_list_len;$/;"	m	struct:input_ctx	file:
parent	mode-tree.c	/^	struct mode_tree_item		*parent;$/;"	m	struct:mode_tree_item	typeref:struct:mode_tree_item::mode_tree_item	file:
parent	options.c	/^	struct options				*parent;$/;"	m	struct:options	typeref:struct:options::options	file:
parent	proc.c	/^	struct tmuxproc	*parent;$/;"	m	struct:tmuxpeer	typeref:struct:tmuxpeer::tmuxproc	file:
parent	tmux.h	/^	struct layout_cell *parent;$/;"	m	struct:layout_cell	typeref:struct:layout_cell::layout_cell
parse_window_name	names.c	/^parse_window_name(const char *in)$/;"	f
paste_add	paste.c	/^paste_add(const char *prefix, char *data, size_t size)$/;"	f
paste_buffer	paste.c	/^struct paste_buffer {$/;"	s	file:
paste_buffer_created	paste.c	/^paste_buffer_created(struct paste_buffer *pb)$/;"	f
paste_buffer_data	paste.c	/^paste_buffer_data(struct paste_buffer *pb, size_t *size)$/;"	f
paste_buffer_name	paste.c	/^paste_buffer_name(struct paste_buffer *pb)$/;"	f
paste_buffer_order	paste.c	/^paste_buffer_order(struct paste_buffer *pb)$/;"	f
paste_cmp_names	paste.c	/^paste_cmp_names(const struct paste_buffer *a, const struct paste_buffer *b)$/;"	f	file:
paste_cmp_times	paste.c	/^paste_cmp_times(const struct paste_buffer *a, const struct paste_buffer *b)$/;"	f	file:
paste_free	paste.c	/^paste_free(struct paste_buffer *pb)$/;"	f
paste_get_name	paste.c	/^paste_get_name(const char *name)$/;"	f
paste_get_top	paste.c	/^paste_get_top(const char **name)$/;"	f
paste_make_sample	paste.c	/^paste_make_sample(struct paste_buffer *pb)$/;"	f
paste_next_index	paste.c	/^static u_int	paste_next_index;$/;"	v	file:
paste_next_order	paste.c	/^static u_int	paste_next_order;$/;"	v	file:
paste_num_automatic	paste.c	/^static u_int	paste_num_automatic;$/;"	v	file:
paste_rename	paste.c	/^paste_rename(const char *oldname, const char *newname, char **cause)$/;"	f
paste_replace	paste.c	/^paste_replace(struct paste_buffer *pb, char *data, size_t size)$/;"	f
paste_set	paste.c	/^paste_set(char *data, size_t size, const char *name, char **cause)$/;"	f
paste_walk	paste.c	/^paste_walk(struct paste_buffer *pb)$/;"	f
path	popup.c	/^	char			*path;$/;"	m	struct:popup_editor	file:
path	tmux.h	/^	char				*path;$/;"	m	struct:client_file
path	tmux.h	/^	char			*path;$/;"	m	struct:screen
pattern	tmux.h	/^	const char		 *pattern;$/;"	m	struct:options_table_entry
pause_age	tmux.h	/^	u_int		 pause_age;$/;"	m	struct:client
pb	window-buffer.c	/^	struct paste_buffer	*pb;$/;"	m	struct:window_buffer_editdata	typeref:struct:window_buffer_editdata::paste_buffer	file:
peer	tmux.h	/^	struct tmuxpeer	*peer;$/;"	m	struct:client	typeref:struct:client::tmuxpeer
peer_check_version	proc.c	/^peer_check_version(struct tmuxpeer *peer, struct imsg *imsg)$/;"	f	file:
peerid	compat/imsg.h	/^	uint32_t	 peerid;$/;"	m	struct:imsg_hdr
pending_count	control.c	/^	u_int				 pending_count;$/;"	m	struct:control_state	file:
pending_flag	control.c	/^	int				 pending_flag;$/;"	m	struct:control_pane	file:
pid	compat/imsg.h	/^	pid_t			 pid;$/;"	m	struct:imsgbuf
pid	compat/imsg.h	/^	uint32_t	 pid;$/;"	m	struct:imsg_hdr
pid	job.c	/^	pid_t			 pid;$/;"	m	struct:job	file:
pid	tmux.h	/^	pid_t		 pid;$/;"	m	struct:client
pid	tmux.h	/^	pid_t		 pid;$/;"	m	struct:window_pane
pid_t	win32_headers/win32_posix.h	/^typedef int pid_t;$/;"	t
pipe_event	tmux.h	/^	struct bufferevent *pipe_event;$/;"	m	struct:window_pane	typeref:struct:window_pane::bufferevent
pipe_fd	tmux.h	/^	int		 pipe_fd;$/;"	m	struct:window_pane
pipe_offset	tmux.h	/^	struct window_pane_offset pipe_offset;$/;"	m	struct:window_pane	typeref:struct:window_pane::window_pane_offset
pledge	compat.h	130;"	d
popup_check_cb	popup.c	/^popup_check_cb(struct client *c, u_int px, u_int py)$/;"	f	file:
popup_close_cb	tmux.h	/^typedef void (*popup_close_cb)(int, void *);$/;"	t
popup_data	popup.c	/^struct popup_data {$/;"	s	file:
popup_display	popup.c	/^popup_display(int flags, struct cmdq_item *item, u_int px, u_int py, u_int sx,$/;"	f
popup_draw_cb	popup.c	/^popup_draw_cb(struct client *c, __unused struct screen_redraw_ctx *ctx0)$/;"	f	file:
popup_editor	popup.c	/^popup_editor(struct client *c, const char *buf, size_t len,$/;"	f
popup_editor	popup.c	/^struct popup_editor {$/;"	s	file:
popup_editor_close_cb	popup.c	/^popup_editor_close_cb(int status, void *arg)$/;"	f	file:
popup_editor_free	popup.c	/^popup_editor_free(struct popup_editor *pe)$/;"	f	file:
popup_finish_edit_cb	tmux.h	/^typedef void (*popup_finish_edit_cb)(char *, size_t, void *);$/;"	t
popup_free_cb	popup.c	/^popup_free_cb(struct client *c)$/;"	f	file:
popup_handle_drag	popup.c	/^popup_handle_drag(struct client *c, struct popup_data *pd,$/;"	f	file:
popup_height	popup.c	/^popup_height(u_int nlines, const char **lines)$/;"	f
popup_init_ctx_cb	popup.c	/^popup_init_ctx_cb(struct screen_write_ctx *ctx, struct tty_ctx *ttyctx)$/;"	f	file:
popup_job_complete_cb	popup.c	/^popup_job_complete_cb(struct job *job)$/;"	f	file:
popup_job_update_cb	popup.c	/^popup_job_update_cb(struct job *job)$/;"	f	file:
popup_key_cb	popup.c	/^popup_key_cb(struct client *c, struct key_event *event)$/;"	f	file:
popup_mode_cb	popup.c	/^popup_mode_cb(struct client *c, u_int *cx, u_int *cy)$/;"	f	file:
popup_redraw_cb	popup.c	/^popup_redraw_cb(const struct tty_ctx *ttyctx)$/;"	f	file:
popup_set_client_cb	popup.c	/^popup_set_client_cb(struct tty_ctx *ttyctx, struct client *c)$/;"	f	file:
popup_width	popup.c	/^popup_width(struct cmdq_item *item, u_int nlines, const char **lines,$/;"	f
popup_write_screen	popup.c	/^popup_write_screen(struct client *c, struct popup_data *pd)$/;"	f	file:
prefix	tmux.h	/^	u_int				 prefix;$/;"	m	struct:window_mode_entry
preview	mode-tree.c	/^	int			  preview;$/;"	m	struct:mode_tree_data	file:
printflike	tmux.h	96;"	d
proc_add_peer	proc.c	/^proc_add_peer(struct tmuxproc *tp, int fd,$/;"	f
proc_clear_signals	proc.c	/^proc_clear_signals(struct tmuxproc *tp, int defaults)$/;"	f
proc_event_cb	proc.c	/^proc_event_cb(__unused int fd, short events, void *arg)$/;"	f	file:
proc_exit	proc.c	/^proc_exit(struct tmuxproc *tp)$/;"	f
proc_kill_peer	proc.c	/^proc_kill_peer(struct tmuxpeer *peer)$/;"	f
proc_loop	proc.c	/^proc_loop(struct tmuxproc *tp, int (*loopcb)(void))$/;"	f
proc_remove_peer	proc.c	/^proc_remove_peer(struct tmuxpeer *peer)$/;"	f
proc_send	proc.c	/^proc_send(struct tmuxpeer *peer, enum msgtype type, int fd, const void *buf,$/;"	f
proc_set_signals	proc.c	/^proc_set_signals(struct tmuxproc *tp, void (*signalcb)(int))$/;"	f
proc_signal_cb	proc.c	/^proc_signal_cb(int signo, __unused short events, void *arg)$/;"	f	file:
proc_start	proc.c	/^proc_start(const char *name)$/;"	f
proc_toggle_log	proc.c	/^proc_toggle_log(struct tmuxproc *tp)$/;"	f
proc_update_event	proc.c	/^proc_update_event(struct tmuxpeer *peer)$/;"	f	file:
prompt_buffer	tmux.h	/^	struct utf8_data *prompt_buffer;$/;"	m	struct:client	typeref:struct:client::utf8_data
prompt_data	tmux.h	/^	void		*prompt_data;$/;"	m	struct:client
prompt_flags	tmux.h	/^	int		 prompt_flags;$/;"	m	struct:client
prompt_free_cb	tmux.h	/^typedef void (*prompt_free_cb)(void *);$/;"	t
prompt_freecb	tmux.h	/^	prompt_free_cb	 prompt_freecb;$/;"	m	struct:client
prompt_hindex	tmux.h	/^	u_int		 prompt_hindex;$/;"	m	struct:client
prompt_index	tmux.h	/^	size_t		 prompt_index;$/;"	m	struct:client
prompt_input_cb	tmux.h	/^typedef int (*prompt_input_cb)(struct client *, void *, const char *, int);$/;"	t
prompt_inputcb	tmux.h	/^	prompt_input_cb	 prompt_inputcb;$/;"	m	struct:client
prompt_mode	tmux.h	/^	enum { PROMPT_ENTRY, PROMPT_COMMAND } prompt_mode;$/;"	m	struct:client	typeref:enum:client::__anon15
prompt_saved	tmux.h	/^	struct utf8_data *prompt_saved;$/;"	m	struct:client	typeref:struct:client::utf8_data
prompt_string	tmux.h	/^	char		*prompt_string;$/;"	m	struct:client
prompts	cmd-command-prompt.c	/^	char	*prompts;$/;"	m	struct:cmd_command_prompt_cdata	file:
ptm_fd	tmux.c	/^int		 ptm_fd = -1;$/;"	v
ptr	tmux.h	/^	void			*ptr;$/;"	m	struct:tty_ctx
px	menu.c	/^	u_int			 px;$/;"	m	struct:menu_data	file:
px	popup.c	/^	u_int			  px;$/;"	m	struct:popup_data	file:
py	menu.c	/^	u_int			 py;$/;"	m	struct:menu_data	file:
py	popup.c	/^	u_int			  py;$/;"	m	struct:popup_data	file:
queue	cmd-queue.c	/^	struct cmdq_list	*queue;$/;"	m	struct:cmdq_item	typeref:struct:cmdq_item::cmdq_list	file:
queue	tmux.h	/^	struct cmdq_list *queue;$/;"	m	struct:client	typeref:struct:client::cmdq_list
queued	compat/imsg.h	/^	uint32_t		 queued;$/;"	m	struct:msgbuf
queued	control.c	/^	struct window_pane_offset	 queued;$/;"	m	struct:control_pane	typeref:struct:control_pane::window_pane_offset	file:
r	compat/imsg.h	/^	struct ibuf_read	 r;$/;"	m	struct:imsgbuf	typeref:struct:imsgbuf::ibuf_read
rainbowColor	tools/24-bit-color.sh	/^rainbowColor()$/;"	f
range_argument	tmux.h	/^	u_int			range_argument;$/;"	m	struct:style
range_type	tmux.h	/^	enum style_range_type	range_type;$/;"	m	struct:style	typeref:enum:style::style_range_type
ranges	tmux.h	/^	struct style_ranges	 ranges;$/;"	m	struct:status_line_entry	typeref:struct:status_line_entry::style_ranges
read_event	control.c	/^	struct bufferevent		*read_event;$/;"	m	struct:control_state	typeref:struct:control_state::bufferevent	file:
reallocarray	compat/reallocarray.c	/^reallocarray(void *optr, size_t nmemb, size_t size)$/;"	f
recalculate_size	resize.c	/^recalculate_size(struct window *w, int now)$/;"	f
recalculate_size_skip_client	resize.c	/^recalculate_size_skip_client(struct client *loop, __unused int type,$/;"	f	file:
recalculate_sizes	resize.c	/^recalculate_sizes(void)$/;"	f
recalculate_sizes_now	resize.c	/^recalculate_sizes_now(int now)$/;"	f
recallocarray	compat/recallocarray.c	/^recallocarray(void *ptr, size_t oldnmemb, size_t newnmemb, size_t size)$/;"	f
rectangle	screen.c	/^	int		 rectangle;$/;"	m	struct:screen_sel	file:
rectflag	window-copy.c	/^	int		 rectflag;	\/* in rectangle copy mode? *\/$/;"	m	struct:window_copy_mode_data	file:
redraw	tmux.h	/^	size_t		 redraw;$/;"	m	struct:client
redraw_cb	tmux.h	/^	tty_ctx_redraw_cb	 redraw_cb;$/;"	m	struct:tty_ctx
redraw_panes	tmux.h	/^	uint64_t	 redraw_panes;$/;"	m	struct:client
references	cmd-queue.c	/^	int			 references;$/;"	m	struct:cmdq_state	file:
references	mode-tree.c	/^	u_int			  references;$/;"	m	struct:mode_tree_data	file:
references	tmux.h	/^	int				 references;$/;"	m	struct:client_file
references	tmux.h	/^	int			 references;$/;"	m	struct:status_line
references	tmux.h	/^	int		 references;$/;"	m	struct:client
references	tmux.h	/^	int		 references;$/;"	m	struct:cmd_list
references	tmux.h	/^	int		 references;$/;"	m	struct:session
references	tmux.h	/^	u_int			 references;$/;"	m	struct:key_table
references	tmux.h	/^	u_int		 references;$/;"	m	struct:window
references	window-customize.c	/^	int					  references;$/;"	m	struct:window_customize_modedata	file:
references	window-tree.c	/^	int				  references;$/;"	m	struct:window_tree_modedata	file:
regsub	regsub.c	/^regsub(const char *pattern, const char *with, const char *text, int flags)$/;"	f
regsub_copy	regsub.c	/^regsub_copy(char **buf, size_t *len, const char *text, size_t start, size_t end)$/;"	f	file:
regsub_expand	regsub.c	/^regsub_expand(char **buf, size_t *len, const char *with, const char *text,$/;"	f	file:
repeat_timer	tmux.h	/^	struct event	 repeat_timer;$/;"	m	struct:client	typeref:struct:client::event
resetOutput	tools/24-bit-color.sh	/^resetOutput()$/;"	f
resize	tmux.h	/^	void		 (*resize)(struct window_mode_entry *, u_int, u_int);$/;"	m	struct:window_mode
resize_timer	tmux.h	/^	struct event	 resize_timer;$/;"	m	struct:window_pane	typeref:struct:window_pane::event
resize_window	resize.c	/^resize_window(struct window *w, u_int sx, u_int sy, int xpixel, int ypixel)$/;"	f
retval	cmd-source-file.c	/^	enum cmd_retval		  retval;$/;"	m	struct:cmd_source_file_data	typeref:enum:cmd_source_file_data::cmd_retval	file:
retval	tmux.h	/^	int		 retval;$/;"	m	struct:client
reversed	tmux.h	/^	int	reversed;$/;"	m	struct:mode_tree_sort_criteria
right	tmux.h	/^	struct tty_key	*right;$/;"	m	struct:tty_key	typeref:struct:tty_key::tty_key
right	window-tree.c	/^	int				  right;$/;"	m	struct:window_tree_modedata	file:
rleft	tmux.h	/^	u_int		 rleft;$/;"	m	struct:tty
rlower	tmux.h	/^	u_int			 rlower;	\/* scroll region bottom *\/$/;"	m	struct:screen
rlower	tmux.h	/^	u_int		 rlower;$/;"	m	struct:tty
rpos	compat/imsg.h	/^	size_t			 rpos;$/;"	m	struct:ibuf
rptr	compat/imsg.h	/^	unsigned char		*rptr;$/;"	m	struct:ibuf_read
rright	tmux.h	/^	u_int		 rright;$/;"	m	struct:tty
rupper	tmux.h	/^	u_int			 rupper;	\/* scroll region top *\/$/;"	m	struct:screen
rupper	tmux.h	/^	u_int		 rupper;$/;"	m	struct:tty
rxoff	tmux.h	/^	u_int		 rxoff;$/;"	m	struct:tty_ctx
ryoff	tmux.h	/^	u_int		 ryoff;$/;"	m	struct:tty_ctx
s	cmd-run-shell.c	/^	struct session		*s;$/;"	m	struct:cmd_run_shell_data	typeref:struct:cmd_run_shell_data::session	file:
s	format-draw.c	/^	struct screen			*s;$/;"	m	struct:format_range	typeref:struct:format_range::screen	file:
s	format.c	/^	struct session		*s;$/;"	m	struct:format_tree	typeref:struct:format_tree::session	file:
s	menu.c	/^	struct screen		 s;$/;"	m	struct:menu_data	typeref:struct:menu_data::screen	file:
s	popup.c	/^	struct screen		  s;$/;"	m	struct:popup_data	typeref:struct:popup_data::screen	file:
s	tmux.h	/^	int		s;$/;"	m	struct:mouse_event
s	tmux.h	/^	struct screen		*s;$/;"	m	struct:screen_write_ctx	typeref:struct:screen_write_ctx::screen
s	tmux.h	/^	struct screen		*s;$/;"	m	struct:tty_ctx	typeref:struct:tty_ctx::screen
s	tmux.h	/^	struct session		 *s;$/;"	m	struct:spawn_context	typeref:struct:spawn_context::session
s	tmux.h	/^	struct session		*s;$/;"	m	struct:cmd_find_state	typeref:struct:cmd_find_state::session
s	window-copy.c	/^	struct session			*s;$/;"	m	struct:window_copy_cmd_state	typeref:struct:window_copy_cmd_state::session	file:
saved	mode-tree.c	/^	struct mode_tree_list	  saved;$/;"	m	struct:mode_tree_data	typeref:struct:mode_tree_data::mode_tree_list	file:
saved_cell	tmux.h	/^	struct grid_cell	 saved_cell;$/;"	m	struct:screen	typeref:struct:screen::grid_cell
saved_cx	tmux.h	/^	u_int			 saved_cx;$/;"	m	struct:screen
saved_cy	tmux.h	/^	u_int			 saved_cy;$/;"	m	struct:screen
saved_flags	tmux.h	/^	int			 saved_flags;$/;"	m	struct:screen
saved_grid	tmux.h	/^	struct grid		*saved_grid;$/;"	m	struct:screen	typeref:struct:screen::grid
saved_layout_cell	tmux.h	/^	struct layout_cell *saved_layout_cell;$/;"	m	struct:window_pane	typeref:struct:window_pane::layout_cell
saved_layout_root	tmux.h	/^	struct layout_cell *saved_layout_root;$/;"	m	struct:window	typeref:struct:window::layout_cell
scope	tmux.h	/^	int			  scope;$/;"	m	struct:options_table_entry
scope	window-customize.c	/^	enum window_customize_scope		 scope;$/;"	m	struct:window_customize_itemdata	typeref:enum:window_customize_itemdata::window_customize_scope	file:
screen	mode-tree.c	/^	struct screen		  screen;$/;"	m	struct:mode_tree_data	typeref:struct:mode_tree_data::screen	file:
screen	tmux.h	/^	struct screen			*screen;$/;"	m	struct:window_mode_entry	typeref:struct:window_mode_entry::screen
screen	tmux.h	/^	struct screen		 screen;$/;"	m	struct:status_line	typeref:struct:status_line::screen
screen	tmux.h	/^	struct screen	*screen;$/;"	m	struct:window_pane	typeref:struct:window_pane::screen
screen	tmux.h	/^struct screen {$/;"	s
screen	window-clock.c	/^	struct screen	        screen;$/;"	m	struct:window_clock_mode_data	typeref:struct:window_clock_mode_data::screen	file:
screen	window-copy.c	/^	struct screen	 screen;$/;"	m	struct:window_copy_mode_data	typeref:struct:window_copy_mode_data::screen	file:
screen_alternate_off	screen.c	/^screen_alternate_off(struct screen *s, struct grid_cell *gc, int cursor)$/;"	f
screen_alternate_on	screen.c	/^screen_alternate_on(struct screen *s, struct grid_cell *gc, int cursor)$/;"	f
screen_check_selection	screen.c	/^screen_check_selection(struct screen *s, u_int px, u_int py)$/;"	f
screen_clear_selection	screen.c	/^screen_clear_selection(struct screen *s)$/;"	f
screen_free	screen.c	/^screen_free(struct screen *s)$/;"	f
screen_free_titles	screen.c	/^screen_free_titles(struct screen *s)$/;"	f	file:
screen_hide_selection	screen.c	/^screen_hide_selection(struct screen *s)$/;"	f
screen_hlimit	tmux.h	864;"	d
screen_hsize	tmux.h	863;"	d
screen_init	screen.c	/^screen_init(struct screen *s, u_int sx, u_int sy, u_int hlimit)$/;"	f
screen_pop_title	screen.c	/^screen_pop_title(struct screen *s)$/;"	f
screen_push_title	screen.c	/^screen_push_title(struct screen *s)$/;"	f
screen_redraw_border_set	screen-redraw.c	/^screen_redraw_border_set(struct window_pane *wp, int pane_lines, int cell_type,$/;"	f	file:
screen_redraw_border_type	screen-redraw.c	/^enum screen_redraw_border_type {$/;"	g	file:
screen_redraw_cell_border	screen-redraw.c	/^screen_redraw_cell_border(struct client *c, u_int px, u_int py, int pane_status)$/;"	f	file:
screen_redraw_check_cell	screen-redraw.c	/^screen_redraw_check_cell(struct client *c, u_int px, u_int py, int pane_status,$/;"	f	file:
screen_redraw_check_is	screen-redraw.c	/^screen_redraw_check_is(u_int px, u_int py, int pane_status,$/;"	f	file:
screen_redraw_ctx	tmux.h	/^struct screen_redraw_ctx {$/;"	s
screen_redraw_double_borders	screen-redraw.c	/^static const struct utf8_data screen_redraw_double_borders[] = {$/;"	v	typeref:struct:utf8_data	file:
screen_redraw_draw_borders	screen-redraw.c	/^screen_redraw_draw_borders(struct screen_redraw_ctx *ctx)$/;"	f	file:
screen_redraw_draw_borders_cell	screen-redraw.c	/^screen_redraw_draw_borders_cell(struct screen_redraw_ctx *ctx, u_int i, u_int j)$/;"	f	file:
screen_redraw_draw_borders_style	screen-redraw.c	/^screen_redraw_draw_borders_style(struct screen_redraw_ctx *ctx, u_int x,$/;"	f	file:
screen_redraw_draw_pane	screen-redraw.c	/^screen_redraw_draw_pane(struct screen_redraw_ctx *ctx, struct window_pane *wp)$/;"	f	file:
screen_redraw_draw_pane_status	screen-redraw.c	/^screen_redraw_draw_pane_status(struct screen_redraw_ctx *ctx)$/;"	f	file:
screen_redraw_draw_panes	screen-redraw.c	/^screen_redraw_draw_panes(struct screen_redraw_ctx *ctx)$/;"	f	file:
screen_redraw_draw_status	screen-redraw.c	/^screen_redraw_draw_status(struct screen_redraw_ctx *ctx)$/;"	f	file:
screen_redraw_heavy_borders	screen-redraw.c	/^static const struct utf8_data screen_redraw_heavy_borders[] = {$/;"	v	typeref:struct:utf8_data	file:
screen_redraw_make_pane_status	screen-redraw.c	/^screen_redraw_make_pane_status(struct client *c, struct window_pane *wp,$/;"	f	file:
screen_redraw_pane	screen-redraw.c	/^screen_redraw_pane(struct client *c, struct window_pane *wp)$/;"	f
screen_redraw_pane_border	screen-redraw.c	/^screen_redraw_pane_border(struct window_pane *wp, u_int px, u_int py,$/;"	f	file:
screen_redraw_screen	screen-redraw.c	/^screen_redraw_screen(struct client *c)$/;"	f
screen_redraw_set_context	screen-redraw.c	/^screen_redraw_set_context(struct client *c, struct screen_redraw_ctx *ctx)$/;"	f	file:
screen_redraw_two_panes	screen-redraw.c	/^screen_redraw_two_panes(struct window *w, int direction)$/;"	f	file:
screen_redraw_type_of_cell	screen-redraw.c	/^screen_redraw_type_of_cell(struct client *c, u_int px, u_int py,$/;"	f	file:
screen_redraw_update	screen-redraw.c	/^screen_redraw_update(struct client *c, int flags)$/;"	f	file:
screen_reflow	screen.c	/^screen_reflow(struct screen *s, u_int new_x, u_int *cx, u_int *cy, int cursor)$/;"	f	file:
screen_reinit	screen.c	/^screen_reinit(struct screen *s)$/;"	f
screen_reset_tabs	screen.c	/^screen_reset_tabs(struct screen *s)$/;"	f
screen_resize	screen.c	/^screen_resize(struct screen *s, u_int sx, u_int sy, int reflow)$/;"	f
screen_resize_cursor	screen.c	/^screen_resize_cursor(struct screen *s, u_int sx, u_int sy, int reflow,$/;"	f
screen_resize_y	screen.c	/^screen_resize_y(struct screen *s, u_int sy, int eat_empty, u_int *cy)$/;"	f	file:
screen_sel	screen.c	/^struct screen_sel {$/;"	s	file:
screen_select_cell	screen.c	/^screen_select_cell(struct screen *s, struct grid_cell *dst,$/;"	f
screen_set_cursor_colour	screen.c	/^screen_set_cursor_colour(struct screen *s, const char *colour)$/;"	f
screen_set_cursor_style	screen.c	/^screen_set_cursor_style(struct screen *s, u_int style)$/;"	f
screen_set_path	screen.c	/^screen_set_path(struct screen *s, const char *path)$/;"	f
screen_set_selection	screen.c	/^screen_set_selection(struct screen *s, u_int sx, u_int sy,$/;"	f
screen_set_title	screen.c	/^screen_set_title(struct screen *s, const char *title)$/;"	f
screen_size_x	tmux.h	861;"	d
screen_size_y	tmux.h	862;"	d
screen_title_entry	screen.c	/^struct screen_title_entry {$/;"	s	file:
screen_write_alignmenttest	screen-write.c	/^screen_write_alignmenttest(struct screen_write_ctx *ctx)$/;"	f
screen_write_alternateoff	screen-write.c	/^screen_write_alternateoff(struct screen_write_ctx *ctx, struct grid_cell *gc,$/;"	f
screen_write_alternateon	screen-write.c	/^screen_write_alternateon(struct screen_write_ctx *ctx, struct grid_cell *gc,$/;"	f
screen_write_backspace	screen-write.c	/^screen_write_backspace(struct screen_write_ctx *ctx)$/;"	f
screen_write_box	screen-write.c	/^screen_write_box(struct screen_write_ctx *ctx, u_int nx, u_int ny)$/;"	f
screen_write_carriagereturn	screen-write.c	/^screen_write_carriagereturn(struct screen_write_ctx *ctx)$/;"	f
screen_write_cell	screen-write.c	/^screen_write_cell(struct screen_write_ctx *ctx, const struct grid_cell *gc)$/;"	f
screen_write_clearcharacter	screen-write.c	/^screen_write_clearcharacter(struct screen_write_ctx *ctx, u_int nx, u_int bg)$/;"	f
screen_write_clearendofline	screen-write.c	/^screen_write_clearendofline(struct screen_write_ctx *ctx, u_int bg)$/;"	f
screen_write_clearendofscreen	screen-write.c	/^screen_write_clearendofscreen(struct screen_write_ctx *ctx, u_int bg)$/;"	f
screen_write_clearhistory	screen-write.c	/^screen_write_clearhistory(struct screen_write_ctx *ctx)$/;"	f
screen_write_clearline	screen-write.c	/^screen_write_clearline(struct screen_write_ctx *ctx, u_int bg)$/;"	f
screen_write_clearscreen	screen-write.c	/^screen_write_clearscreen(struct screen_write_ctx *ctx, u_int bg)$/;"	f
screen_write_clearstartofline	screen-write.c	/^screen_write_clearstartofline(struct screen_write_ctx *ctx, u_int bg)$/;"	f
screen_write_clearstartofscreen	screen-write.c	/^screen_write_clearstartofscreen(struct screen_write_ctx *ctx, u_int bg)$/;"	f
screen_write_collect_add	screen-write.c	/^screen_write_collect_add(struct screen_write_ctx *ctx,$/;"	f
screen_write_collect_clear	screen-write.c	/^screen_write_collect_clear(struct screen_write_ctx *ctx, u_int y, u_int n)$/;"	f	file:
screen_write_collect_clear_end	screen-write.c	/^screen_write_collect_clear_end(struct screen_write_ctx *ctx, u_int y, u_int x)$/;"	f	file:
screen_write_collect_clear_start	screen-write.c	/^screen_write_collect_clear_start(struct screen_write_ctx *ctx, u_int y, u_int x)$/;"	f	file:
screen_write_collect_end	screen-write.c	/^screen_write_collect_end(struct screen_write_ctx *ctx)$/;"	f
screen_write_collect_flush	screen-write.c	/^screen_write_collect_flush(struct screen_write_ctx *ctx, int scroll_only,$/;"	f	file:
screen_write_collect_item	screen-write.c	/^struct screen_write_collect_item {$/;"	s	file:
screen_write_collect_line	screen-write.c	/^struct screen_write_collect_line {$/;"	s	file:
screen_write_collect_scroll	screen-write.c	/^screen_write_collect_scroll(struct screen_write_ctx *ctx)$/;"	f	file:
screen_write_combine	screen-write.c	/^screen_write_combine(struct screen_write_ctx *ctx, const struct utf8_data *ud,$/;"	f	file:
screen_write_ctx	tmux.h	/^struct screen_write_ctx {$/;"	s
screen_write_cursordown	screen-write.c	/^screen_write_cursordown(struct screen_write_ctx *ctx, u_int ny)$/;"	f
screen_write_cursorleft	screen-write.c	/^screen_write_cursorleft(struct screen_write_ctx *ctx, u_int nx)$/;"	f
screen_write_cursormove	screen-write.c	/^screen_write_cursormove(struct screen_write_ctx *ctx, int px, int py,$/;"	f
screen_write_cursorright	screen-write.c	/^screen_write_cursorright(struct screen_write_ctx *ctx, u_int nx)$/;"	f
screen_write_cursorup	screen-write.c	/^screen_write_cursorup(struct screen_write_ctx *ctx, u_int ny)$/;"	f
screen_write_deletecharacter	screen-write.c	/^screen_write_deletecharacter(struct screen_write_ctx *ctx, u_int nx, u_int bg)$/;"	f
screen_write_deleteline	screen-write.c	/^screen_write_deleteline(struct screen_write_ctx *ctx, u_int ny, u_int bg)$/;"	f
screen_write_fast_copy	screen-write.c	/^screen_write_fast_copy(struct screen_write_ctx *ctx, struct screen *src,$/;"	f
screen_write_free_list	screen-write.c	/^screen_write_free_list(struct screen *s)$/;"	f
screen_write_hline	screen-write.c	/^screen_write_hline(struct screen_write_ctx *ctx, u_int nx, int left, int right)$/;"	f
screen_write_init	screen-write.c	/^screen_write_init(struct screen_write_ctx *ctx, struct screen *s)$/;"	f	file:
screen_write_init_ctx_cb	tmux.h	/^typedef void (*screen_write_init_ctx_cb)(struct screen_write_ctx *,$/;"	t
screen_write_initctx	screen-write.c	/^screen_write_initctx(struct screen_write_ctx *ctx, struct tty_ctx *ttyctx,$/;"	f	file:
screen_write_insertcharacter	screen-write.c	/^screen_write_insertcharacter(struct screen_write_ctx *ctx, u_int nx, u_int bg)$/;"	f
screen_write_insertline	screen-write.c	/^screen_write_insertline(struct screen_write_ctx *ctx, u_int ny, u_int bg)$/;"	f
screen_write_linefeed	screen-write.c	/^screen_write_linefeed(struct screen_write_ctx *ctx, int wrapped, u_int bg)$/;"	f
screen_write_make_list	screen-write.c	/^screen_write_make_list(struct screen *s)$/;"	f
screen_write_menu	screen-write.c	/^screen_write_menu(struct screen_write_ctx *ctx, struct menu *menu,$/;"	f
screen_write_mode_clear	screen-write.c	/^screen_write_mode_clear(struct screen_write_ctx *ctx, int mode)$/;"	f
screen_write_mode_set	screen-write.c	/^screen_write_mode_set(struct screen_write_ctx *ctx, int mode)$/;"	f
screen_write_nputs	screen-write.c	/^screen_write_nputs(struct screen_write_ctx *ctx, ssize_t maxlen,$/;"	f
screen_write_offset_timer	screen-write.c	/^screen_write_offset_timer(__unused int fd, __unused short events, void *data)$/;"	f	file:
screen_write_overwrite	screen-write.c	/^screen_write_overwrite(struct screen_write_ctx *ctx, struct grid_cell *gc,$/;"	f	file:
screen_write_preview	screen-write.c	/^screen_write_preview(struct screen_write_ctx *ctx, struct screen *src, u_int nx,$/;"	f
screen_write_putc	screen-write.c	/^screen_write_putc(struct screen_write_ctx *ctx, const struct grid_cell *gcp,$/;"	f
screen_write_puts	screen-write.c	/^screen_write_puts(struct screen_write_ctx *ctx, const struct grid_cell *gcp,$/;"	f
screen_write_rawstring	screen-write.c	/^screen_write_rawstring(struct screen_write_ctx *ctx, u_char *str, u_int len)$/;"	f
screen_write_redraw_cb	screen-write.c	/^screen_write_redraw_cb(const struct tty_ctx *ttyctx)$/;"	f	file:
screen_write_reset	screen-write.c	/^screen_write_reset(struct screen_write_ctx *ctx)$/;"	f
screen_write_reverseindex	screen-write.c	/^screen_write_reverseindex(struct screen_write_ctx *ctx, u_int bg)$/;"	f
screen_write_scrolldown	screen-write.c	/^screen_write_scrolldown(struct screen_write_ctx *ctx, u_int lines, u_int bg)$/;"	f
screen_write_scrollregion	screen-write.c	/^screen_write_scrollregion(struct screen_write_ctx *ctx, u_int rupper,$/;"	f
screen_write_scrollup	screen-write.c	/^screen_write_scrollup(struct screen_write_ctx *ctx, u_int lines, u_int bg)$/;"	f
screen_write_set_client_cb	screen-write.c	/^screen_write_set_client_cb(struct tty_ctx *ttyctx, struct client *c)$/;"	f	file:
screen_write_set_cursor	screen-write.c	/^screen_write_set_cursor(struct screen_write_ctx *ctx, int cx, int cy)$/;"	f	file:
screen_write_setselection	screen-write.c	/^screen_write_setselection(struct screen_write_ctx *ctx, u_char *str, u_int len)$/;"	f
screen_write_start	screen-write.c	/^screen_write_start(struct screen_write_ctx *ctx, struct screen *s)$/;"	f
screen_write_start_callback	screen-write.c	/^screen_write_start_callback(struct screen_write_ctx *ctx, struct screen *s,$/;"	f
screen_write_start_pane	screen-write.c	/^screen_write_start_pane(struct screen_write_ctx *ctx, struct window_pane *wp,$/;"	f
screen_write_stop	screen-write.c	/^screen_write_stop(struct screen_write_ctx *ctx)$/;"	f
screen_write_strlen	screen-write.c	/^screen_write_strlen(const char *fmt, ...)$/;"	f
screen_write_text	screen-write.c	/^screen_write_text(struct screen_write_ctx *ctx, u_int cx, u_int width,$/;"	f
screen_write_vline	screen-write.c	/^screen_write_vline(struct screen_write_ctx *ctx, u_int ny, int top, int bottom)$/;"	f
screen_write_vnputs	screen-write.c	/^screen_write_vnputs(struct screen_write_ctx *ctx, ssize_t maxlen,$/;"	f
scroll_exit	window-copy.c	/^	int		 scroll_exit;	\/* exit on scroll to end? *\/$/;"	m	struct:window_copy_mode_data	file:
scrolled	tmux.h	/^	u_int			 scrolled;$/;"	m	struct:screen_write_ctx
search	mode-tree.c	/^	char			 *search;$/;"	m	struct:mode_tree_data	file:
searchcb	mode-tree.c	/^	mode_tree_search_cb       searchcb;$/;"	m	struct:mode_tree_data	file:
searchcount	window-copy.c	/^	int		 searchcount;$/;"	m	struct:window_copy_mode_data	file:
searchgen	window-copy.c	/^	u_char		 searchgen;$/;"	m	struct:window_copy_mode_data	file:
searchmark	window-copy.c	/^	u_char		*searchmark;$/;"	m	struct:window_copy_mode_data	file:
searchmore	window-copy.c	/^	int		 searchmore;$/;"	m	struct:window_copy_mode_data	file:
searcho	window-copy.c	/^	int		 searcho;$/;"	m	struct:window_copy_mode_data	file:
searchregex	tmux.h	/^	int		 searchregex;$/;"	m	struct:window_pane
searchregex	window-copy.c	/^	int		 searchregex;$/;"	m	struct:window_copy_mode_data	file:
searchstr	tmux.h	/^	char		*searchstr;$/;"	m	struct:window_pane
searchstr	window-copy.c	/^	char		*searchstr;$/;"	m	struct:window_copy_mode_data	file:
searchthis	window-copy.c	/^	int		 searchthis;$/;"	m	struct:window_copy_mode_data	file:
searchtype	window-copy.c	/^	int		 searchtype;$/;"	m	struct:window_copy_mode_data	file:
searchx	window-copy.c	/^	int		 searchx;$/;"	m	struct:window_copy_mode_data	file:
searchy	window-copy.c	/^	int		 searchy;$/;"	m	struct:window_copy_mode_data	file:
sel	tmux.h	/^	struct screen_sel	*sel;$/;"	m	struct:screen	typeref:struct:screen::screen_sel
selflag	window-copy.c	/^	} selflag;$/;"	m	struct:window_copy_mode_data	typeref:enum:window_copy_mode_data::__anon21	file:
selrx	window-copy.c	/^	u_int		 selrx;		\/* selection reset positions *\/$/;"	m	struct:window_copy_mode_data	file:
selry	window-copy.c	/^	u_int		 selry;$/;"	m	struct:window_copy_mode_data	file:
selx	window-copy.c	/^	u_int		 selx;		\/* beginning of selection *\/$/;"	m	struct:window_copy_mode_data	file:
sely	window-copy.c	/^	u_int		 sely;$/;"	m	struct:window_copy_mode_data	file:
sentry	tmux.h	/^	TAILQ_ENTRY(winlink) sentry;$/;"	m	struct:winlink
separator	tmux.h	/^	const char		 *separator;$/;"	m	struct:options_table_entry
seq1	tools/24-bit-color.sh	/^    seq1()$/;"	f
server_accept	server.c	/^server_accept(int fd, short events, __unused void *data)$/;"	f	file:
server_add_accept	server.c	/^server_add_accept(int timeout)$/;"	f
server_add_message	server.c	/^server_add_message(const char *fmt, ...)$/;"	f
server_check_marked	server.c	/^server_check_marked(void)$/;"	f
server_check_unattached	server-fn.c	/^server_check_unattached(void)$/;"	f
server_child_exited	server.c	/^server_child_exited(pid_t pid, int status)$/;"	f	file:
server_child_signal	server.c	/^server_child_signal(void)$/;"	f	file:
server_child_stopped	server.c	/^server_child_stopped(pid_t pid, int status)$/;"	f	file:
server_clear_marked	server.c	/^server_clear_marked(void)$/;"	f
server_client_assume_paste	server-client.c	/^server_client_assume_paste(struct session *s)$/;"	f	file:
server_client_check_exit	server-client.c	/^server_client_check_exit(struct client *c)$/;"	f	file:
server_client_check_modes	server-client.c	/^server_client_check_modes(struct client *c)$/;"	f	file:
server_client_check_mouse	server-client.c	/^server_client_check_mouse(struct client *c, struct key_event *event)$/;"	f	file:
server_client_check_nested	server-client.c	/^server_client_check_nested(struct client *c)$/;"	f
server_client_check_pane_buffer	server-client.c	/^server_client_check_pane_buffer(struct window_pane *wp)$/;"	f	file:
server_client_check_pane_focus	server-client.c	/^server_client_check_pane_focus(struct window_pane *wp)$/;"	f	file:
server_client_check_pane_resize	server-client.c	/^server_client_check_pane_resize(struct window_pane *wp)$/;"	f	file:
server_client_check_redraw	server-client.c	/^server_client_check_redraw(struct client *c)$/;"	f	file:
server_client_check_window_resize	server-client.c	/^server_client_check_window_resize(struct window *w)$/;"	f	file:
server_client_clear_overlay	server-client.c	/^server_client_clear_overlay(struct client *c)$/;"	f
server_client_click_timer	server-client.c	/^server_client_click_timer(__unused int fd, __unused short events, void *data)$/;"	f	file:
server_client_command_done	server-client.c	/^server_client_command_done(struct cmdq_item *item, __unused void *data)$/;"	f	file:
server_client_control_flags	server-client.c	/^server_client_control_flags(struct client *c, const char *next)$/;"	f	file:
server_client_create	server-client.c	/^server_client_create(int fd)$/;"	f
server_client_detach	server-client.c	/^server_client_detach(struct client *c, enum msgtype msgtype)$/;"	f
server_client_dispatch	server-client.c	/^server_client_dispatch(struct imsg *imsg, void *arg)$/;"	f	file:
server_client_dispatch_command	server-client.c	/^server_client_dispatch_command(struct client *c, struct imsg *imsg)$/;"	f	file:
server_client_dispatch_identify	server-client.c	/^server_client_dispatch_identify(struct client *c, struct imsg *imsg)$/;"	f	file:
server_client_dispatch_read_data	server-client.c	/^server_client_dispatch_read_data(struct client *c, struct imsg *imsg)$/;"	f	file:
server_client_dispatch_read_done	server-client.c	/^server_client_dispatch_read_done(struct client *c, struct imsg *imsg)$/;"	f	file:
server_client_dispatch_shell	server-client.c	/^server_client_dispatch_shell(struct client *c)$/;"	f	file:
server_client_dispatch_write_ready	server-client.c	/^server_client_dispatch_write_ready(struct client *c, struct imsg *imsg)$/;"	f	file:
server_client_exec	server-client.c	/^server_client_exec(struct client *c, const char *cmd)$/;"	f
server_client_flags	server.c	/^static uint64_t		 server_client_flags;$/;"	v	file:
server_client_force_timer	server-client.c	/^server_client_force_timer(__unused int fd, __unused short events, void *data)$/;"	f	file:
server_client_free	server-client.c	/^server_client_free(__unused int fd, __unused short events, void *arg)$/;"	f	file:
server_client_get_client_window	server-client.c	/^server_client_get_client_window(struct client *c, u_int id)$/;"	f	file:
server_client_get_cwd	server-client.c	/^server_client_get_cwd(struct client *c, struct session *s)$/;"	f
server_client_get_flags	server-client.c	/^server_client_get_flags(struct client *c)$/;"	f
server_client_get_key_table	server-client.c	/^server_client_get_key_table(struct client *c)$/;"	f
server_client_get_pane	server-client.c	/^server_client_get_pane(struct client *c)$/;"	f
server_client_handle_key	server-client.c	/^server_client_handle_key(struct client *c, struct key_event *event)$/;"	f
server_client_how_many	server-client.c	/^server_client_how_many(void)$/;"	f
server_client_is_default_key_table	server-client.c	/^server_client_is_default_key_table(struct client *c, struct key_table *table)$/;"	f	file:
server_client_key_callback	server-client.c	/^server_client_key_callback(struct cmdq_item *item, void *data)$/;"	f	file:
server_client_loop	server-client.c	/^server_client_loop(void)$/;"	f
server_client_lost	server-client.c	/^server_client_lost(struct client *c)$/;"	f
server_client_open	server-client.c	/^server_client_open(struct client *c, char **cause)$/;"	f
server_client_overlay_timer	server-client.c	/^server_client_overlay_timer(__unused int fd, __unused short events, void *data)$/;"	f	file:
server_client_redraw_timer	server-client.c	/^server_client_redraw_timer(__unused int fd, __unused short events,$/;"	f	file:
server_client_remove_pane	server-client.c	/^server_client_remove_pane(struct window_pane *wp)$/;"	f
server_client_repeat_timer	server-client.c	/^server_client_repeat_timer(__unused int fd, __unused short events, void *data)$/;"	f	file:
server_client_reset_state	server-client.c	/^server_client_reset_state(struct client *c)$/;"	f	file:
server_client_resize_timer	server-client.c	/^server_client_resize_timer(__unused int fd, __unused short events, void *data)$/;"	f	file:
server_client_set_flags	server-client.c	/^server_client_set_flags(struct client *c, const char *flags)$/;"	f
server_client_set_key_table	server-client.c	/^server_client_set_key_table(struct client *c, const char *name)$/;"	f
server_client_set_overlay	server-client.c	/^server_client_set_overlay(struct client *c, u_int delay,$/;"	f
server_client_set_pane	server-client.c	/^server_client_set_pane(struct client *c, struct window_pane *wp)$/;"	f
server_client_set_title	server-client.c	/^server_client_set_title(struct client *c)$/;"	f	file:
server_client_start_force_timer	server-client.c	/^server_client_start_force_timer(struct window_pane *wp)$/;"	f	file:
server_client_start_resize_timer	server-client.c	/^server_client_start_resize_timer(struct window_pane *wp)$/;"	f	file:
server_client_suspend	server-client.c	/^server_client_suspend(struct client *c)$/;"	f
server_client_unref	server-client.c	/^server_client_unref(struct client *c)$/;"	f
server_client_update_latest	server-client.c	/^server_client_update_latest(struct client *c)$/;"	f	file:
server_client_window_cmp	server-client.c	/^server_client_window_cmp(struct client_window *cw1,$/;"	f	file:
server_create_socket	server.c	/^server_create_socket(int flags, char **cause)$/;"	f	file:
server_destroy_pane	server-fn.c	/^server_destroy_pane(struct window_pane *wp, int notify)$/;"	f
server_destroy_session	server-fn.c	/^server_destroy_session(struct session *s)$/;"	f
server_destroy_session_group	server-fn.c	/^server_destroy_session_group(struct session *s)$/;"	f	file:
server_ev_accept	server.c	/^static struct event	 server_ev_accept;$/;"	v	typeref:struct:event	file:
server_exit	server.c	/^static int		 server_exit;$/;"	v	file:
server_fd	server.c	/^static int		 server_fd = -1;$/;"	v	file:
server_is_marked	server.c	/^server_is_marked(struct session *s, struct winlink *wl, struct window_pane *wp)$/;"	f
server_kill_pane	server-fn.c	/^server_kill_pane(struct window_pane *wp)$/;"	f
server_kill_window	server-fn.c	/^server_kill_window(struct window *w, int renumber)$/;"	f
server_link_window	server-fn.c	/^server_link_window(struct session *src, struct winlink *srcwl,$/;"	f
server_lock	server-fn.c	/^server_lock(void)$/;"	f
server_lock_client	server-fn.c	/^server_lock_client(struct client *c)$/;"	f
server_lock_session	server-fn.c	/^server_lock_session(struct session *s)$/;"	f
server_loop	server.c	/^server_loop(void)$/;"	f	file:
server_next_session	server-fn.c	/^server_next_session(struct session *s)$/;"	f	file:
server_proc	server.c	/^struct tmuxproc		*server_proc;$/;"	v	typeref:struct:tmuxproc
server_redraw_client	server-fn.c	/^server_redraw_client(struct client *c)$/;"	f
server_redraw_session	server-fn.c	/^server_redraw_session(struct session *s)$/;"	f
server_redraw_session_group	server-fn.c	/^server_redraw_session_group(struct session *s)$/;"	f
server_redraw_window	server-fn.c	/^server_redraw_window(struct window *w)$/;"	f
server_redraw_window_borders	server-fn.c	/^server_redraw_window_borders(struct window *w)$/;"	f
server_renumber_all	server-fn.c	/^server_renumber_all(void)$/;"	f
server_renumber_session	server-fn.c	/^server_renumber_session(struct session *s)$/;"	f
server_send_exit	server.c	/^server_send_exit(void)$/;"	f	file:
server_set_marked	server.c	/^server_set_marked(struct session *s, struct winlink *wl, struct window_pane *wp)$/;"	f
server_signal	server.c	/^server_signal(int sig)$/;"	f	file:
server_start	server.c	/^server_start(struct tmuxproc *client, int flags, struct event_base *base,$/;"	f
server_status_client	server-fn.c	/^server_status_client(struct client *c)$/;"	f
server_status_session	server-fn.c	/^server_status_session(struct session *s)$/;"	f
server_status_session_group	server-fn.c	/^server_status_session_group(struct session *s)$/;"	f
server_status_window	server-fn.c	/^server_status_window(struct window *w)$/;"	f
server_unlink_window	server-fn.c	/^server_unlink_window(struct session *s, struct winlink *wl)$/;"	f
server_unzoom_window	server-fn.c	/^server_unzoom_window(struct window *w)$/;"	f
server_update_socket	server.c	/^server_update_socket(void)$/;"	f
session	notify.c	/^	struct session		*session;$/;"	m	struct:notify_entry	typeref:struct:notify_entry::session	file:
session	tmux.h	/^	struct session	*session;$/;"	m	struct:client	typeref:struct:client::session
session	tmux.h	/^	struct session	*session;$/;"	m	struct:winlink	typeref:struct:winlink::session
session	tmux.h	/^struct session {$/;"	s
session	window-tree.c	/^	int			session;$/;"	m	struct:window_tree_itemdata	file:
session_add_ref	session.c	/^session_add_ref(struct session *s, const char *from)$/;"	f
session_alive	session.c	/^session_alive(struct session *s)$/;"	f
session_attach	session.c	/^session_attach(struct session *s, struct window *w, int idx, char **cause)$/;"	f
session_check_name	session.c	/^session_check_name(const char *name)$/;"	f
session_cmp	session.c	/^session_cmp(struct session *s1, struct session *s2)$/;"	f
session_create	session.c	/^session_create(const char *prefix, const char *name, const char *cwd,$/;"	f
session_destroy	session.c	/^session_destroy(struct session *s, int notify, const char *from)$/;"	f
session_detach	session.c	/^session_detach(struct session *s, struct winlink *wl)$/;"	f
session_find	session.c	/^session_find(const char *name)$/;"	f
session_find_by_id	session.c	/^session_find_by_id(u_int id)$/;"	f
session_find_by_id_str	session.c	/^session_find_by_id_str(const char *s)$/;"	f
session_free	session.c	/^session_free(__unused int fd, __unused short events, void *arg)$/;"	f	file:
session_group	tmux.h	/^struct session_group {$/;"	s
session_group_add	session.c	/^session_group_add(struct session_group *sg, struct session *s)$/;"	f
session_group_attached_count	session.c	/^session_group_attached_count(struct session_group *sg)$/;"	f
session_group_cmp	session.c	/^session_group_cmp(struct session_group *s1, struct session_group *s2)$/;"	f	file:
session_group_contains	session.c	/^session_group_contains(struct session *target)$/;"	f
session_group_count	session.c	/^session_group_count(struct session_group *sg)$/;"	f
session_group_find	session.c	/^session_group_find(const char *name)$/;"	f
session_group_new	session.c	/^session_group_new(const char *name)$/;"	f
session_group_remove	session.c	/^session_group_remove(struct session *s)$/;"	f	file:
session_group_synchronize1	session.c	/^session_group_synchronize1(struct session *target, struct session *s)$/;"	f	file:
session_group_synchronize_from	session.c	/^session_group_synchronize_from(struct session *target)$/;"	f
session_group_synchronize_to	session.c	/^session_group_synchronize_to(struct session *s)$/;"	f
session_groups	session.c	/^struct session_groups	session_groups = RB_INITIALIZER(&session_groups);$/;"	v	typeref:struct:session_groups
session_has	session.c	/^session_has(struct session *s, struct window *w)$/;"	f
session_is_linked	session.c	/^session_is_linked(struct session *s, struct window *w)$/;"	f
session_last	session.c	/^session_last(struct session *s)$/;"	f
session_lock_timer	session.c	/^session_lock_timer(__unused int fd, __unused short events, void *arg)$/;"	f	file:
session_next	session.c	/^session_next(struct session *s, int alert)$/;"	f
session_next_alert	session.c	/^session_next_alert(struct winlink *wl)$/;"	f	file:
session_next_session	session.c	/^session_next_session(struct session *s)$/;"	f
session_previous	session.c	/^session_previous(struct session *s, int alert)$/;"	f
session_previous_alert	session.c	/^session_previous_alert(struct winlink *wl)$/;"	f	file:
session_previous_session	session.c	/^session_previous_session(struct session *s)$/;"	f
session_remove_ref	session.c	/^session_remove_ref(struct session *s, const char *from)$/;"	f
session_renumber_windows	session.c	/^session_renumber_windows(struct session *s)$/;"	f
session_select	session.c	/^session_select(struct session *s, int idx)$/;"	f
session_set_current	session.c	/^session_set_current(struct session *s, struct winlink *wl)$/;"	f
session_update_activity	session.c	/^session_update_activity(struct session *s, struct timeval *from)$/;"	f
sessions	session.c	/^struct sessions		sessions;$/;"	v	typeref:struct:sessions
sessions	tmux.h	/^	TAILQ_HEAD(, session)	 sessions;$/;"	m	struct:session_group
set	input.c	/^	int			set;$/;"	m	struct:input_cell	file:
setBackgroundColor	tools/24-bit-color.sh	/^setBackgroundColor()$/;"	f
set_cfg_file	cfg.c	/^set_cfg_file(const char *path)$/;"	f
set_client_cb	tmux.h	/^	tty_ctx_set_client_cb	 set_client_cb;$/;"	m	struct:tty_ctx
setblocking	tmux.c	/^setblocking(int fd, int state)$/;"	f
setenv	compat/setenv.c	/^setenv(const char *name, const char *value, __unused int overwrite)$/;"	f
setproctitle	compat/setproctitle.c	/^setproctitle(__unused const char *fmt, ...)$/;"	f
setproctitle	compat/setproctitle.c	/^setproctitle(const char *fmt, ...)$/;"	f
sgr_b	tmux.h	/^	u_int		sgr_b;$/;"	m	struct:mouse_event
sgr_type	tmux.h	/^	u_int		sgr_type;$/;"	m	struct:mouse_event
shell	tmux.h	/^	char		*shell;$/;"	m	struct:window_pane
shell_command	tmux.c	/^const char	*shell_command;$/;"	v
showmark	window-copy.c	/^	int		 showmark;$/;"	m	struct:window_copy_mode_data	file:
sig2name	tmux.c	/^sig2name(int signo)$/;"	f
signalcb	proc.c	/^	void		(*signalcb)(int);$/;"	m	struct:tmuxproc	file:
since_ground	input.c	/^	struct evbuffer		*since_ground;$/;"	m	struct:input_ctx	typeref:struct:input_ctx::evbuffer	file:
size	compat/imsg.h	/^	size_t			 size;$/;"	m	struct:ibuf
size	control.c	/^	size_t				 size;$/;"	m	struct:control_block	file:
size	format.c	/^	u_int	  size;$/;"	m	struct:format_modifier	file:
size	paste.c	/^	size_t		 size;$/;"	m	struct:paste_buffer	file:
size	status.c	/^	u_int		  size;$/;"	m	struct:status_prompt_menu	file:
size	tmux.h	/^	u_char	size;$/;"	m	struct:utf8_data
size	utf8.c	/^	u_char			size;$/;"	m	struct:utf8_item	file:
size	window-buffer.c	/^	size_t		 size;$/;"	m	struct:window_buffer_itemdata	file:
skipped	tmux.h	/^	size_t		 skipped;$/;"	m	struct:window_pane
skipped	tmux.h	/^	u_int			 skipped;$/;"	m	struct:screen_write_ctx
socket_path	tmux.c	/^const char	*socket_path;$/;"	v
sort_crit	mode-tree.c	/^	struct mode_tree_sort_criteria sort_crit;$/;"	m	struct:mode_tree_data	typeref:struct:mode_tree_data::mode_tree_sort_criteria	file:
sort_list	mode-tree.c	/^	const char		**sort_list;$/;"	m	struct:mode_tree_data	file:
sort_size	mode-tree.c	/^	u_int			  sort_size;$/;"	m	struct:mode_tree_data	file:
source	cmd-queue.c	/^	struct cmd_find_state	 source;$/;"	m	struct:cmdq_item	typeref:struct:cmdq_item::cmd_find_state	file:
source	tmux.h	/^	struct cmd_entry_flag	 source;$/;"	m	struct:cmd_entry	typeref:struct:cmd_entry::cmd_entry_flag
spawn_context	tmux.h	/^struct spawn_context {$/;"	s
spawn_log	spawn.c	/^spawn_log(const char *from, struct spawn_context *sc)$/;"	f	file:
spawn_pane	spawn.c	/^spawn_pane(struct spawn_context *sc, char **cause)$/;"	f
spawn_window	spawn.c	/^spawn_window(struct spawn_context *sc, char **cause)$/;"	f
squash_groups	window-tree.c	/^	int				  squash_groups;$/;"	m	struct:window_tree_modedata	file:
ssize_t	win32_headers/win32_numbers.h	/^typedef int64_t ssize_t;$/;"	t
start	format-draw.c	/^	u_int				 start;$/;"	m	struct:format_range	file:
start	status.c	/^	u_int		  start;$/;"	m	struct:status_prompt_menu	file:
start	tmux.h	/^	u_int			 start;$/;"	m	struct:style_range
start	window-tree.c	/^	u_int				  start;$/;"	m	struct:window_tree_modedata	file:
start_cfg	cfg.c	/^start_cfg(void)$/;"	f
start_time	tmux.c	/^struct timeval	 start_time;$/;"	v	typeref:struct:timeval
start_timer	tmux.h	/^	struct event	 start_timer;$/;"	m	struct:tty	typeref:struct:tty::event
state	cmd-queue.c	/^	struct cmdq_state	*state;$/;"	m	struct:cmdq_item	typeref:struct:cmdq_item::cmdq_state	file:
state	input.c	/^	const struct input_state       *state;$/;"	m	struct:input_transition	typeref:struct:input_transition::input_state	file:
state	input.c	/^	const struct input_state *state;$/;"	m	struct:input_ctx	typeref:struct:input_ctx::input_state	file:
state	job.c	/^	} state;$/;"	m	struct:job	typeref:enum:job::__anon5	file:
statement	cmd-parse.y	/^statement	: \/* empty *\/$/;"	l
statements	cmd-parse.y	/^statements	: statement '\\n'$/;"	l
status	format.c	/^	int			 status;$/;"	m	struct:format_job	file:
status	job.c	/^	int			 status;$/;"	m	struct:job	file:
status	popup.c	/^	int			  status;$/;"	m	struct:popup_data	file:
status	tmux.h	/^	enum cmd_parse_status	 status;$/;"	m	struct:cmd_parse_result	typeref:enum:cmd_parse_result::cmd_parse_status
status	tmux.h	/^	int		 status;$/;"	m	struct:window_pane
status	tmux.h	/^	struct status_line status;$/;"	m	struct:client	typeref:struct:client::status_line
status_at_line	status.c	/^status_at_line(struct client *c)$/;"	f
status_free	status.c	/^status_free(struct client *c)$/;"	f
status_free_ranges	status.c	/^status_free_ranges(struct style_ranges *srs)$/;"	f	file:
status_get_range	status.c	/^status_get_range(struct client *c, u_int x, u_int y)$/;"	f
status_init	status.c	/^status_init(struct client *c)$/;"	f
status_line	tmux.h	/^struct status_line {$/;"	s
status_line_entry	tmux.h	/^struct status_line_entry {$/;"	s
status_line_size	status.c	/^status_line_size(struct client *c)$/;"	f
status_message_callback	status.c	/^status_message_callback(__unused int fd, __unused short event, void *data)$/;"	f	file:
status_message_clear	status.c	/^status_message_clear(struct client *c)$/;"	f
status_message_redraw	status.c	/^status_message_redraw(struct client *c)$/;"	f
status_message_set	status.c	/^status_message_set(struct client *c, int delay, int ignore_styles,$/;"	f
status_pop_screen	status.c	/^status_pop_screen(struct client *c)$/;"	f	file:
status_prompt_add_history	status.c	/^status_prompt_add_history(const char *line)$/;"	f	file:
status_prompt_clear	status.c	/^status_prompt_clear(struct client *c)$/;"	f
status_prompt_complete	status.c	/^status_prompt_complete(struct client *c, const char *word, u_int offset)$/;"	f	file:
status_prompt_complete_list	status.c	/^status_prompt_complete_list(u_int *size, const char *s, int at_start)$/;"	f	file:
status_prompt_complete_list_menu	status.c	/^status_prompt_complete_list_menu(struct client *c, char **list, u_int size,$/;"	f	file:
status_prompt_complete_prefix	status.c	/^status_prompt_complete_prefix(char **list, u_int size)$/;"	f	file:
status_prompt_complete_session	status.c	/^status_prompt_complete_session(char ***list, u_int *size, const char *s,$/;"	f	file:
status_prompt_complete_sort	status.c	/^status_prompt_complete_sort(const void *a, const void *b)$/;"	f	file:
status_prompt_complete_window_menu	status.c	/^status_prompt_complete_window_menu(struct client *c, struct session *s,$/;"	f	file:
status_prompt_down_history	status.c	/^status_prompt_down_history(u_int *idx)$/;"	f	file:
status_prompt_find_history_file	status.c	/^status_prompt_find_history_file(void)$/;"	f	file:
status_prompt_hlist	status.c	/^static char	**status_prompt_hlist;$/;"	v	file:
status_prompt_hsize	status.c	/^static u_int	  status_prompt_hsize;$/;"	v	file:
status_prompt_in_list	status.c	/^status_prompt_in_list(const char *ws, const struct utf8_data *ud)$/;"	f	file:
status_prompt_key	status.c	/^status_prompt_key(struct client *c, key_code key)$/;"	f
status_prompt_load_history	status.c	/^status_prompt_load_history(void)$/;"	f
status_prompt_menu	status.c	/^struct status_prompt_menu {$/;"	s	file:
status_prompt_menu_callback	status.c	/^status_prompt_menu_callback(__unused struct menu *menu, u_int idx, key_code key,$/;"	f	file:
status_prompt_paste	status.c	/^status_prompt_paste(struct client *c)$/;"	f	file:
status_prompt_redraw	status.c	/^status_prompt_redraw(struct client *c)$/;"	f
status_prompt_replace_complete	status.c	/^status_prompt_replace_complete(struct client *c, const char *s)$/;"	f	file:
status_prompt_save_history	status.c	/^status_prompt_save_history(void)$/;"	f
status_prompt_set	status.c	/^status_prompt_set(struct client *c, struct cmd_find_state *fs,$/;"	f
status_prompt_space	status.c	/^status_prompt_space(const struct utf8_data *ud)$/;"	f	file:
status_prompt_translate_key	status.c	/^status_prompt_translate_key(struct client *c, key_code key, key_code *new_key)$/;"	f	file:
status_prompt_up_history	status.c	/^status_prompt_up_history(u_int *idx)$/;"	f	file:
status_prompt_update	status.c	/^status_prompt_update(struct client *c, const char *msg, const char *input)$/;"	f
status_push_screen	status.c	/^status_push_screen(struct client *c)$/;"	f	file:
status_redraw	status.c	/^status_redraw(struct client *c)$/;"	f
status_screen	tmux.h	/^	struct screen	 status_screen;$/;"	m	struct:window_pane	typeref:struct:window_pane::screen
status_size	tmux.h	/^	size_t		 status_size;$/;"	m	struct:window_pane
status_timer_callback	status.c	/^status_timer_callback(__unused int fd, __unused short events, void *arg)$/;"	f	file:
status_timer_start	status.c	/^status_timer_start(struct client *c)$/;"	f
status_timer_start_all	status.c	/^status_timer_start_all(void)$/;"	f
status_update_cache	status.c	/^status_update_cache(struct session *s)$/;"	f
statusat	tmux.h	/^	int		 statusat;$/;"	m	struct:session
statusat	tmux.h	/^	int		statusat;$/;"	m	struct:mouse_event
statuslines	tmux.h	/^	u_int		 statuslines;$/;"	m	struct:screen_redraw_ctx
statuslines	tmux.h	/^	u_int		 statuslines;$/;"	m	struct:session
statuslines	tmux.h	/^	u_int		statuslines;$/;"	m	struct:mouse_event
statustop	tmux.h	/^	int		 statustop;$/;"	m	struct:screen_redraw_ctx
str	input.c	/^		char	       *str;$/;"	m	union:input_param::__anon3	file:
stravis	compat/vis.c	/^stravis(char **outp, const char *src, int flag)$/;"	f
strcasestr	compat/strcasestr.c	/^strcasestr(const char *s, const char *find)$/;"	f
stream	tmux.h	/^	int				 stream;$/;"	m	struct:client_file
stream	tmux.h	/^	int	stream;$/;"	m	struct:msg_read_data
stream	tmux.h	/^	int	stream;$/;"	m	struct:msg_read_done
stream	tmux.h	/^	int	stream;$/;"	m	struct:msg_read_open
stream	tmux.h	/^	int	stream;$/;"	m	struct:msg_write_close
stream	tmux.h	/^	int	stream;$/;"	m	struct:msg_write_data
stream	tmux.h	/^	int	stream;$/;"	m	struct:msg_write_open
stream	tmux.h	/^	int	stream;$/;"	m	struct:msg_write_ready
string	key-string.c	/^	const char     *string;$/;"	m	struct:__anon6	file:
string	tmux.h	/^	char				 *string;$/;"	m	union:options_value
string	tty-acs.c	/^	const char	*string;$/;"	m	struct:tty_acs_entry	file:
string	tty-acs.c	/^	const char	*string;$/;"	m	struct:tty_acs_reverse_entry	file:
string	tty-keys.c	/^	const char	       *string;$/;"	m	struct:tty_default_key_raw	file:
string	tty-term.c	/^		char	       *string;$/;"	m	union:tty_code::__anon16	file:
strlcat	compat/strlcat.c	/^strlcat(char *dst, const char *src, size_t siz)$/;"	f
strlcpy	compat/strlcpy.c	/^strlcpy(char *dst, const char *src, size_t siz)$/;"	f
strndup	compat/strndup.c	/^strndup(const char *str, size_t maxlen)$/;"	f
strnlen	compat/strnlen.c	/^strnlen(const char *str, size_t maxlen)$/;"	f
strnunvis	compat/unvis.c	/^strnunvis(char *dst, const char *src, size_t sz)$/;"	f
strnvis	compat/vis.c	/^strnvis(char *dst, const char *src, size_t siz, int flag)$/;"	f
strsep	compat/strsep.c	/^strsep(char **stringp, const char *delim)$/;"	f
strtonum	compat/strtonum.c	/^strtonum(const char *numstr, long long minval, long long maxval,$/;"	f
strunvis	compat/unvis.c	/^strunvis(char *dst, const char *src)$/;"	f
strvis	compat/vis.c	/^strvis(char *dst, const char *src, int flag)$/;"	f
strvisx	compat/vis.c	/^strvisx(char *dst, const char *src, size_t len, int flag)$/;"	f
style	options.c	/^	struct style				 style;$/;"	m	struct:options_entry	typeref:struct:options_entry::style	file:
style	tmux.h	/^	struct grid_cell	 style;$/;"	m	struct:status_line	typeref:struct:status_line::grid_cell
style	tmux.h	/^	struct style			  style;$/;"	m	union:options_value	typeref:struct:options_value::style
style	tmux.h	/^struct style {$/;"	s
style_add	style.c	/^style_add(struct grid_cell *gc, struct options *oo, const char *name,$/;"	f
style_align	tmux.h	/^enum style_align {$/;"	g
style_apply	style.c	/^style_apply(struct grid_cell *gc, struct options *oo, const char *name,$/;"	f
style_copy	style.c	/^style_copy(struct style *dst, struct style *src)$/;"	f
style_default	style.c	/^static struct style style_default = {$/;"	v	typeref:struct:style	file:
style_default_type	tmux.h	/^enum style_default_type {$/;"	g
style_list	tmux.h	/^enum style_list {$/;"	g
style_parse	style.c	/^style_parse(struct style *sy, const struct grid_cell *base, const char *in)$/;"	f
style_range	tmux.h	/^struct style_range {$/;"	s
style_range_type	tmux.h	/^enum style_range_type {$/;"	g
style_set	style.c	/^style_set(struct style *sy, const struct grid_cell *gc)$/;"	f
style_tostring	style.c	/^style_tostring(struct style *sy)$/;"	f
subs	control.c	/^	struct control_subs		 subs;$/;"	m	struct:control_state	typeref:struct:control_state::control_subs	file:
subs_timer	control.c	/^	struct event			 subs_timer;$/;"	m	struct:control_state	typeref:struct:control_state::event	file:
swp	tmux.h	/^	struct window_pane		*swp;$/;"	m	struct:window_mode_entry	typeref:struct:window_mode_entry::window_pane
sx	popup.c	/^	u_int			  sx;$/;"	m	struct:popup_data	file:
sx	screen.c	/^	u_int		 sx;$/;"	m	struct:screen_sel	file:
sx	tmux.h	/^	u_int			 sx;$/;"	m	struct:grid
sx	tmux.h	/^	u_int		 sx;$/;"	m	struct:layout_cell
sx	tmux.h	/^	u_int		 sx;$/;"	m	struct:screen_redraw_ctx
sx	tmux.h	/^	u_int		 sx;$/;"	m	struct:tty
sx	tmux.h	/^	u_int		 sx;$/;"	m	struct:tty_ctx
sx	tmux.h	/^	u_int		 sx;$/;"	m	struct:window
sx	tmux.h	/^	u_int		 sx;$/;"	m	struct:window_pane
sy	popup.c	/^	u_int			  sy;$/;"	m	struct:popup_data	file:
sy	screen.c	/^	u_int		 sy;$/;"	m	struct:screen_sel	file:
sy	tmux.h	/^	u_int			 sy;$/;"	m	struct:grid
sy	tmux.h	/^	u_int		 sy;$/;"	m	struct:layout_cell
sy	tmux.h	/^	u_int		 sy;$/;"	m	struct:screen_redraw_ctx
sy	tmux.h	/^	u_int		 sy;$/;"	m	struct:tty
sy	tmux.h	/^	u_int		 sy;$/;"	m	struct:tty_ctx
sy	tmux.h	/^	u_int		 sy;$/;"	m	struct:window
sy	tmux.h	/^	u_int		 sy;$/;"	m	struct:window_pane
t	control.c	/^	uint64_t			 t;$/;"	m	struct:control_block	file:
table	window-customize.c	/^	char					*table;$/;"	m	struct:window_customize_itemdata	file:
tableentry	options.c	/^	const struct options_table_entry	*tableentry;$/;"	m	struct:options_entry	typeref:struct:options_entry::options_table_entry	file:
tabs	tmux.h	/^	bitstr_t		*tabs;$/;"	m	struct:screen
tag	format.c	/^	u_int			 tag;$/;"	m	struct:format_job	file:
tag	format.c	/^	u_int			 tag;$/;"	m	struct:format_tree	file:
tag	mode-tree.c	/^	uint64_t			 tag;$/;"	m	struct:mode_tree_item	file:
tagged	mode-tree.c	/^	int				 tagged;$/;"	m	struct:mode_tree_item	file:
target	cmd-queue.c	/^	struct cmd_find_state	 target;$/;"	m	struct:cmdq_item	typeref:struct:cmdq_item::cmd_find_state	file:
target	tmux.h	/^	struct cmd_entry_flag	 target;$/;"	m	struct:cmd_entry	typeref:struct:cmd_entry::cmd_entry_flag
target_client	cmd-queue.c	/^	struct client		*target_client;$/;"	m	struct:cmdq_item	typeref:struct:cmdq_item::client	file:
tc	tmux.h	/^	struct client		 *tc;$/;"	m	struct:spawn_context	typeref:struct:spawn_context::client
template_	cmd-command-prompt.c	/^	char	*template_;$/;"	m	struct:cmd_command_prompt_cdata	file:
template_	tmux.h	/^		const char	*template_;$/;"	m	struct:cmd_entry::__anon13
template_	tty-keys.c	/^	const char	*template_;$/;"	m	struct:tty_default_key_xterm	file:
term	tmux.h	/^	struct tty_term	*term;$/;"	m	struct:tty	typeref:struct:tty::tty_term
term_features	tmux.h	/^	int		 term_features;$/;"	m	struct:client
term_name	tmux.h	/^	char		*term_name;$/;"	m	struct:client
term_type	tmux.h	/^	char		*term_type;$/;"	m	struct:client
test_conditional_with_pane_in_mode	regress/format-strings.sh	/^test_conditional_with_pane_in_mode()$/;"	f
test_conditional_with_session_name	regress/format-strings.sh	/^test_conditional_with_session_name()$/;"	f
test_format	regress/format-strings.sh	/^test_format()$/;"	f
text	mode-tree.c	/^	const char			*text;$/;"	m	struct:mode_tree_item	file:
text	screen.c	/^	char				*text;$/;"	m	struct:screen_title_entry	file:
text	tmux.h	/^	const char		 *text;$/;"	m	struct:options_table_entry
tim	window-clock.c	/^	time_t			tim;$/;"	m	struct:window_clock_mode_data	file:
time	cmd-queue.c	/^	time_t			 time;$/;"	m	struct:cmdq_item	file:
time	format.c	/^	time_t			 time;$/;"	m	struct:format_entry	file:
time	format.c	/^	time_t			 time;$/;"	m	struct:format_expand_state	file:
timeout	window-copy.c	/^	int		 timeout;	\/* search has timed out *\/$/;"	m	struct:window_copy_mode_data	file:
timer	cmd-run-shell.c	/^	struct event		 timer;$/;"	m	struct:cmd_run_shell_data	typeref:struct:cmd_run_shell_data::event	file:
timer	input.c	/^	struct event		timer;$/;"	m	struct:input_ctx	typeref:struct:input_ctx::event	file:
timer	tmux.h	/^	struct event		 timer;$/;"	m	struct:status_line	typeref:struct:status_line::event
timer	tmux.h	/^	struct event	 timer;$/;"	m	struct:tty	typeref:struct:tty::event
timer	window-clock.c	/^	struct event		timer;$/;"	m	struct:window_clock_mode_data	typeref:struct:window_clock_mode_data::event	file:
timeradd	compat.h	241;"	d
timercmp	compat.h	234;"	d
timersub	compat.h	253;"	d
tio	tmux.h	/^	struct termios	 tio;$/;"	m	struct:tty	typeref:struct:tty::termios
tio	tmux.h	/^	struct termios	*tio;$/;"	m	struct:session	typeref:struct:session::termios
title	tmux.h	/^	char			*title;$/;"	m	struct:screen
title	tmux.h	/^	char		*title;$/;"	m	struct:client
title	tmux.h	/^	const char		*title;$/;"	m	struct:menu
titles	tmux.h	/^	struct screen_titles	*titles;$/;"	m	struct:screen	typeref:struct:screen::screen_titles
tmuxpeer	proc.c	/^struct tmuxpeer {$/;"	s	file:
tmuxproc	proc.c	/^struct tmuxproc {$/;"	s	file:
to	tmux.h	/^	const char		*to;$/;"	m	struct:options_name_map
transitions	input.c	/^	const struct input_transition	*transitions;$/;"	m	struct:input_state	typeref:struct:input_state::input_transition	file:
tree	tmux.h	/^	struct args_tree	  tree;$/;"	m	struct:args	typeref:struct:args::args_tree
tree_entry	tmux.h	/^	RB_ENTRY(window_pane) tree_entry;$/;"	m	struct:window_pane
tty	tmux.h	/^	char		 tty[TTY_NAME_MAX];$/;"	m	struct:window_pane
tty	tmux.h	/^	struct tty	 tty;$/;"	m	struct:client	typeref:struct:client::tty
tty	tmux.h	/^	struct tty	*tty;$/;"	m	struct:tty_term	typeref:struct:tty_term::tty
tty	tmux.h	/^struct tty {$/;"	s
tty_acs_cmp	tty-acs.c	/^tty_acs_cmp(const void *key, const void *value)$/;"	f	file:
tty_acs_entry	tty-acs.c	/^struct tty_acs_entry {$/;"	s	file:
tty_acs_get	tty-acs.c	/^tty_acs_get(struct tty *tty, u_char ch)$/;"	f
tty_acs_needed	tty-acs.c	/^tty_acs_needed(struct tty *tty)$/;"	f
tty_acs_reverse2	tty-acs.c	/^static const struct tty_acs_reverse_entry tty_acs_reverse2[] = {$/;"	v	typeref:struct:tty_acs_reverse_entry	file:
tty_acs_reverse3	tty-acs.c	/^static const struct tty_acs_reverse_entry tty_acs_reverse3[] = {$/;"	v	typeref:struct:tty_acs_reverse_entry	file:
tty_acs_reverse_cmp	tty-acs.c	/^tty_acs_reverse_cmp(const void *key, const void *value)$/;"	f	file:
tty_acs_reverse_entry	tty-acs.c	/^struct tty_acs_reverse_entry {$/;"	s	file:
tty_acs_reverse_get	tty-acs.c	/^tty_acs_reverse_get(__unused struct tty *tty, const char *s, size_t slen)$/;"	f
tty_acs_table	tty-acs.c	/^static const struct tty_acs_entry tty_acs_table[] = {$/;"	v	typeref:struct:tty_acs_entry	file:
tty_add	tty.c	/^tty_add(struct tty *tty, const char *buf, size_t len)$/;"	f	file:
tty_add_features	tty-features.c	/^tty_add_features(int *feat, const char *s, const char *separators)$/;"	f
tty_apply_features	tty-features.c	/^tty_apply_features(struct tty_term *term, int feat)$/;"	f
tty_attributes	tty.c	/^tty_attributes(struct tty *tty, const struct grid_cell *gc,$/;"	f
tty_block_maybe	tty.c	/^tty_block_maybe(struct tty *tty)$/;"	f	file:
tty_cell	tty.c	/^tty_cell(struct tty *tty, const struct grid_cell *gc,$/;"	f
tty_check_bg	tty.c	/^tty_check_bg(struct tty *tty, int *palette, struct grid_cell *gc)$/;"	f	file:
tty_check_codeset	tty.c	/^tty_check_codeset(struct tty *tty, const struct grid_cell *gc)$/;"	f	file:
tty_check_fg	tty.c	/^tty_check_fg(struct tty *tty, int *palette, struct grid_cell *gc)$/;"	f	file:
tty_check_overlay	tty.c	/^tty_check_overlay(struct tty *tty, u_int px, u_int py)$/;"	f	file:
tty_check_us	tty.c	/^tty_check_us(__unused struct tty *tty, int *palette, struct grid_cell *gc)$/;"	f	file:
tty_clamp_area	tty.c	/^tty_clamp_area(struct tty *tty, const struct tty_ctx *ctx, u_int px, u_int py,$/;"	f	file:
tty_clamp_line	tty.c	/^tty_clamp_line(struct tty *tty, const struct tty_ctx *ctx, u_int px, u_int py,$/;"	f	file:
tty_clear_area	tty.c	/^tty_clear_area(struct tty *tty, const struct grid_cell *defaults, u_int py,$/;"	f	file:
tty_clear_line	tty.c	/^tty_clear_line(struct tty *tty, const struct grid_cell *defaults, u_int py,$/;"	f	file:
tty_clear_pane_area	tty.c	/^tty_clear_pane_area(struct tty *tty, const struct tty_ctx *ctx, u_int py,$/;"	f	file:
tty_clear_pane_line	tty.c	/^tty_clear_pane_line(struct tty *tty, const struct tty_ctx *ctx, u_int py,$/;"	f	file:
tty_client_ready	tty.c	/^tty_client_ready(struct client *c)$/;"	f	file:
tty_close	tty.c	/^tty_close(struct tty *tty)$/;"	f
tty_cmd_alignmenttest	tty.c	/^tty_cmd_alignmenttest(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_cell	tty.c	/^tty_cmd_cell(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_cells	tty.c	/^tty_cmd_cells(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_clearcharacter	tty.c	/^tty_cmd_clearcharacter(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_clearendofline	tty.c	/^tty_cmd_clearendofline(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_clearendofscreen	tty.c	/^tty_cmd_clearendofscreen(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_clearline	tty.c	/^tty_cmd_clearline(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_clearscreen	tty.c	/^tty_cmd_clearscreen(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_clearstartofline	tty.c	/^tty_cmd_clearstartofline(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_clearstartofscreen	tty.c	/^tty_cmd_clearstartofscreen(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_deletecharacter	tty.c	/^tty_cmd_deletecharacter(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_deleteline	tty.c	/^tty_cmd_deleteline(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_insertcharacter	tty.c	/^tty_cmd_insertcharacter(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_insertline	tty.c	/^tty_cmd_insertline(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_linefeed	tty.c	/^tty_cmd_linefeed(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_rawstring	tty.c	/^tty_cmd_rawstring(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_reverseindex	tty.c	/^tty_cmd_reverseindex(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_scrolldown	tty.c	/^tty_cmd_scrolldown(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_scrollup	tty.c	/^tty_cmd_scrollup(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_setselection	tty.c	/^tty_cmd_setselection(struct tty *tty, const struct tty_ctx *ctx)$/;"	f
tty_cmd_syncstart	tty.c	/^tty_cmd_syncstart(struct tty *tty, __unused const struct tty_ctx *ctx)$/;"	f
tty_code	tty-term.c	/^struct tty_code {$/;"	s	file:
tty_code_code	tmux.h	/^enum tty_code_code {$/;"	g
tty_code_type	tty-term.c	/^enum tty_code_type {$/;"	g	file:
tty_colours	tty.c	/^tty_colours(struct tty *tty, const struct grid_cell *gc)$/;"	f	file:
tty_colours_bg	tty.c	/^tty_colours_bg(struct tty *tty, const struct grid_cell *gc)$/;"	f	file:
tty_colours_fg	tty.c	/^tty_colours_fg(struct tty *tty, const struct grid_cell *gc)$/;"	f	file:
tty_colours_us	tty.c	/^tty_colours_us(struct tty *tty, const struct grid_cell *gc)$/;"	f	file:
tty_create_log	tty.c	/^tty_create_log(void)$/;"	f
tty_ctx	tmux.h	/^struct tty_ctx {$/;"	s
tty_ctx_redraw_cb	tmux.h	/^typedef void (*tty_ctx_redraw_cb)(const struct tty_ctx *);$/;"	t
tty_ctx_set_client_cb	tmux.h	/^typedef int (*tty_ctx_set_client_cb)(struct tty_ctx *, struct client *);$/;"	t
tty_cursor	tty.c	/^tty_cursor(struct tty *tty, u_int cx, u_int cy)$/;"	f
tty_cursor_pane	tty.c	/^tty_cursor_pane(struct tty *tty, const struct tty_ctx *ctx, u_int cx, u_int cy)$/;"	f	file:
tty_cursor_pane_unless_wrap	tty.c	/^tty_cursor_pane_unless_wrap(struct tty *tty, const struct tty_ctx *ctx,$/;"	f	file:
tty_default_attributes	tty.c	/^tty_default_attributes(struct tty *tty, const struct grid_cell *defaults,$/;"	f	file:
tty_default_code_keys	tty-keys.c	/^static const struct tty_default_key_code tty_default_code_keys[] = {$/;"	v	typeref:struct:tty_default_key_code	file:
tty_default_colours	tty.c	/^tty_default_colours(struct grid_cell *gc, struct window_pane *wp)$/;"	f
tty_default_features	tty-features.c	/^tty_default_features(int *feat, const char *name, u_int version)$/;"	f
tty_default_key_code	tty-keys.c	/^struct tty_default_key_code {$/;"	s	file:
tty_default_key_raw	tty-keys.c	/^struct tty_default_key_raw {$/;"	s	file:
tty_default_key_xterm	tty-keys.c	/^struct tty_default_key_xterm {$/;"	s	file:
tty_default_raw_keys	tty-keys.c	/^static const struct tty_default_key_raw tty_default_raw_keys[] = {$/;"	v	typeref:struct:tty_default_key_raw	file:
tty_default_xterm_keys	tty-keys.c	/^static const struct tty_default_key_xterm tty_default_xterm_keys[] = {$/;"	v	typeref:struct:tty_default_key_xterm	file:
tty_default_xterm_modifiers	tty-keys.c	/^static const key_code tty_default_xterm_modifiers[] = {$/;"	v	file:
tty_draw_line	tty.c	/^tty_draw_line(struct tty *tty, struct screen *s, u_int px, u_int py, u_int nx,$/;"	f
tty_draw_pane	tty.c	/^tty_draw_pane(struct tty *tty, const struct tty_ctx *ctx, u_int py)$/;"	f	file:
tty_emulate_repeat	tty.c	/^tty_emulate_repeat(struct tty *tty, enum tty_code_code code,$/;"	f	file:
tty_fake_bce	tty.c	/^tty_fake_bce(const struct tty *tty, const struct grid_cell *gc, u_int bg)$/;"	f	file:
tty_feature	tty-features.c	/^struct tty_feature {$/;"	s	file:
tty_feature_256	tty-features.c	/^static const struct tty_feature tty_feature_256 = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_256_capabilities	tty-features.c	/^static const char *tty_feature_256_capabilities[] = {$/;"	v	file:
tty_feature_bpaste	tty-features.c	/^static const struct tty_feature tty_feature_bpaste = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_bpaste_capabilities	tty-features.c	/^static const char *tty_feature_bpaste_capabilities[] = {$/;"	v	file:
tty_feature_ccolour	tty-features.c	/^static const struct tty_feature tty_feature_ccolour = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_ccolour_capabilities	tty-features.c	/^static const char *tty_feature_ccolour_capabilities[] = {$/;"	v	file:
tty_feature_clipboard	tty-features.c	/^static const struct tty_feature tty_feature_clipboard = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_clipboard_capabilities	tty-features.c	/^static const char *tty_feature_clipboard_capabilities[] = {$/;"	v	file:
tty_feature_cstyle	tty-features.c	/^static const struct tty_feature tty_feature_cstyle = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_cstyle_capabilities	tty-features.c	/^static const char *tty_feature_cstyle_capabilities[] = {$/;"	v	file:
tty_feature_extkeys	tty-features.c	/^static const struct tty_feature tty_feature_extkeys = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_extkeys_capabilities	tty-features.c	/^static const char *tty_feature_extkeys_capabilities[] = {$/;"	v	file:
tty_feature_focus	tty-features.c	/^static const struct tty_feature tty_feature_focus = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_focus_capabilities	tty-features.c	/^static const char *tty_feature_focus_capabilities[] = {$/;"	v	file:
tty_feature_margins	tty-features.c	/^static const struct tty_feature tty_feature_margins = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_margins_capabilities	tty-features.c	/^static const char *tty_feature_margins_capabilities[] = {$/;"	v	file:
tty_feature_overline	tty-features.c	/^static const struct tty_feature tty_feature_overline = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_overline_capabilities	tty-features.c	/^static const char *tty_feature_overline_capabilities[] = {$/;"	v	file:
tty_feature_rectfill	tty-features.c	/^static const struct tty_feature tty_feature_rectfill = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_rgb	tty-features.c	/^static const struct tty_feature tty_feature_rgb = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_rgb_capabilities	tty-features.c	/^static const char *tty_feature_rgb_capabilities[] = {$/;"	v	file:
tty_feature_strikethrough	tty-features.c	/^static const struct tty_feature tty_feature_strikethrough = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_strikethrough_capabilities	tty-features.c	/^static const char *tty_feature_strikethrough_capabilities[] = {$/;"	v	file:
tty_feature_sync	tty-features.c	/^static const struct tty_feature tty_feature_sync = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_sync_capabilities	tty-features.c	/^static const char *tty_feature_sync_capabilities[] = {$/;"	v	file:
tty_feature_title	tty-features.c	/^static const struct tty_feature tty_feature_title = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_title_capabilities	tty-features.c	/^static const char *tty_feature_title_capabilities[] = {$/;"	v	file:
tty_feature_usstyle	tty-features.c	/^static const struct tty_feature tty_feature_usstyle = {$/;"	v	typeref:struct:tty_feature	file:
tty_feature_usstyle_capabilities	tty-features.c	/^static const char *tty_feature_usstyle_capabilities[] = {$/;"	v	file:
tty_features	tty-features.c	/^static const struct tty_feature *tty_features[] = {$/;"	v	typeref:struct:tty_feature	file:
tty_force_cursor_colour	tty.c	/^tty_force_cursor_colour(struct tty *tty, const char *ccolour)$/;"	f	file:
tty_free	tty.c	/^tty_free(struct tty *tty)$/;"	f
tty_full_width	tty.c	73;"	d	file:
tty_get_features	tty-features.c	/^tty_get_features(int feat)$/;"	f
tty_get_palette	tty.c	/^tty_get_palette(int *palette, int c)$/;"	f	file:
tty_init	tty.c	/^tty_init(struct tty *tty, struct client *c)$/;"	f
tty_invalidate	tty.c	/^tty_invalidate(struct tty *tty)$/;"	f	file:
tty_is_visible	tty.c	/^tty_is_visible(__unused struct tty *tty, const struct tty_ctx *ctx, u_int px,$/;"	f	file:
tty_key	tmux.h	/^struct tty_key {$/;"	s
tty_keys_add	tty-keys.c	/^tty_keys_add(struct tty *tty, const char *s, key_code key)$/;"	f	file:
tty_keys_add1	tty-keys.c	/^tty_keys_add1(struct tty_key **tkp, const char *s, key_code key)$/;"	f	file:
tty_keys_build	tty-keys.c	/^tty_keys_build(struct tty *tty)$/;"	f
tty_keys_callback	tty-keys.c	/^tty_keys_callback(__unused int fd, __unused short events, void *data)$/;"	f	file:
tty_keys_clipboard	tty-keys.c	/^tty_keys_clipboard(__unused struct tty *tty, const char *buf, size_t len,$/;"	f	file:
tty_keys_device_attributes	tty-keys.c	/^tty_keys_device_attributes(struct tty *tty, const char *buf, size_t len,$/;"	f	file:
tty_keys_extended_device_attributes	tty-keys.c	/^tty_keys_extended_device_attributes(struct tty *tty, const char *buf,$/;"	f	file:
tty_keys_extended_key	tty-keys.c	/^tty_keys_extended_key(struct tty *tty, const char *buf, size_t len,$/;"	f	file:
tty_keys_find	tty-keys.c	/^tty_keys_find(struct tty *tty, const char *buf, size_t len, size_t *size)$/;"	f	file:
tty_keys_find1	tty-keys.c	/^tty_keys_find1(struct tty_key *tk, const char *buf, size_t len, size_t *size)$/;"	f	file:
tty_keys_free	tty-keys.c	/^tty_keys_free(struct tty *tty)$/;"	f
tty_keys_free1	tty-keys.c	/^tty_keys_free1(struct tty_key *tk)$/;"	f	file:
tty_keys_mouse	tty-keys.c	/^tty_keys_mouse(struct tty *tty, const char *buf, size_t len, size_t *size,$/;"	f	file:
tty_keys_next	tty-keys.c	/^tty_keys_next(struct tty *tty)$/;"	f
tty_keys_next1	tty-keys.c	/^tty_keys_next1(struct tty *tty, const char *buf, size_t len, key_code *key,$/;"	f	file:
tty_large_region	tty.c	/^tty_large_region(__unused struct tty *tty, const struct tty_ctx *ctx)$/;"	f	file:
tty_log_fd	tty.c	/^static int	tty_log_fd = -1;$/;"	v	file:
tty_margin	tty.c	/^tty_margin(struct tty *tty, u_int rleft, u_int rright)$/;"	f	file:
tty_margin_off	tty.c	/^tty_margin_off(struct tty *tty)$/;"	f
tty_margin_pane	tty.c	/^tty_margin_pane(struct tty *tty, const struct tty_ctx *ctx)$/;"	f	file:
tty_open	tty.c	/^tty_open(struct tty *tty, char **cause)$/;"	f
tty_putc	tty.c	/^tty_putc(struct tty *tty, u_char ch)$/;"	f
tty_putcode	tty.c	/^tty_putcode(struct tty *tty, enum tty_code_code code)$/;"	f
tty_putcode1	tty.c	/^tty_putcode1(struct tty *tty, enum tty_code_code code, int a)$/;"	f
tty_putcode2	tty.c	/^tty_putcode2(struct tty *tty, enum tty_code_code code, int a, int b)$/;"	f
tty_putcode3	tty.c	/^tty_putcode3(struct tty *tty, enum tty_code_code code, int a, int b, int c)$/;"	f
tty_putcode_ptr1	tty.c	/^tty_putcode_ptr1(struct tty *tty, enum tty_code_code code, const void *a)$/;"	f
tty_putcode_ptr2	tty.c	/^tty_putcode_ptr2(struct tty *tty, enum tty_code_code code, const void *a,$/;"	f
tty_putn	tty.c	/^tty_putn(struct tty *tty, const void *buf, size_t len, u_int width)$/;"	f
tty_puts	tty.c	/^tty_puts(struct tty *tty, const char *s)$/;"	f
tty_raw	tty.c	/^tty_raw(struct tty *tty, const char *s)$/;"	f
tty_read_callback	tty.c	/^tty_read_callback(__unused int fd, __unused short events, void *data)$/;"	f	file:
tty_redraw_region	tty.c	/^tty_redraw_region(struct tty *tty, const struct tty_ctx *ctx)$/;"	f	file:
tty_region	tty.c	/^tty_region(struct tty *tty, u_int rupper, u_int rlower)$/;"	f	file:
tty_region_off	tty.c	/^tty_region_off(struct tty *tty)$/;"	f
tty_region_pane	tty.c	/^tty_region_pane(struct tty *tty, const struct tty_ctx *ctx, u_int rupper,$/;"	f	file:
tty_repeat_space	tty.c	/^tty_repeat_space(struct tty *tty, u_int n)$/;"	f	file:
tty_reset	tty.c	/^tty_reset(struct tty *tty)$/;"	f
tty_resize	tty.c	/^tty_resize(struct tty *tty)$/;"	f
tty_send_requests	tty.c	/^tty_send_requests(struct tty *tty)$/;"	f
tty_set_italics	tty.c	/^tty_set_italics(struct tty *tty)$/;"	f	file:
tty_set_selection	tty.c	/^tty_set_selection(struct tty *tty, const char *buf, size_t len)$/;"	f
tty_set_size	tty.c	/^tty_set_size(struct tty *tty, u_int sx, u_int sy, u_int xpixel, u_int ypixel)$/;"	f
tty_set_title	tty.c	/^tty_set_title(struct tty *tty, const char *title)$/;"	f
tty_start_timer_callback	tty.c	/^tty_start_timer_callback(__unused int fd, __unused short events, void *data)$/;"	f	file:
tty_start_tty	tty.c	/^tty_start_tty(struct tty *tty)$/;"	f
tty_stop_tty	tty.c	/^tty_stop_tty(struct tty *tty)$/;"	f
tty_sync_end	tty.c	/^tty_sync_end(struct tty *tty)$/;"	f
tty_sync_start	tty.c	/^tty_sync_start(struct tty *tty)$/;"	f
tty_term	tmux.h	/^struct tty_term {$/;"	s
tty_term_apply	tty-term.c	/^tty_term_apply(struct tty_term *term, const char *capabilities, int quiet)$/;"	f
tty_term_apply_overrides	tty-term.c	/^tty_term_apply_overrides(struct tty_term *term)$/;"	f
tty_term_code_entry	tty-term.c	/^struct tty_term_code_entry {$/;"	s	file:
tty_term_codes	tty-term.c	/^static const struct tty_term_code_entry tty_term_codes[] = {$/;"	v	typeref:struct:tty_term_code_entry	file:
tty_term_create	tty-term.c	/^tty_term_create(struct tty *tty, char *name, int *feat, int fd, char **cause)$/;"	f
tty_term_describe	tty-term.c	/^tty_term_describe(struct tty_term *term, enum tty_code_code code)$/;"	f
tty_term_flag	tty-term.c	/^tty_term_flag(struct tty_term *term, enum tty_code_code code)$/;"	f
tty_term_free	tty-term.c	/^tty_term_free(struct tty_term *term)$/;"	f
tty_term_has	tty-term.c	/^tty_term_has(struct tty_term *term, enum tty_code_code code)$/;"	f
tty_term_ncodes	tty-term.c	/^tty_term_ncodes(void)$/;"	f
tty_term_number	tty-term.c	/^tty_term_number(struct tty_term *term, enum tty_code_code code)$/;"	f
tty_term_override_next	tty-term.c	/^tty_term_override_next(const char *s, size_t *offset)$/;"	f	file:
tty_term_ptr1	tty-term.c	/^tty_term_ptr1(struct tty_term *term, enum tty_code_code code, const void *a)$/;"	f
tty_term_ptr2	tty-term.c	/^tty_term_ptr2(struct tty_term *term, enum tty_code_code code, const void *a,$/;"	f
tty_term_string	tty-term.c	/^tty_term_string(struct tty_term *term, enum tty_code_code code)$/;"	f
tty_term_string1	tty-term.c	/^tty_term_string1(struct tty_term *term, enum tty_code_code code, int a)$/;"	f
tty_term_string2	tty-term.c	/^tty_term_string2(struct tty_term *term, enum tty_code_code code, int a, int b)$/;"	f
tty_term_string3	tty-term.c	/^tty_term_string3(struct tty_term *term, enum tty_code_code code, int a, int b,$/;"	f
tty_term_strip	tty-term.c	/^tty_term_strip(const char *s)$/;"	f	file:
tty_terms	tty-term.c	/^struct tty_terms tty_terms = LIST_HEAD_INITIALIZER(tty_terms);$/;"	v	typeref:struct:tty_terms
tty_timer_callback	tty.c	/^tty_timer_callback(__unused int fd, __unused short events, void *data)$/;"	f	file:
tty_try_colour	tty.c	/^tty_try_colour(struct tty *tty, int colour, const char *type)$/;"	f	file:
tty_update_client_offset	tty.c	/^tty_update_client_offset(struct client *c)$/;"	f
tty_update_features	tty.c	/^tty_update_features(struct tty *tty)$/;"	f
tty_update_mode	tty.c	/^tty_update_mode(struct tty *tty, int mode, struct screen *s)$/;"	f
tty_update_window_offset	tty.c	/^tty_update_window_offset(struct window *w)$/;"	f
tty_use_margin	tty.c	71;"	d	file:
tty_window_bigger	tty.c	/^tty_window_bigger(struct tty *tty)$/;"	f
tty_window_default_style	tty.c	/^tty_window_default_style(struct grid_cell *gc, struct window_pane *wp)$/;"	f	file:
tty_window_offset	tty.c	/^tty_window_offset(struct tty *tty, u_int *ox, u_int *oy, u_int *sx, u_int *sy)$/;"	f
tty_window_offset1	tty.c	/^tty_window_offset1(struct tty *tty, u_int *ox, u_int *oy, u_int *sx, u_int *sy)$/;"	f	file:
tty_write	tty.c	/^tty_write(void (*cmdfn)(struct tty *, const struct tty_ctx *),$/;"	f
tty_write_callback	tty.c	/^tty_write_callback(__unused int fd, __unused short events, void *data)$/;"	f	file:
ttyname	tmux.h	/^	char		*ttyname;$/;"	m	struct:client
type	cmd-queue.c	/^	enum cmdq_type		 type;$/;"	m	struct:cmdq_item	typeref:enum:cmdq_item::cmdq_type	file:
type	compat/imsg.h	/^	uint32_t	 type;$/;"	m	struct:imsg_hdr
type	control.c	/^	enum control_sub_type		 type;$/;"	m	struct:control_sub	typeref:enum:control_sub::control_sub_type	file:
type	format-draw.c	/^	enum style_range_type		 type;$/;"	m	struct:format_range	typeref:enum:format_range::style_range_type	file:
type	input.c	/^	int		type;$/;"	m	struct:input_table_entry	file:
type	input.c	/^	}			type;$/;"	m	struct:input_param	typeref:enum:input_param::__anon2	file:
type	screen-write.c	/^	enum { TEXT, CLEAR_END, CLEAR_START } type;$/;"	m	struct:screen_write_collect_item	typeref:enum:screen_write_collect_item::__anon9	file:
type	tmux.h	/^	enum cmd_find_type	 type;$/;"	m	struct:cmd_entry_flag	typeref:enum:cmd_entry_flag::cmd_find_type
type	tmux.h	/^	enum layout_type type;$/;"	m	struct:layout_cell	typeref:enum:layout_cell::layout_type
type	tmux.h	/^	enum options_table_type	  type;$/;"	m	struct:options_table_entry	typeref:enum:options_table_entry::options_table_type
type	tmux.h	/^	enum style_range_type	 type;$/;"	m	struct:style_range	typeref:enum:style_range::style_range_type
type	tty-term.c	/^	enum tty_code_type	type;$/;"	m	struct:tty_code	typeref:enum:tty_code::tty_code_type	file:
type	tty-term.c	/^	enum tty_code_type	type;$/;"	m	struct:tty_term_code_entry	typeref:enum:tty_term_code_entry::tty_code_type	file:
type	window-tree.c	/^	enum window_tree_type		  type;$/;"	m	struct:window_tree_modedata	typeref:enum:window_tree_modedata::window_tree_type	file:
type	window-tree.c	/^	enum window_tree_type	type;$/;"	m	struct:window_tree_itemdata	typeref:enum:window_tree_itemdata::window_tree_type	file:
unicode	cmd-parse.y	/^unicode:$/;"	l
unit	tmux.h	/^	const char		 *unit;$/;"	m	struct:options_table_entry
unsetenv	compat/setenv.c	/^unsetenv(const char *name)$/;"	f
unvis	compat/unvis.c	/^unvis(char *cp, char c, int *astate, int flag)$/;"	f
update	tmux.h	/^	void		 (*update)(struct window_mode_entry *);$/;"	m	struct:window_mode
updatecb	job.c	/^	job_update_cb		 updatecb;$/;"	m	struct:job	file:
updated	format.c	/^	int			 updated;$/;"	m	struct:format_job	file:
upper	tmux.h	/^		int		 upper;$/;"	m	struct:cmd_entry::__anon13
us	tmux.h	/^	int			us;$/;"	m	struct:grid_cell
us	tmux.h	/^	int			us;$/;"	m	struct:grid_extd_entry
usage	tmux.c	/^usage(void)$/;"	f	file:
usage	tmux.h	/^	const char		*usage;$/;"	m	struct:cmd_entry
used	screen-write.c	/^	u_int			 used;$/;"	m	struct:screen_write_collect_item	file:
used	tmux.h	/^	size_t	used;$/;"	m	struct:window_pane_offset
utf8_append	utf8.c	/^utf8_append(struct utf8_data *ud, u_char ch)$/;"	f
utf8_build_one	utf8.c	/^utf8_build_one(u_char ch)$/;"	f
utf8_char	tmux.h	/^typedef u_int utf8_char;$/;"	t
utf8_copy	utf8.c	/^utf8_copy(struct utf8_data *to, const struct utf8_data *from)$/;"	f
utf8_cstrhas	utf8.c	/^utf8_cstrhas(const char *s, const struct utf8_data *ud)$/;"	f
utf8_cstrwidth	utf8.c	/^utf8_cstrwidth(const char *s)$/;"	f
utf8_data	tmux.h	/^struct utf8_data {$/;"	s
utf8_data_cmp	utf8.c	/^utf8_data_cmp(struct utf8_item *ui1, struct utf8_item *ui2)$/;"	f	file:
utf8_data_tree	utf8.c	/^static struct utf8_data_tree utf8_data_tree = RB_INITIALIZER(utf8_data_tree);$/;"	v	typeref:struct:utf8_data_tree	file:
utf8_from_data	utf8.c	/^utf8_from_data(const struct utf8_data *ud, utf8_char *uc)$/;"	f
utf8_fromcstr	utf8.c	/^utf8_fromcstr(const char *src)$/;"	f
utf8_index_cmp	utf8.c	/^utf8_index_cmp(struct utf8_item *ui1, struct utf8_item *ui2)$/;"	f	file:
utf8_index_tree	utf8.c	/^static struct utf8_index_tree utf8_index_tree = RB_INITIALIZER(utf8_index_tree);$/;"	v	typeref:struct:utf8_index_tree	file:
utf8_isvalid	utf8.c	/^utf8_isvalid(const char *s)$/;"	f
utf8_item	utf8.c	/^struct utf8_item {$/;"	s	file:
utf8_item_by_data	utf8.c	/^utf8_item_by_data(const char *data, size_t size)$/;"	f	file:
utf8_item_by_index	utf8.c	/^utf8_item_by_index(u_int index)$/;"	f	file:
utf8_next_index	utf8.c	/^static u_int utf8_next_index;$/;"	v	file:
utf8_open	utf8.c	/^utf8_open(struct utf8_data *ud, u_char ch)$/;"	f
utf8_padcstr	utf8.c	/^utf8_padcstr(const char *s, u_int width)$/;"	f
utf8_put_item	utf8.c	/^utf8_put_item(const char *data, size_t size, u_int *index)$/;"	f	file:
utf8_rpadcstr	utf8.c	/^utf8_rpadcstr(const char *s, u_int width)$/;"	f
utf8_sanitize	utf8.c	/^utf8_sanitize(const char *src)$/;"	f
utf8_set	utf8.c	/^utf8_set(struct utf8_data *ud, u_char ch)$/;"	f
utf8_state	tmux.h	/^enum utf8_state {$/;"	g
utf8_stravis	utf8.c	/^utf8_stravis(char **dst, const char *src, int flag)$/;"	f
utf8_stravisx	utf8.c	/^utf8_stravisx(char **dst, const char *src, size_t srclen, int flag)$/;"	f
utf8_strlen	utf8.c	/^utf8_strlen(const struct utf8_data *s)$/;"	f
utf8_strvis	utf8.c	/^utf8_strvis(char *dst, const char *src, size_t len, int flag)$/;"	f
utf8_strwidth	utf8.c	/^utf8_strwidth(const struct utf8_data *s, ssize_t n)$/;"	f
utf8_to_data	utf8.c	/^utf8_to_data(utf8_char uc, struct utf8_data *ud)$/;"	f
utf8_tocstr	utf8.c	/^utf8_tocstr(struct utf8_data *src)$/;"	f
utf8_width	utf8.c	/^utf8_width(struct utf8_data *ud, int *width)$/;"	f	file:
utf8data	input.c	/^	struct utf8_data	utf8data;$/;"	m	struct:input_ctx	typeref:struct:input_ctx::utf8_data	file:
utf8proc_mbtowc	compat/utf8proc.c	/^utf8proc_mbtowc(wchar_t *pwc, const char *s, size_t n)$/;"	f
utf8proc_wctomb	compat/utf8proc.c	/^utf8proc_wctomb(char *s, wchar_t wc)$/;"	f
utf8proc_wcwidth	compat/utf8proc.c	/^utf8proc_wcwidth(wchar_t wc)$/;"	f
utf8started	input.c	/^	int			utf8started;$/;"	m	struct:input_ctx	file:
valid	tmux.h	/^	int		valid;$/;"	m	struct:mouse_event
value	arguments.c	/^	char			*value;$/;"	m	struct:args_value	file:
value	format.c	/^	char			*value;$/;"	m	struct:format_entry	file:
value	options.c	/^	union options_value			 value;$/;"	m	struct:options_entry	typeref:union:options_entry::options_value	file:
value	options.c	/^	union options_value		 value;$/;"	m	struct:options_array_item	typeref:union:options_array_item::options_value	file:
value	tmux.h	/^	char		*value;$/;"	m	struct:environ_entry
value	tty-term.c	/^	} value;$/;"	m	struct:tty_code	typeref:union:tty_code::__anon16	file:
values	arguments.c	/^	struct args_values	 values;$/;"	m	struct:args_entry	typeref:struct:args_entry::args_values	file:
vasprintf	compat/asprintf.c	/^vasprintf(char **ret, const char *fmt, va_list ap)$/;"	f
viewmode	window-copy.c	/^	int		 viewmode;	\/* view mode entered *\/$/;"	m	struct:window_copy_mode_data	file:
vis	compat/vis.c	/^vis(char *dst, int c, int flag, int nextc)$/;"	f
w	compat/imsg.h	/^	struct msgbuf		 w;$/;"	m	struct:imsgbuf	typeref:struct:imsgbuf::msgbuf
w	format.c	/^	struct window		*w;$/;"	m	struct:format_tree	typeref:struct:format_tree::window	file:
w	tmux.h	/^	int		w;$/;"	m	struct:mouse_event
w	tmux.h	/^	struct window		*w;$/;"	m	struct:cmd_find_state	typeref:struct:cmd_find_state::window
wait_channel	cmd-wait-for.c	/^struct wait_channel {$/;"	s	file:
wait_channel_cmp	cmd-wait-for.c	/^wait_channel_cmp(struct wait_channel *wc1, struct wait_channel *wc2)$/;"	f	file:
wait_channels	cmd-wait-for.c	/^static struct wait_channels wait_channels = RB_INITIALIZER(wait_channels);$/;"	v	typeref:struct:wait_channels	file:
wait_item	cmd-wait-for.c	/^struct wait_item {$/;"	s	file:
warn	compat/err.c	/^warn(const char *fmt, ...)$/;"	f
warnx	compat/err.c	/^warnx(const char *fmt, ...)$/;"	f
wentry	tmux.h	/^	TAILQ_ENTRY(winlink) wentry;$/;"	m	struct:winlink
width	mode-tree.c	/^	u_int			  width;$/;"	m	struct:mode_tree_data	file:
width	tmux.h	/^	u_char	width;	\/* 0xff if invalid *\/$/;"	m	struct:utf8_data
width	tmux.h	/^	u_int			 width;$/;"	m	struct:menu
window	control.c	/^	u_int				 window;$/;"	m	struct:control_sub_window	file:
window	notify.c	/^	struct window		*window;$/;"	m	struct:notify_entry	typeref:struct:notify_entry::window	file:
window	tmux.h	/^	struct window	*window;$/;"	m	struct:window_pane	typeref:struct:window_pane::window
window	tmux.h	/^	struct window	*window;$/;"	m	struct:winlink	typeref:struct:winlink::window
window	tmux.h	/^	u_int			 window;$/;"	m	struct:client_window
window	tmux.h	/^struct window {$/;"	s
window_add_pane	window.c	/^window_add_pane(struct window *w, struct window_pane *other, u_int hlimit,$/;"	f
window_add_ref	window.c	/^window_add_ref(struct window *w, const char *from)$/;"	f
window_buffer_add_item	window-buffer.c	/^window_buffer_add_item(struct window_buffer_modedata *data)$/;"	f	file:
window_buffer_build	window-buffer.c	/^window_buffer_build(void *modedata, struct mode_tree_sort_criteria *sort_crit,$/;"	f	file:
window_buffer_cmp	window-buffer.c	/^window_buffer_cmp(const void *a0, const void *b0)$/;"	f	file:
window_buffer_do_delete	window-buffer.c	/^window_buffer_do_delete(void *modedata, void *itemdata,$/;"	f	file:
window_buffer_do_paste	window-buffer.c	/^window_buffer_do_paste(void *modedata, void *itemdata, struct client *c,$/;"	f	file:
window_buffer_draw	window-buffer.c	/^window_buffer_draw(__unused void *modedata, void *itemdata,$/;"	f	file:
window_buffer_edit_close_cb	window-buffer.c	/^window_buffer_edit_close_cb(char *buf, size_t len, void *arg)$/;"	f	file:
window_buffer_editdata	window-buffer.c	/^struct window_buffer_editdata {$/;"	s	file:
window_buffer_finish_edit	window-buffer.c	/^window_buffer_finish_edit(struct window_buffer_editdata *ed)$/;"	f	file:
window_buffer_free	window-buffer.c	/^window_buffer_free(struct window_mode_entry *wme)$/;"	f	file:
window_buffer_free_item	window-buffer.c	/^window_buffer_free_item(struct window_buffer_itemdata *item)$/;"	f	file:
window_buffer_init	window-buffer.c	/^window_buffer_init(struct window_mode_entry *wme, struct cmd_find_state *fs,$/;"	f	file:
window_buffer_itemdata	window-buffer.c	/^struct window_buffer_itemdata {$/;"	s	file:
window_buffer_key	window-buffer.c	/^window_buffer_key(struct window_mode_entry *wme, struct client *c,$/;"	f	file:
window_buffer_menu	window-buffer.c	/^window_buffer_menu(void *modedata, struct client *c, key_code key)$/;"	f	file:
window_buffer_menu_items	window-buffer.c	/^static const struct menu_item window_buffer_menu_items[] = {$/;"	v	typeref:struct:menu_item	file:
window_buffer_mode	window-buffer.c	/^const struct window_mode window_buffer_mode = {$/;"	v	typeref:struct:window_mode
window_buffer_modedata	window-buffer.c	/^struct window_buffer_modedata {$/;"	s	file:
window_buffer_resize	window-buffer.c	/^window_buffer_resize(struct window_mode_entry *wme, u_int sx, u_int sy)$/;"	f	file:
window_buffer_search	window-buffer.c	/^window_buffer_search(__unused void *modedata, void *itemdata, const char *ss)$/;"	f	file:
window_buffer_sort	window-buffer.c	/^static struct mode_tree_sort_criteria *window_buffer_sort;$/;"	v	typeref:struct:mode_tree_sort_criteria	file:
window_buffer_sort_list	window-buffer.c	/^static const char *window_buffer_sort_list[] = {$/;"	v	file:
window_buffer_sort_type	window-buffer.c	/^enum window_buffer_sort_type {$/;"	g	file:
window_buffer_start_edit	window-buffer.c	/^window_buffer_start_edit(struct window_buffer_modedata *data,$/;"	f	file:
window_buffer_update	window-buffer.c	/^window_buffer_update(struct window_mode_entry *wme)$/;"	f	file:
window_client_add_item	window-client.c	/^window_client_add_item(struct window_client_modedata *data)$/;"	f	file:
window_client_build	window-client.c	/^window_client_build(void *modedata, struct mode_tree_sort_criteria *sort_crit,$/;"	f	file:
window_client_cmp	window-client.c	/^window_client_cmp(const void *a0, const void *b0)$/;"	f	file:
window_client_do_detach	window-client.c	/^window_client_do_detach(void *modedata, void *itemdata,$/;"	f	file:
window_client_draw	window-client.c	/^window_client_draw(__unused void *modedata, void *itemdata,$/;"	f	file:
window_client_free	window-client.c	/^window_client_free(struct window_mode_entry *wme)$/;"	f	file:
window_client_free_item	window-client.c	/^window_client_free_item(struct window_client_itemdata *item)$/;"	f	file:
window_client_init	window-client.c	/^window_client_init(struct window_mode_entry *wme,$/;"	f	file:
window_client_itemdata	window-client.c	/^struct window_client_itemdata {$/;"	s	file:
window_client_key	window-client.c	/^window_client_key(struct window_mode_entry *wme, struct client *c,$/;"	f	file:
window_client_menu	window-client.c	/^window_client_menu(void *modedata, struct client *c, key_code key)$/;"	f	file:
window_client_menu_items	window-client.c	/^static const struct menu_item window_client_menu_items[] = {$/;"	v	typeref:struct:menu_item	file:
window_client_mode	window-client.c	/^const struct window_mode window_client_mode = {$/;"	v	typeref:struct:window_mode
window_client_modedata	window-client.c	/^struct window_client_modedata {$/;"	s	file:
window_client_resize	window-client.c	/^window_client_resize(struct window_mode_entry *wme, u_int sx, u_int sy)$/;"	f	file:
window_client_sort	window-client.c	/^static struct mode_tree_sort_criteria *window_client_sort;$/;"	v	typeref:struct:mode_tree_sort_criteria	file:
window_client_sort_list	window-client.c	/^static const char *window_client_sort_list[] = {$/;"	v	file:
window_client_sort_type	window-client.c	/^enum window_client_sort_type {$/;"	g	file:
window_client_update	window-client.c	/^window_client_update(struct window_mode_entry *wme)$/;"	f	file:
window_clock_draw_screen	window-clock.c	/^window_clock_draw_screen(struct window_mode_entry *wme)$/;"	f	file:
window_clock_free	window-clock.c	/^window_clock_free(struct window_mode_entry *wme)$/;"	f	file:
window_clock_init	window-clock.c	/^window_clock_init(struct window_mode_entry *wme,$/;"	f	file:
window_clock_key	window-clock.c	/^window_clock_key(struct window_mode_entry *wme, __unused struct client *c,$/;"	f	file:
window_clock_mode	window-clock.c	/^const struct window_mode window_clock_mode = {$/;"	v	typeref:struct:window_mode
window_clock_mode_data	window-clock.c	/^struct window_clock_mode_data {$/;"	s	file:
window_clock_resize	window-clock.c	/^window_clock_resize(struct window_mode_entry *wme, u_int sx, u_int sy)$/;"	f	file:
window_clock_table	window-clock.c	/^const char window_clock_table[14][5][5] = {$/;"	v
window_clock_timer_callback	window-clock.c	/^window_clock_timer_callback(__unused int fd, __unused short events, void *arg)$/;"	f	file:
window_cmp	window.c	/^window_cmp(struct window *w1, struct window *w2)$/;"	f
window_copy_add	window-copy.c	/^window_copy_add(struct window_pane *wp, const char *fmt, ...)$/;"	f
window_copy_adjust_selection	window-copy.c	/^window_copy_adjust_selection(struct window_mode_entry *wme, u_int *selx,$/;"	f	file:
window_copy_append_selection	window-copy.c	/^window_copy_append_selection(struct window_mode_entry *wme)$/;"	f	file:
window_copy_cellstring	window-copy.c	/^window_copy_cellstring(const struct grid_line *gl, u_int px, size_t *size,$/;"	f	file:
window_copy_clear_marks	window-copy.c	/^window_copy_clear_marks(struct window_mode_entry *wme)$/;"	f	file:
window_copy_clear_selection	window-copy.c	/^window_copy_clear_selection(struct window_mode_entry *wme)$/;"	f	file:
window_copy_clone_screen	window-copy.c	/^window_copy_clone_screen(struct screen *src, struct screen *hint, u_int *cx,$/;"	f	file:
window_copy_cmd_action	window-copy.c	/^enum window_copy_cmd_action {$/;"	g	file:
window_copy_cmd_append_selection	window-copy.c	/^window_copy_cmd_append_selection(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_append_selection_and_cancel	window-copy.c	/^window_copy_cmd_append_selection_and_cancel(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_back_to_indentation	window-copy.c	/^window_copy_cmd_back_to_indentation(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_begin_selection	window-copy.c	/^window_copy_cmd_begin_selection(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_bottom_line	window-copy.c	/^window_copy_cmd_bottom_line(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_cancel	window-copy.c	/^window_copy_cmd_cancel(__unused struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_clear	window-copy.c	/^enum window_copy_cmd_clear {$/;"	g	file:
window_copy_cmd_clear_selection	window-copy.c	/^window_copy_cmd_clear_selection(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_copy_end_of_line	window-copy.c	/^window_copy_cmd_copy_end_of_line(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_copy_line	window-copy.c	/^window_copy_cmd_copy_line(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_copy_pipe	window-copy.c	/^window_copy_cmd_copy_pipe(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_copy_pipe_and_cancel	window-copy.c	/^window_copy_cmd_copy_pipe_and_cancel(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_copy_pipe_no_clear	window-copy.c	/^window_copy_cmd_copy_pipe_no_clear(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_copy_selection	window-copy.c	/^window_copy_cmd_copy_selection(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_copy_selection_and_cancel	window-copy.c	/^window_copy_cmd_copy_selection_and_cancel(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_copy_selection_no_clear	window-copy.c	/^window_copy_cmd_copy_selection_no_clear(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_cursor_down	window-copy.c	/^window_copy_cmd_cursor_down(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_cursor_down_and_cancel	window-copy.c	/^window_copy_cmd_cursor_down_and_cancel(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_cursor_left	window-copy.c	/^window_copy_cmd_cursor_left(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_cursor_right	window-copy.c	/^window_copy_cmd_cursor_right(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_cursor_up	window-copy.c	/^window_copy_cmd_cursor_up(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_end_of_line	window-copy.c	/^window_copy_cmd_end_of_line(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_goto_line	window-copy.c	/^window_copy_cmd_goto_line(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_halfpage_down	window-copy.c	/^window_copy_cmd_halfpage_down(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_halfpage_down_and_cancel	window-copy.c	/^window_copy_cmd_halfpage_down_and_cancel(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_halfpage_up	window-copy.c	/^window_copy_cmd_halfpage_up(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_history_bottom	window-copy.c	/^window_copy_cmd_history_bottom(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_history_top	window-copy.c	/^window_copy_cmd_history_top(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_jump_again	window-copy.c	/^window_copy_cmd_jump_again(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_jump_backward	window-copy.c	/^window_copy_cmd_jump_backward(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_jump_forward	window-copy.c	/^window_copy_cmd_jump_forward(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_jump_reverse	window-copy.c	/^window_copy_cmd_jump_reverse(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_jump_to_backward	window-copy.c	/^window_copy_cmd_jump_to_backward(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_jump_to_forward	window-copy.c	/^window_copy_cmd_jump_to_forward(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_jump_to_mark	window-copy.c	/^window_copy_cmd_jump_to_mark(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_middle_line	window-copy.c	/^window_copy_cmd_middle_line(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_next_matching_bracket	window-copy.c	/^window_copy_cmd_next_matching_bracket(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_next_paragraph	window-copy.c	/^window_copy_cmd_next_paragraph(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_next_space	window-copy.c	/^window_copy_cmd_next_space(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_next_space_end	window-copy.c	/^window_copy_cmd_next_space_end(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_next_word	window-copy.c	/^window_copy_cmd_next_word(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_next_word_end	window-copy.c	/^window_copy_cmd_next_word_end(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_other_end	window-copy.c	/^window_copy_cmd_other_end(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_page_down	window-copy.c	/^window_copy_cmd_page_down(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_page_down_and_cancel	window-copy.c	/^window_copy_cmd_page_down_and_cancel(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_page_up	window-copy.c	/^window_copy_cmd_page_up(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_previous_matching_bracket	window-copy.c	/^window_copy_cmd_previous_matching_bracket(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_previous_paragraph	window-copy.c	/^window_copy_cmd_previous_paragraph(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_previous_space	window-copy.c	/^window_copy_cmd_previous_space(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_previous_word	window-copy.c	/^window_copy_cmd_previous_word(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_rectangle_toggle	window-copy.c	/^window_copy_cmd_rectangle_toggle(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_refresh_from_pane	window-copy.c	/^window_copy_cmd_refresh_from_pane(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_scroll_down	window-copy.c	/^window_copy_cmd_scroll_down(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_scroll_down_and_cancel	window-copy.c	/^window_copy_cmd_scroll_down_and_cancel(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_scroll_up	window-copy.c	/^window_copy_cmd_scroll_up(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_search_again	window-copy.c	/^window_copy_cmd_search_again(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_search_backward	window-copy.c	/^window_copy_cmd_search_backward(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_search_backward_incremental	window-copy.c	/^window_copy_cmd_search_backward_incremental(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_search_backward_text	window-copy.c	/^window_copy_cmd_search_backward_text(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_search_forward	window-copy.c	/^window_copy_cmd_search_forward(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_search_forward_incremental	window-copy.c	/^window_copy_cmd_search_forward_incremental(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_search_forward_text	window-copy.c	/^window_copy_cmd_search_forward_text(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_search_reverse	window-copy.c	/^window_copy_cmd_search_reverse(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_select_line	window-copy.c	/^window_copy_cmd_select_line(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_select_word	window-copy.c	/^window_copy_cmd_select_word(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_set_mark	window-copy.c	/^window_copy_cmd_set_mark(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_start_of_line	window-copy.c	/^window_copy_cmd_start_of_line(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_state	window-copy.c	/^struct window_copy_cmd_state {$/;"	s	file:
window_copy_cmd_stop_selection	window-copy.c	/^window_copy_cmd_stop_selection(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_cmd_table	window-copy.c	/^} window_copy_cmd_table[] = {$/;"	v	typeref:struct:__anon22	file:
window_copy_cmd_top_line	window-copy.c	/^window_copy_cmd_top_line(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_command	window-copy.c	/^window_copy_command(struct window_mode_entry *wme, struct client *c,$/;"	f	file:
window_copy_common_init	window-copy.c	/^window_copy_common_init(struct window_mode_entry *wme)$/;"	f	file:
window_copy_copy_buffer	window-copy.c	/^window_copy_copy_buffer(struct window_mode_entry *wme, const char *prefix,$/;"	f	file:
window_copy_copy_line	window-copy.c	/^window_copy_copy_line(struct window_mode_entry *wme, char **buf, size_t *off,$/;"	f	file:
window_copy_copy_pipe	window-copy.c	/^window_copy_copy_pipe(struct window_mode_entry *wme, struct session *s,$/;"	f	file:
window_copy_copy_selection	window-copy.c	/^window_copy_copy_selection(struct window_mode_entry *wme, const char *prefix)$/;"	f	file:
window_copy_cstrtocellpos	window-copy.c	/^window_copy_cstrtocellpos(struct grid *gd, u_int ncells, u_int *ppx, u_int *ppy,$/;"	f	file:
window_copy_cursor_back_to_indentation	window-copy.c	/^window_copy_cursor_back_to_indentation(struct window_mode_entry *wme)$/;"	f	file:
window_copy_cursor_down	window-copy.c	/^window_copy_cursor_down(struct window_mode_entry *wme, int scroll_only)$/;"	f	file:
window_copy_cursor_end_of_line	window-copy.c	/^window_copy_cursor_end_of_line(struct window_mode_entry *wme)$/;"	f	file:
window_copy_cursor_jump	window-copy.c	/^window_copy_cursor_jump(struct window_mode_entry *wme)$/;"	f	file:
window_copy_cursor_jump_back	window-copy.c	/^window_copy_cursor_jump_back(struct window_mode_entry *wme)$/;"	f	file:
window_copy_cursor_jump_to	window-copy.c	/^window_copy_cursor_jump_to(struct window_mode_entry *wme)$/;"	f	file:
window_copy_cursor_jump_to_back	window-copy.c	/^window_copy_cursor_jump_to_back(struct window_mode_entry *wme)$/;"	f	file:
window_copy_cursor_left	window-copy.c	/^window_copy_cursor_left(struct window_mode_entry *wme)$/;"	f	file:
window_copy_cursor_line_cb	window-copy.c	/^window_copy_cursor_line_cb(struct format_tree *ft)$/;"	f	file:
window_copy_cursor_next_word	window-copy.c	/^window_copy_cursor_next_word(struct window_mode_entry *wme,$/;"	f	file:
window_copy_cursor_next_word_end	window-copy.c	/^window_copy_cursor_next_word_end(struct window_mode_entry *wme,$/;"	f	file:
window_copy_cursor_next_word_end_pos	window-copy.c	/^window_copy_cursor_next_word_end_pos(struct window_mode_entry *wme,$/;"	f	file:
window_copy_cursor_previous_word	window-copy.c	/^window_copy_cursor_previous_word(struct window_mode_entry *wme,$/;"	f	file:
window_copy_cursor_previous_word_pos	window-copy.c	/^window_copy_cursor_previous_word_pos(struct window_mode_entry *wme,$/;"	f	file:
window_copy_cursor_right	window-copy.c	/^window_copy_cursor_right(struct window_mode_entry *wme, int all)$/;"	f	file:
window_copy_cursor_start_of_line	window-copy.c	/^window_copy_cursor_start_of_line(struct window_mode_entry *wme)$/;"	f	file:
window_copy_cursor_up	window-copy.c	/^window_copy_cursor_up(struct window_mode_entry *wme, int scroll_only)$/;"	f	file:
window_copy_cursor_word_cb	window-copy.c	/^window_copy_cursor_word_cb(struct format_tree *ft)$/;"	f	file:
window_copy_drag_release	window-copy.c	/^window_copy_drag_release(struct client *c, struct mouse_event *m)$/;"	f	file:
window_copy_drag_update	window-copy.c	/^window_copy_drag_update(struct client *c, struct mouse_event *m)$/;"	f	file:
window_copy_expand_search_string	window-copy.c	/^window_copy_expand_search_string(struct window_copy_cmd_state *cs)$/;"	f	file:
window_copy_find_length	window-copy.c	/^window_copy_find_length(struct window_mode_entry *wme, u_int py)$/;"	f	file:
window_copy_formats	window-copy.c	/^window_copy_formats(struct window_mode_entry *wme, struct format_tree *ft)$/;"	f	file:
window_copy_free	window-copy.c	/^window_copy_free(struct window_mode_entry *wme)$/;"	f	file:
window_copy_get_line	window-copy.c	/^window_copy_get_line(struct window_pane *wp, u_int y)$/;"	f
window_copy_get_selection	window-copy.c	/^window_copy_get_selection(struct window_mode_entry *wme, size_t *len)$/;"	f	file:
window_copy_get_word	window-copy.c	/^window_copy_get_word(struct window_pane *wp, u_int x, u_int y)$/;"	f
window_copy_goto_line	window-copy.c	/^window_copy_goto_line(struct window_mode_entry *wme, const char *linestr)$/;"	f	file:
window_copy_in_set	window-copy.c	/^window_copy_in_set(struct window_mode_entry *wme, u_int px, u_int py,$/;"	f	file:
window_copy_init	window-copy.c	/^window_copy_init(struct window_mode_entry *wme,$/;"	f	file:
window_copy_is_lowercase	window-copy.c	/^window_copy_is_lowercase(const char *ptr)$/;"	f	file:
window_copy_jump_to_mark	window-copy.c	/^window_copy_jump_to_mark(struct window_mode_entry *wme)$/;"	f	file:
window_copy_key_table	window-copy.c	/^window_copy_key_table(struct window_mode_entry *wme)$/;"	f	file:
window_copy_last_regex	window-copy.c	/^window_copy_last_regex(struct grid *gd, u_int py, u_int first, u_int last,$/;"	f	file:
window_copy_match_at_cursor	window-copy.c	/^window_copy_match_at_cursor(struct window_copy_mode_data *data)$/;"	f	file:
window_copy_match_start_end	window-copy.c	/^window_copy_match_start_end(struct window_copy_mode_data *data, u_int at,$/;"	f	file:
window_copy_mode	window-copy.c	/^const struct window_mode window_copy_mode = {$/;"	v	typeref:struct:window_mode
window_copy_mode_data	window-copy.c	/^struct window_copy_mode_data {$/;"	s	file:
window_copy_move_left	window-copy.c	/^window_copy_move_left(struct screen *s, u_int *fx, u_int *fy, int wrapflag)$/;"	f	file:
window_copy_move_mouse	window-copy.c	/^window_copy_move_mouse(struct mouse_event *m)$/;"	f	file:
window_copy_next_paragraph	window-copy.c	/^window_copy_next_paragraph(struct window_mode_entry *wme)$/;"	f	file:
window_copy_other_end	window-copy.c	/^window_copy_other_end(struct window_mode_entry *wme)$/;"	f	file:
window_copy_pagedown	window-copy.c	/^window_copy_pagedown(struct window_mode_entry *wme, int half_page,$/;"	f	file:
window_copy_pageup	window-copy.c	/^window_copy_pageup(struct window_pane *wp, int half_page)$/;"	f
window_copy_pageup1	window-copy.c	/^window_copy_pageup1(struct window_mode_entry *wme, int half_page)$/;"	f	file:
window_copy_previous_paragraph	window-copy.c	/^window_copy_previous_paragraph(struct window_mode_entry *wme)$/;"	f	file:
window_copy_rectangle_toggle	window-copy.c	/^window_copy_rectangle_toggle(struct window_mode_entry *wme)$/;"	f	file:
window_copy_redraw_lines	window-copy.c	/^window_copy_redraw_lines(struct window_mode_entry *wme, u_int py, u_int ny)$/;"	f	file:
window_copy_redraw_screen	window-copy.c	/^window_copy_redraw_screen(struct window_mode_entry *wme)$/;"	f	file:
window_copy_redraw_selection	window-copy.c	/^window_copy_redraw_selection(struct window_mode_entry *wme, u_int old_y)$/;"	f	file:
window_copy_resize	window-copy.c	/^window_copy_resize(struct window_mode_entry *wme, u_int sx, u_int sy)$/;"	f	file:
window_copy_scroll_down	window-copy.c	/^window_copy_scroll_down(struct window_mode_entry *wme, u_int ny)$/;"	f	file:
window_copy_scroll_timer	window-copy.c	/^window_copy_scroll_timer(__unused int fd, __unused short events, void *arg)$/;"	f	file:
window_copy_scroll_to	window-copy.c	/^window_copy_scroll_to(struct window_mode_entry *wme, u_int px, u_int py,$/;"	f	file:
window_copy_scroll_up	window-copy.c	/^window_copy_scroll_up(struct window_mode_entry *wme, u_int ny)$/;"	f	file:
window_copy_search	window-copy.c	/^window_copy_search(struct window_mode_entry *wme, int direction, int regex,$/;"	f	file:
window_copy_search_compare	window-copy.c	/^window_copy_search_compare(struct grid *gd, u_int px, u_int py,$/;"	f	file:
window_copy_search_down	window-copy.c	/^window_copy_search_down(struct window_mode_entry *wme, int regex, int again)$/;"	f	file:
window_copy_search_jump	window-copy.c	/^window_copy_search_jump(struct window_mode_entry *wme, struct grid *gd,$/;"	f	file:
window_copy_search_lr	window-copy.c	/^window_copy_search_lr(struct grid *gd, struct grid *sgd, u_int *ppx, u_int py,$/;"	f	file:
window_copy_search_lr_regex	window-copy.c	/^window_copy_search_lr_regex(struct grid *gd, u_int *ppx, u_int *psx, u_int py,$/;"	f	file:
window_copy_search_mark_at	window-copy.c	/^window_copy_search_mark_at(struct window_copy_mode_data *data, u_int px,$/;"	f	file:
window_copy_search_marks	window-copy.c	/^window_copy_search_marks(struct window_mode_entry *wme, struct screen *ssp,$/;"	f	file:
window_copy_search_match_cb	window-copy.c	/^window_copy_search_match_cb(struct format_tree *ft)$/;"	f	file:
window_copy_search_rl	window-copy.c	/^window_copy_search_rl(struct grid *gd,$/;"	f	file:
window_copy_search_rl_regex	window-copy.c	/^window_copy_search_rl_regex(struct grid *gd, u_int *ppx, u_int *psx, u_int py,$/;"	f	file:
window_copy_search_up	window-copy.c	/^window_copy_search_up(struct window_mode_entry *wme, int regex, int again)$/;"	f	file:
window_copy_set_selection	window-copy.c	/^window_copy_set_selection(struct window_mode_entry *wme, int may_redraw,$/;"	f	file:
window_copy_size_changed	window-copy.c	/^window_copy_size_changed(struct window_mode_entry *wme)$/;"	f	file:
window_copy_start_drag	window-copy.c	/^window_copy_start_drag(struct client *c, struct mouse_event *m)$/;"	f
window_copy_start_selection	window-copy.c	/^window_copy_start_selection(struct window_mode_entry *wme)$/;"	f	file:
window_copy_stringify	window-copy.c	/^window_copy_stringify(struct grid *gd, u_int py, u_int first, u_int last,$/;"	f	file:
window_copy_synchronize_cursor	window-copy.c	/^window_copy_synchronize_cursor(struct window_mode_entry *wme, int no_reset)$/;"	f	file:
window_copy_synchronize_cursor_end	window-copy.c	/^window_copy_synchronize_cursor_end(struct window_mode_entry *wme, int begin,$/;"	f	file:
window_copy_update_cursor	window-copy.c	/^window_copy_update_cursor(struct window_mode_entry *wme, u_int cx, u_int cy)$/;"	f	file:
window_copy_update_selection	window-copy.c	/^window_copy_update_selection(struct window_mode_entry *wme, int may_redraw,$/;"	f	file:
window_copy_update_style	window-copy.c	/^window_copy_update_style(struct window_mode_entry *wme, u_int fx, u_int fy,$/;"	f	file:
window_copy_vadd	window-copy.c	/^window_copy_vadd(struct window_pane *wp, const char *fmt, va_list ap)$/;"	f
window_copy_view_init	window-copy.c	/^window_copy_view_init(struct window_mode_entry *wme,$/;"	f	file:
window_copy_visible_lines	window-copy.c	/^window_copy_visible_lines(struct window_copy_mode_data *data, u_int *start,$/;"	f	file:
window_copy_write_line	window-copy.c	/^window_copy_write_line(struct window_mode_entry *wme,$/;"	f	file:
window_copy_write_lines	window-copy.c	/^window_copy_write_lines(struct window_mode_entry *wme,$/;"	f	file:
window_copy_write_one	window-copy.c	/^window_copy_write_one(struct window_mode_entry *wme,$/;"	f	file:
window_count_panes	window.c	/^window_count_panes(struct window *w)$/;"	f
window_create	window.c	/^window_create(u_int sx, u_int sy, u_int xpixel, u_int ypixel)$/;"	f
window_customize_add_item	window-customize.c	/^window_customize_add_item(struct window_customize_modedata *data)$/;"	f	file:
window_customize_build	window-customize.c	/^window_customize_build(void *modedata,$/;"	f	file:
window_customize_build_array	window-customize.c	/^window_customize_build_array(struct window_customize_modedata *data,$/;"	f	file:
window_customize_build_keys	window-customize.c	/^window_customize_build_keys(struct window_customize_modedata *data,$/;"	f	file:
window_customize_build_option	window-customize.c	/^window_customize_build_option(struct window_customize_modedata *data,$/;"	f	file:
window_customize_build_options	window-customize.c	/^window_customize_build_options(struct window_customize_modedata *data,$/;"	f	file:
window_customize_change	window-customize.c	/^enum window_customize_change {$/;"	g	file:
window_customize_change_current_callback	window-customize.c	/^window_customize_change_current_callback(__unused struct client *c,$/;"	f	file:
window_customize_change_each	window-customize.c	/^window_customize_change_each(void *modedata, void *itemdata,$/;"	f	file:
window_customize_change_tagged_callback	window-customize.c	/^window_customize_change_tagged_callback(struct client *c, void *modedata,$/;"	f	file:
window_customize_check_item	window-customize.c	/^window_customize_check_item(struct window_customize_modedata *data,$/;"	f	file:
window_customize_destroy	window-customize.c	/^window_customize_destroy(struct window_customize_modedata *data)$/;"	f	file:
window_customize_draw	window-customize.c	/^window_customize_draw(void *modedata, void *itemdata,$/;"	f	file:
window_customize_draw_key	window-customize.c	/^window_customize_draw_key(__unused struct window_customize_modedata *data,$/;"	f	file:
window_customize_draw_option	window-customize.c	/^window_customize_draw_option(struct window_customize_modedata *data,$/;"	f	file:
window_customize_find_user_options	window-customize.c	/^window_customize_find_user_options(struct options *oo, const char ***list,$/;"	f	file:
window_customize_free	window-customize.c	/^window_customize_free(struct window_mode_entry *wme)$/;"	f	file:
window_customize_free_callback	window-customize.c	/^window_customize_free_callback(void *modedata)$/;"	f	file:
window_customize_free_item	window-customize.c	/^window_customize_free_item(struct window_customize_itemdata *item)$/;"	f	file:
window_customize_free_item_callback	window-customize.c	/^window_customize_free_item_callback(void *itemdata)$/;"	f	file:
window_customize_get_key	window-customize.c	/^window_customize_get_key(struct window_customize_itemdata *item,$/;"	f	file:
window_customize_get_tag	window-customize.c	/^window_customize_get_tag(struct options_entry *o, int idx,$/;"	f	file:
window_customize_get_tree	window-customize.c	/^window_customize_get_tree(enum window_customize_scope scope,$/;"	f	file:
window_customize_height	window-customize.c	/^window_customize_height(__unused void *modedata, __unused u_int height)$/;"	f	file:
window_customize_init	window-customize.c	/^window_customize_init(struct window_mode_entry *wme, struct cmd_find_state *fs,$/;"	f	file:
window_customize_itemdata	window-customize.c	/^struct window_customize_itemdata {$/;"	s	file:
window_customize_key	window-customize.c	/^window_customize_key(struct window_mode_entry *wme, struct client *c,$/;"	f	file:
window_customize_menu	window-customize.c	/^window_customize_menu(void *modedata, struct client *c, key_code key)$/;"	f	file:
window_customize_menu_items	window-customize.c	/^static const struct menu_item window_customize_menu_items[] = {$/;"	v	typeref:struct:menu_item	file:
window_customize_mode	window-customize.c	/^const struct window_mode window_customize_mode = {$/;"	v	typeref:struct:window_mode
window_customize_modedata	window-customize.c	/^struct window_customize_modedata {$/;"	s	file:
window_customize_reset_key	window-customize.c	/^window_customize_reset_key(struct window_customize_modedata *data,$/;"	f	file:
window_customize_reset_option	window-customize.c	/^window_customize_reset_option(struct window_customize_modedata *data,$/;"	f	file:
window_customize_resize	window-customize.c	/^window_customize_resize(struct window_mode_entry *wme, u_int sx, u_int sy)$/;"	f	file:
window_customize_scope	window-customize.c	/^enum window_customize_scope {$/;"	g	file:
window_customize_scope_text	window-customize.c	/^window_customize_scope_text(enum window_customize_scope scope,$/;"	f	file:
window_customize_set_command_callback	window-customize.c	/^window_customize_set_command_callback(struct client *c, void *itemdata,$/;"	f	file:
window_customize_set_key	window-customize.c	/^window_customize_set_key(struct client *c,$/;"	f	file:
window_customize_set_note_callback	window-customize.c	/^window_customize_set_note_callback(__unused struct client *c, void *itemdata,$/;"	f	file:
window_customize_set_option	window-customize.c	/^window_customize_set_option(struct client *c,$/;"	f	file:
window_customize_set_option_callback	window-customize.c	/^window_customize_set_option_callback(struct client *c, void *itemdata,$/;"	f	file:
window_customize_unset_key	window-customize.c	/^window_customize_unset_key(struct window_customize_modedata *data,$/;"	f	file:
window_customize_unset_option	window-customize.c	/^window_customize_unset_option(struct window_customize_modedata *data,$/;"	f	file:
window_destroy	window.c	/^window_destroy(struct window *w)$/;"	f	file:
window_destroy_panes	window.c	/^window_destroy_panes(struct window *w)$/;"	f
window_find_by_id	window.c	/^window_find_by_id(u_int id)$/;"	f
window_find_by_id_str	window.c	/^window_find_by_id_str(const char *s)$/;"	f
window_find_string	window.c	/^window_find_string(struct window *w, const char *s)$/;"	f
window_get_active_at	window.c	/^window_get_active_at(struct window *w, u_int x, u_int y)$/;"	f
window_has_pane	window.c	/^window_has_pane(struct window *w, struct window_pane *wp)$/;"	f
window_lost_pane	window.c	/^window_lost_pane(struct window *w, struct window_pane *wp)$/;"	f
window_mode	tmux.h	/^struct window_mode {$/;"	s
window_mode_entry	tmux.h	/^struct window_mode_entry {$/;"	s
window_pane	tmux.h	/^struct window_pane {$/;"	s
window_pane_at_index	window.c	/^window_pane_at_index(struct window *w, u_int idx)$/;"	f
window_pane_choose_best	window.c	/^window_pane_choose_best(struct window_pane **list, u_int size)$/;"	f	file:
window_pane_cmp	window.c	/^window_pane_cmp(struct window_pane *wp1, struct window_pane *wp2)$/;"	f
window_pane_create	window.c	/^window_pane_create(struct window *w, u_int sx, u_int sy, u_int hlimit)$/;"	f	file:
window_pane_destroy	window.c	/^window_pane_destroy(struct window_pane *wp)$/;"	f	file:
window_pane_destroy_ready	window.c	/^window_pane_destroy_ready(struct window_pane *wp)$/;"	f
window_pane_error_callback	window.c	/^window_pane_error_callback(__unused struct bufferevent *bufev,$/;"	f	file:
window_pane_find_by_id	window.c	/^window_pane_find_by_id(u_int id)$/;"	f
window_pane_find_by_id_str	window.c	/^window_pane_find_by_id_str(const char *s)$/;"	f
window_pane_find_down	window.c	/^window_pane_find_down(struct window_pane *wp)$/;"	f
window_pane_find_left	window.c	/^window_pane_find_left(struct window_pane *wp)$/;"	f
window_pane_find_right	window.c	/^window_pane_find_right(struct window_pane *wp)$/;"	f
window_pane_find_up	window.c	/^window_pane_find_up(struct window_pane *wp)$/;"	f
window_pane_get_new_data	window.c	/^window_pane_get_new_data(struct window_pane *wp,$/;"	f
window_pane_get_palette	window.c	/^window_pane_get_palette(struct window_pane *wp, int c)$/;"	f
window_pane_index	window.c	/^window_pane_index(struct window_pane *wp, u_int *i)$/;"	f
window_pane_input_callback	window.c	/^window_pane_input_callback(struct client *c, __unused const char *path,$/;"	f	file:
window_pane_input_data	window.c	/^struct window_pane_input_data {$/;"	s	file:
window_pane_key	window.c	/^window_pane_key(struct window_pane *wp, struct client *c, struct session *s,$/;"	f
window_pane_next_by_number	window.c	/^window_pane_next_by_number(struct window *w, struct window_pane *wp, u_int n)$/;"	f
window_pane_offset	tmux.h	/^struct window_pane_offset {$/;"	s
window_pane_previous_by_number	window.c	/^window_pane_previous_by_number(struct window *w, struct window_pane *wp,$/;"	f
window_pane_read_callback	window.c	/^window_pane_read_callback(__unused struct bufferevent *bufev, void *data)$/;"	f	file:
window_pane_reset_mode	window.c	/^window_pane_reset_mode(struct window_pane *wp)$/;"	f
window_pane_reset_mode_all	window.c	/^window_pane_reset_mode_all(struct window_pane *wp)$/;"	f
window_pane_reset_palette	window.c	/^window_pane_reset_palette(struct window_pane *wp)$/;"	f
window_pane_resize	window.c	/^window_pane_resize(struct window_pane *wp, u_int sx, u_int sy)$/;"	f
window_pane_search	window.c	/^window_pane_search(struct window_pane *wp, const char *term, int regex,$/;"	f
window_pane_send_resize	window.c	/^window_pane_send_resize(struct window_pane *wp, int force)$/;"	f
window_pane_set_event	window.c	/^window_pane_set_event(struct window_pane *wp)$/;"	f
window_pane_set_mode	window.c	/^window_pane_set_mode(struct window_pane *wp, struct window_pane *swp,$/;"	f
window_pane_set_palette	window.c	/^window_pane_set_palette(struct window_pane *wp, u_int n, int colour)$/;"	f
window_pane_start_input	window.c	/^window_pane_start_input(struct window_pane *wp, struct cmdq_item *item,$/;"	f
window_pane_unset_palette	window.c	/^window_pane_unset_palette(struct window_pane *wp, u_int n)$/;"	f
window_pane_update_used_data	window.c	/^window_pane_update_used_data(struct window_pane *wp,$/;"	f
window_pane_visible	window.c	/^window_pane_visible(struct window_pane *wp)$/;"	f
window_pop_zoom	window.c	/^window_pop_zoom(struct window *w)$/;"	f
window_printable_flags	window.c	/^window_printable_flags(struct winlink *wl)$/;"	f
window_push_zoom	window.c	/^window_push_zoom(struct window *w, int flag)$/;"	f
window_redraw_active_switch	window.c	/^window_redraw_active_switch(struct window *w, struct window_pane *wp)$/;"	f
window_remove_pane	window.c	/^window_remove_pane(struct window *w, struct window_pane *wp)$/;"	f
window_remove_ref	window.c	/^window_remove_ref(struct window *w, const char *from)$/;"	f
window_resize	window.c	/^window_resize(struct window *w, u_int sx, u_int sy, int xpixel, int ypixel)$/;"	f
window_set_active_pane	window.c	/^window_set_active_pane(struct window *w, struct window_pane *wp, int notify)$/;"	f
window_set_name	window.c	/^window_set_name(struct window *w, const char *new_name)$/;"	f
window_tree_add_item	window-tree.c	/^window_tree_add_item(struct window_tree_modedata *data)$/;"	f	file:
window_tree_build	window-tree.c	/^window_tree_build(void *modedata, struct mode_tree_sort_criteria *sort_crit,$/;"	f	file:
window_tree_build_pane	window-tree.c	/^window_tree_build_pane(struct session *s, struct winlink *wl,$/;"	f	file:
window_tree_build_session	window-tree.c	/^window_tree_build_session(struct session *s, void *modedata,$/;"	f	file:
window_tree_build_window	window-tree.c	/^window_tree_build_window(struct session *s, struct winlink *wl,$/;"	f	file:
window_tree_cmp_pane	window-tree.c	/^window_tree_cmp_pane(const void *a0, const void *b0)$/;"	f	file:
window_tree_cmp_session	window-tree.c	/^window_tree_cmp_session(const void *a0, const void *b0)$/;"	f	file:
window_tree_cmp_window	window-tree.c	/^window_tree_cmp_window(const void *a0, const void *b0)$/;"	f	file:
window_tree_command_callback	window-tree.c	/^window_tree_command_callback(struct client *c, void *modedata, const char *s,$/;"	f	file:
window_tree_command_done	window-tree.c	/^window_tree_command_done(__unused struct cmdq_item *item, void *modedata)$/;"	f	file:
window_tree_command_each	window-tree.c	/^window_tree_command_each(void *modedata, void *itemdata, struct client *c,$/;"	f	file:
window_tree_command_free	window-tree.c	/^window_tree_command_free(void *modedata)$/;"	f	file:
window_tree_destroy	window-tree.c	/^window_tree_destroy(struct window_tree_modedata *data)$/;"	f	file:
window_tree_draw	window-tree.c	/^window_tree_draw(void *modedata, void *itemdata, struct screen_write_ctx *ctx,$/;"	f	file:
window_tree_draw_label	window-tree.c	/^window_tree_draw_label(struct screen_write_ctx *ctx, u_int px, u_int py,$/;"	f	file:
window_tree_draw_session	window-tree.c	/^window_tree_draw_session(struct window_tree_modedata *data, struct session *s,$/;"	f	file:
window_tree_draw_window	window-tree.c	/^window_tree_draw_window(struct window_tree_modedata *data, struct session *s,$/;"	f	file:
window_tree_filter_pane	window-tree.c	/^window_tree_filter_pane(struct session *s, struct winlink *wl,$/;"	f	file:
window_tree_free	window-tree.c	/^window_tree_free(struct window_mode_entry *wme)$/;"	f	file:
window_tree_free_item	window-tree.c	/^window_tree_free_item(struct window_tree_itemdata *item)$/;"	f	file:
window_tree_get_target	window-tree.c	/^window_tree_get_target(struct window_tree_itemdata *item,$/;"	f	file:
window_tree_init	window-tree.c	/^window_tree_init(struct window_mode_entry *wme, struct cmd_find_state *fs,$/;"	f	file:
window_tree_itemdata	window-tree.c	/^struct window_tree_itemdata {$/;"	s	file:
window_tree_key	window-tree.c	/^window_tree_key(struct window_mode_entry *wme, struct client *c,$/;"	f	file:
window_tree_kill_current_callback	window-tree.c	/^window_tree_kill_current_callback(struct client *c, void *modedata,$/;"	f	file:
window_tree_kill_each	window-tree.c	/^window_tree_kill_each(__unused void *modedata, void *itemdata,$/;"	f	file:
window_tree_kill_tagged_callback	window-tree.c	/^window_tree_kill_tagged_callback(struct client *c, void *modedata,$/;"	f	file:
window_tree_menu	window-tree.c	/^window_tree_menu(void *modedata, struct client *c, key_code key)$/;"	f	file:
window_tree_menu_items	window-tree.c	/^static const struct menu_item window_tree_menu_items[] = {$/;"	v	typeref:struct:menu_item	file:
window_tree_mode	window-tree.c	/^const struct window_mode window_tree_mode = {$/;"	v	typeref:struct:window_mode
window_tree_modedata	window-tree.c	/^struct window_tree_modedata {$/;"	s	file:
window_tree_mouse	window-tree.c	/^window_tree_mouse(struct window_tree_modedata *data, key_code key, u_int x,$/;"	f	file:
window_tree_pull_item	window-tree.c	/^window_tree_pull_item(struct window_tree_itemdata *item, struct session **sp,$/;"	f	file:
window_tree_resize	window-tree.c	/^window_tree_resize(struct window_mode_entry *wme, u_int sx, u_int sy)$/;"	f	file:
window_tree_search	window-tree.c	/^window_tree_search(__unused void *modedata, void *itemdata, const char *ss)$/;"	f	file:
window_tree_sort	window-tree.c	/^static struct mode_tree_sort_criteria *window_tree_sort;$/;"	v	typeref:struct:mode_tree_sort_criteria	file:
window_tree_sort_list	window-tree.c	/^static const char *window_tree_sort_list[] = {$/;"	v	file:
window_tree_sort_type	window-tree.c	/^enum window_tree_sort_type {$/;"	g	file:
window_tree_type	window-tree.c	/^enum window_tree_type {$/;"	g	file:
window_tree_update	window-tree.c	/^window_tree_update(struct window_mode_entry *wme)$/;"	f	file:
window_unzoom	window.c	/^window_unzoom(struct window *w)$/;"	f
window_update_activity	window.c	/^window_update_activity(struct window *w)$/;"	f
window_view_mode	window-copy.c	/^const struct window_mode window_view_mode = {$/;"	v	typeref:struct:window_mode
window_zoom	window.c	/^window_zoom(struct window_pane *wp)$/;"	f
windows	control.c	/^	struct control_sub_windows	 windows;$/;"	m	struct:control_sub	typeref:struct:control_sub::control_sub_windows	file:
windows	tmux.h	/^	struct client_windows windows;$/;"	m	struct:client	typeref:struct:client::client_windows
windows	tmux.h	/^	struct winlinks	 windows;$/;"	m	struct:session	typeref:struct:session::winlinks
windows	window.c	/^struct windows windows;$/;"	v	typeref:struct:windows
winlink	tmux.h	/^struct winlink {$/;"	s
winlink	window-tree.c	/^	int			winlink;$/;"	m	struct:window_tree_itemdata	file:
winlink_add	window.c	/^winlink_add(struct winlinks *wwl, int idx)$/;"	f
winlink_clear_flags	window.c	/^winlink_clear_flags(struct winlink *wl)$/;"	f
winlink_cmp	window.c	/^winlink_cmp(struct winlink *wl1, struct winlink *wl2)$/;"	f
winlink_count	window.c	/^winlink_count(struct winlinks *wwl)$/;"	f
winlink_find_by_index	window.c	/^winlink_find_by_index(struct winlinks *wwl, int idx)$/;"	f
winlink_find_by_window	window.c	/^winlink_find_by_window(struct winlinks *wwl, struct window *w)$/;"	f
winlink_find_by_window_id	window.c	/^winlink_find_by_window_id(struct winlinks *wwl, u_int id)$/;"	f
winlink_next	window.c	/^winlink_next(struct winlink *wl)$/;"	f
winlink_next_by_number	window.c	/^winlink_next_by_number(struct winlink *wl, struct session *s, int n)$/;"	f
winlink_next_index	window.c	/^winlink_next_index(struct winlinks *wwl, int idx)$/;"	f	file:
winlink_previous	window.c	/^winlink_previous(struct winlink *wl)$/;"	f
winlink_previous_by_number	window.c	/^winlink_previous_by_number(struct winlink *wl, struct session *s, int n)$/;"	f
winlink_remove	window.c	/^winlink_remove(struct winlinks *wwl, struct winlink *wl)$/;"	f
winlink_set_window	window.c	/^winlink_set_window(struct winlink *wl, struct window *w)$/;"	f
winlink_shuffle_up	window.c	/^winlink_shuffle_up(struct session *s, struct winlink *wl, int before)$/;"	f
winlink_stack_push	window.c	/^winlink_stack_push(struct winlink_stack *stack, struct winlink *wl)$/;"	f
winlink_stack_remove	window.c	/^winlink_stack_remove(struct winlink_stack *stack, struct winlink *wl)$/;"	f
winlinks	tmux.h	/^	TAILQ_HEAD(, winlink) winlinks;$/;"	m	struct:window
wl	format.c	/^	struct winlink		*wl;$/;"	m	struct:format_tree	typeref:struct:format_tree::winlink	file:
wl	tmux.h	/^	struct winlink		 *wl;$/;"	m	struct:spawn_context	typeref:struct:spawn_context::winlink
wl	tmux.h	/^	struct winlink		*wl;$/;"	m	struct:cmd_find_state	typeref:struct:cmd_find_state::winlink
wl	window-copy.c	/^	struct winlink			*wl;$/;"	m	struct:window_copy_cmd_state	typeref:struct:window_copy_cmd_state::winlink	file:
wme	window-copy.c	/^	struct window_mode_entry	*wme;$/;"	m	struct:window_copy_cmd_state	typeref:struct:window_copy_cmd_state::window_mode_entry	file:
woken	cmd-wait-for.c	/^	int			woken;$/;"	m	struct:wait_channel	file:
wox	tmux.h	/^	u_int		 wox;$/;"	m	struct:tty_ctx
woy	tmux.h	/^	u_int		 woy;$/;"	m	struct:tty_ctx
wp	format.c	/^	struct window_pane	*wp;$/;"	m	struct:format_tree	typeref:struct:format_tree::window_pane	file:
wp	input.c	/^	struct window_pane     *wp;$/;"	m	struct:input_ctx	typeref:struct:input_ctx::window_pane	file:
wp	mode-tree.c	/^	struct window_pane	 *wp;$/;"	m	struct:mode_tree_data	typeref:struct:mode_tree_data::window_pane	file:
wp	tmux.h	/^	int		wp;$/;"	m	struct:mouse_event
wp	tmux.h	/^	struct window_pane		*wp;$/;"	m	struct:window_mode_entry	typeref:struct:window_mode_entry::window_pane
wp	tmux.h	/^	struct window_pane	*wp;$/;"	m	struct:cmd_find_state	typeref:struct:cmd_find_state::window_pane
wp	tmux.h	/^	struct window_pane	*wp;$/;"	m	struct:screen_write_ctx	typeref:struct:screen_write_ctx::window_pane
wp	tmux.h	/^	struct window_pane *wp;$/;"	m	struct:layout_cell	typeref:struct:layout_cell::window_pane
wp	window-buffer.c	/^	struct window_pane		 *wp;$/;"	m	struct:window_buffer_modedata	typeref:struct:window_buffer_modedata::window_pane	file:
wp	window-client.c	/^	struct window_pane		 *wp;$/;"	m	struct:window_client_modedata	typeref:struct:window_client_modedata::window_pane	file:
wp	window-customize.c	/^	struct window_pane			 *wp;$/;"	m	struct:window_customize_modedata	typeref:struct:window_customize_modedata::window_pane	file:
wp	window-tree.c	/^	struct window_pane		 *wp;$/;"	m	struct:window_tree_modedata	typeref:struct:window_tree_modedata::window_pane	file:
wp	window.c	/^	u_int			 wp;$/;"	m	struct:window_pane_input_data	file:
wp0	tmux.h	/^	struct window_pane	 *wp0;$/;"	m	struct:spawn_context	typeref:struct:spawn_context::window_pane
wp_id	cmd-run-shell.c	/^	int			 wp_id;$/;"	m	struct:cmd_run_shell_data	file:
wp_id	window-buffer.c	/^	u_int			 wp_id;$/;"	m	struct:window_buffer_editdata	file:
wpos	compat/imsg.h	/^	size_t			 wpos;$/;"	m	struct:ibuf
wpos	compat/imsg.h	/^	size_t			 wpos;$/;"	m	struct:ibuf_read
wrapped	screen-write.c	/^	int			 wrapped;$/;"	m	struct:screen_write_collect_item	file:
wrapped	tmux.h	/^	int			 wrapped;$/;"	m	struct:tty_ctx
write_event	control.c	/^	struct bufferevent		*write_event;$/;"	m	struct:control_state	typeref:struct:control_state::bufferevent	file:
write_list	tmux.h	/^	struct screen_write_collect_line *write_list;$/;"	m	struct:screen	typeref:struct:screen::screen_write_collect_line
written	tmux.h	/^	size_t		 written;$/;"	m	struct:client
written	tmux.h	/^	size_t		 written;$/;"	m	struct:window_pane
written	tmux.h	/^	u_int			 written;$/;"	m	struct:screen_write_ctx
ws	window-copy.c	/^	const char	*ws;		\/* word separators *\/$/;"	m	struct:window_copy_mode_data	file:
wsx	tmux.h	/^	u_int		 wsx;$/;"	m	struct:tty_ctx
wsy	tmux.h	/^	u_int		 wsy;$/;"	m	struct:tty_ctx
wtail	mdoc2man.awk	/^function wtail() {$/;"	f
x	screen-write.c	/^	u_int			 x;$/;"	m	struct:screen_write_collect_item	file:
x	tmux.h	/^	u_int		x;$/;"	m	struct:mouse_event
xasprintf	xmalloc.c	/^xasprintf(char **ret, const char *fmt, ...)$/;"	f
xcalloc	xmalloc.c	/^xcalloc(size_t nmemb, size_t size)$/;"	f
xmalloc	xmalloc.c	/^xmalloc(size_t size)$/;"	f
xoff	tmux.h	/^	u_int		 xoff;$/;"	m	struct:layout_cell
xoff	tmux.h	/^	u_int		 xoff;$/;"	m	struct:tty_ctx
xoff	tmux.h	/^	u_int		 xoff;$/;"	m	struct:window_pane
xpixel	tmux.h	/^	u_int		 xpixel;$/;"	m	struct:tty
xpixel	tmux.h	/^	u_int		 xpixel;$/;"	m	struct:window
xrealloc	xmalloc.c	/^xrealloc(void *ptr, size_t size)$/;"	f
xreallocarray	xmalloc.c	/^xreallocarray(void *ptr, size_t nmemb, size_t size)$/;"	f
xrecallocarray	xmalloc.c	/^xrecallocarray(void *ptr, size_t oldnmemb, size_t nmemb, size_t size)$/;"	f
xsnprintf	xmalloc.c	/^xsnprintf(char *str, size_t len, const char *fmt, ...)$/;"	f
xstrdup	xmalloc.c	/^xstrdup(const char *str)$/;"	f
xstrndup	xmalloc.c	/^xstrndup(const char *str, size_t maxlen)$/;"	f
xvasprintf	xmalloc.c	/^xvasprintf(char **ret, const char *fmt, va_list ap)$/;"	f
xvsnprintf	xmalloc.c	/^xvsnprintf(char *str, size_t len, const char *fmt, va_list ap)$/;"	f
y	tmux.h	/^	u_int		y;$/;"	m	struct:mouse_event
yoff	tmux.h	/^	u_int		 yoff;$/;"	m	struct:layout_cell
yoff	tmux.h	/^	u_int		 yoff;$/;"	m	struct:tty_ctx
yoff	tmux.h	/^	u_int		 yoff;$/;"	m	struct:window_pane
ypixel	tmux.h	/^	u_int		 ypixel;$/;"	m	struct:tty
ypixel	tmux.h	/^	u_int		 ypixel;$/;"	m	struct:window
zoomed	mode-tree.c	/^	int			  zoomed;$/;"	m	struct:mode_tree_data	file:
